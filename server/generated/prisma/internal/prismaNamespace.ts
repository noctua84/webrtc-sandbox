
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * WARNING: This is an internal file that is subject to change!
 * 
 * ðŸ›‘ Under no circumstances should you import this file directly! ðŸ›‘
 * 
 * All exports from this file are wrapped under a `Prisma` namespace object in the client.ts file.
 * While this enables partial backward compatibility, it is not part of the stable public API.
 * 
 * If you are looking for your Models, Enums, and Input Types, please import them from the respective 
 * model files in the `model` directory!
 */

import * as runtime from "@prisma/client/runtime/library"
import type * as Prisma from "../models"
import { type PrismaClient } from "./class"

export type * from '../models'

export type DMMF = typeof runtime.DMMF

export type PrismaPromise<T> = runtime.Types.Public.PrismaPromise<T>

/**
 * Validator
 */
export const validator = runtime.Public.validator

/**
 * Prisma Errors
 */

export const PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
export type PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError

export const PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
export type PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError

export const PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
export type PrismaClientRustPanicError = runtime.PrismaClientRustPanicError

export const PrismaClientInitializationError = runtime.PrismaClientInitializationError
export type PrismaClientInitializationError = runtime.PrismaClientInitializationError

export const PrismaClientValidationError = runtime.PrismaClientValidationError
export type PrismaClientValidationError = runtime.PrismaClientValidationError

/**
 * Re-export of sql-template-tag
 */
export const sql = runtime.sqltag
export const empty = runtime.empty
export const join = runtime.join
export const raw = runtime.raw
export const Sql = runtime.Sql
export type Sql = runtime.Sql



/**
 * Decimal.js
 */
export const Decimal = runtime.Decimal
export type Decimal = runtime.Decimal

export type DecimalJsLike = runtime.DecimalJsLike

/**
 * Metrics
 */
export type Metrics = runtime.Metrics
export type Metric<T> = runtime.Metric<T>
export type MetricHistogram = runtime.MetricHistogram
export type MetricHistogramBucket = runtime.MetricHistogramBucket

/**
* Extensions
*/
export type Extension = runtime.Types.Extensions.UserArgs
export const getExtensionContext = runtime.Extensions.getExtensionContext
export type Args<T, F extends runtime.Operation> = runtime.Types.Public.Args<T, F>
export type Payload<T, F extends runtime.Operation = never> = runtime.Types.Public.Payload<T, F>
export type Result<T, A, F extends runtime.Operation> = runtime.Types.Public.Result<T, A, F>
export type Exact<A, W> = runtime.Types.Public.Exact<A, W>

export type PrismaVersion = {
  client: string
  engine: string
}

/**
 * Prisma Client JS version: 6.12.0
 * Query Engine version: 8047c96bbd92db98a2abc7c9323ce77c02c89dbc
 */
export const prismaVersion: PrismaVersion = {
  client: "6.12.0",
  engine: "8047c96bbd92db98a2abc7c9323ce77c02c89dbc"
}

/**
 * Utility Types
 */

export type JsonObject = runtime.JsonObject
export type JsonArray = runtime.JsonArray
export type JsonValue = runtime.JsonValue
export type InputJsonObject = runtime.InputJsonObject
export type InputJsonArray = runtime.InputJsonArray
export type InputJsonValue = runtime.InputJsonValue

export const NullTypes = {
  DbNull: runtime.objectEnumValues.classes.DbNull as (new (secret: never) => typeof runtime.objectEnumValues.instances.DbNull),
  JsonNull: runtime.objectEnumValues.classes.JsonNull as (new (secret: never) => typeof runtime.objectEnumValues.instances.JsonNull),
  AnyNull: runtime.objectEnumValues.classes.AnyNull as (new (secret: never) => typeof runtime.objectEnumValues.instances.AnyNull),
}

/**
 * Helper for filtering JSON entries that have `null` on the database (empty on the db)
 *
 * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
 */
export const DbNull = runtime.objectEnumValues.instances.DbNull

/**
 * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
 *
 * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
 */
export const JsonNull = runtime.objectEnumValues.instances.JsonNull

/**
 * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
 *
 * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
 */
export const AnyNull = runtime.objectEnumValues.instances.AnyNull

type SelectAndInclude = {
  select: any
  include: any
}

type SelectAndOmit = {
  select: any
  omit: any
}

/**
 * From T, pick a set of properties whose keys are in the union K
 */
type Prisma__Pick<T, K extends keyof T> = {
    [P in K]: T[P];
};

export type Enumerable<T> = T | Array<T>;

/**
 * Subset
 * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
 */
export type Subset<T, U> = {
  [key in keyof T]: key extends keyof U ? T[key] : never;
};

/**
 * SelectSubset
 * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
 * Additionally, it validates, if both select and include are present. If the case, it errors.
 */
export type SelectSubset<T, U> = {
  [key in keyof T]: key extends keyof U ? T[key] : never
} &
  (T extends SelectAndInclude
    ? 'Please either choose `select` or `include`.'
    : T extends SelectAndOmit
      ? 'Please either choose `select` or `omit`.'
      : {})

/**
 * Subset + Intersection
 * @desc From `T` pick properties that exist in `U` and intersect `K`
 */
export type SubsetIntersection<T, U, K> = {
  [key in keyof T]: key extends keyof U ? T[key] : never
} &
  K

type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

/**
 * XOR is needed to have a real mutually exclusive union type
 * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
 */
export type XOR<T, U> =
  T extends object ?
  U extends object ?
    (Without<T, U> & U) | (Without<U, T> & T)
  : U : T


/**
 * Is T a Record?
 */
type IsObject<T extends any> = T extends Array<any>
? False
: T extends Date
? False
: T extends Uint8Array
? False
: T extends BigInt
? False
: T extends object
? True
: False


/**
 * If it's T[], return T
 */
export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

/**
 * From ts-toolbelt
 */

type __Either<O extends object, K extends Key> = Omit<O, K> &
  {
    // Merge all but K
    [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
  }[K]

type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

type _Either<
  O extends object,
  K extends Key,
  strict extends Boolean
> = {
  1: EitherStrict<O, K>
  0: EitherLoose<O, K>
}[strict]

export type Either<
  O extends object,
  K extends Key,
  strict extends Boolean = 1
> = O extends unknown ? _Either<O, K, strict> : never

export type Union = any

export type PatchUndefined<O extends object, O1 extends object> = {
  [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
} & {}

/** Helper Types for "Merge" **/
export type IntersectOf<U extends Union> = (
  U extends unknown ? (k: U) => void : never
) extends (k: infer I) => void
  ? I
  : never

export type Overwrite<O extends object, O1 extends object> = {
    [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
} & {};

type _Merge<U extends object> = IntersectOf<Overwrite<U, {
    [K in keyof U]-?: At<U, K>;
}>>;

type Key = string | number | symbol;
type AtStrict<O extends object, K extends Key> = O[K & keyof O];
type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
    1: AtStrict<O, K>;
    0: AtLoose<O, K>;
}[strict];

export type ComputeRaw<A extends any> = A extends Function ? A : {
  [K in keyof A]: A[K];
} & {};

export type OptionalFlat<O> = {
  [K in keyof O]?: O[K];
} & {};

type _Record<K extends keyof any, T> = {
  [P in K]: T;
};

// cause typescript not to expand types and preserve names
type NoExpand<T> = T extends unknown ? T : never;

// this type assumes the passed object is entirely optional
export type AtLeast<O extends object, K extends string> = NoExpand<
  O extends unknown
  ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
    | {[P in keyof O as P extends K ? P : never]-?: O[P]} & O
  : never>;

type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
/** End Helper Types for "Merge" **/

export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

export type Boolean = True | False

export type True = 1

export type False = 0

export type Not<B extends Boolean> = {
  0: 1
  1: 0
}[B]

export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
  ? 0 // anything `never` is false
  : A1 extends A2
  ? 1
  : 0

export type Has<U extends Union, U1 extends Union> = Not<
  Extends<Exclude<U1, U>, U1>
>

export type Or<B1 extends Boolean, B2 extends Boolean> = {
  0: {
    0: 0
    1: 1
  }
  1: {
    0: 1
    1: 1
  }
}[B1][B2]

export type Keys<U extends Union> = U extends unknown ? keyof U : never

export type GetScalarType<T, O> = O extends object ? {
  [P in keyof T]: P extends keyof O
    ? O[P]
    : never
} : never

type FieldPaths<
  T,
  U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
> = IsObject<T> extends True ? U : T

export type GetHavingFields<T> = {
  [K in keyof T]: Or<
    Or<Extends<'OR', K>, Extends<'AND', K>>,
    Extends<'NOT', K>
  > extends True
    ? // infer is only needed to not hit TS limit
      // based on the brilliant idea of Pierre-Antoine Mills
      // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
      T[K] extends infer TK
      ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
      : never
    : {} extends FieldPaths<T[K]>
    ? never
    : K
}[keyof T]

/**
 * Convert tuple to union
 */
type _TupleToUnion<T> = T extends (infer E)[] ? E : never
type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
export type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

/**
 * Like `Pick`, but additionally can also accept an array of keys
 */
export type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

/**
 * Exclude all keys with underscores
 */
export type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


export const ModelName = {
  Room: 'Room',
  Participant: 'Participant',
  ChatMessage: 'ChatMessage',
  ChatMessageHistory: 'ChatMessageHistory',
  MessageReaction: 'MessageReaction',
  SystemMessage: 'SystemMessage',
  TypingIndicator: 'TypingIndicator',
  PeerConnectionAnalytics: 'PeerConnectionAnalytics',
  RoomActivity: 'RoomActivity',
  ConnectionLog: 'ConnectionLog',
  TurnCredential: 'TurnCredential',
  SystemEvent: 'SystemEvent'
} as const

export type ModelName = (typeof ModelName)[keyof typeof ModelName]



export interface TypeMapCb<ClientOptions = {}> extends runtime.Types.Utils.Fn<{extArgs: runtime.Types.Extensions.InternalArgs }, runtime.Types.Utils.Record<string, any>> {
  returns: TypeMap<this['params']['extArgs'], ClientOptions extends { omit: infer OmitOptions } ? OmitOptions : {}>
}

export type TypeMap<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> = {
  globalOmitOptions: {
    omit: GlobalOmitOptions
  }
  meta: {
    modelProps: "room" | "participant" | "chatMessage" | "chatMessageHistory" | "messageReaction" | "systemMessage" | "typingIndicator" | "peerConnectionAnalytics" | "roomActivity" | "connectionLog" | "turnCredential" | "systemEvent"
    txIsolationLevel: TransactionIsolationLevel
  }
  model: {
    Room: {
      payload: Prisma.$RoomPayload<ExtArgs>
      fields: Prisma.RoomFieldRefs
      operations: {
        findUnique: {
          args: Prisma.RoomFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$RoomPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.RoomFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$RoomPayload>
        }
        findFirst: {
          args: Prisma.RoomFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$RoomPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.RoomFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$RoomPayload>
        }
        findMany: {
          args: Prisma.RoomFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$RoomPayload>[]
        }
        create: {
          args: Prisma.RoomCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$RoomPayload>
        }
        createMany: {
          args: Prisma.RoomCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.RoomCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$RoomPayload>[]
        }
        delete: {
          args: Prisma.RoomDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$RoomPayload>
        }
        update: {
          args: Prisma.RoomUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$RoomPayload>
        }
        deleteMany: {
          args: Prisma.RoomDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.RoomUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.RoomUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$RoomPayload>[]
        }
        upsert: {
          args: Prisma.RoomUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$RoomPayload>
        }
        aggregate: {
          args: Prisma.RoomAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateRoom>
        }
        groupBy: {
          args: Prisma.RoomGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.RoomGroupByOutputType>[]
        }
        count: {
          args: Prisma.RoomCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.RoomCountAggregateOutputType> | number
        }
      }
    }
    Participant: {
      payload: Prisma.$ParticipantPayload<ExtArgs>
      fields: Prisma.ParticipantFieldRefs
      operations: {
        findUnique: {
          args: Prisma.ParticipantFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ParticipantPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.ParticipantFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ParticipantPayload>
        }
        findFirst: {
          args: Prisma.ParticipantFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ParticipantPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.ParticipantFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ParticipantPayload>
        }
        findMany: {
          args: Prisma.ParticipantFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ParticipantPayload>[]
        }
        create: {
          args: Prisma.ParticipantCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ParticipantPayload>
        }
        createMany: {
          args: Prisma.ParticipantCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.ParticipantCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ParticipantPayload>[]
        }
        delete: {
          args: Prisma.ParticipantDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ParticipantPayload>
        }
        update: {
          args: Prisma.ParticipantUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ParticipantPayload>
        }
        deleteMany: {
          args: Prisma.ParticipantDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.ParticipantUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.ParticipantUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ParticipantPayload>[]
        }
        upsert: {
          args: Prisma.ParticipantUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ParticipantPayload>
        }
        aggregate: {
          args: Prisma.ParticipantAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateParticipant>
        }
        groupBy: {
          args: Prisma.ParticipantGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.ParticipantGroupByOutputType>[]
        }
        count: {
          args: Prisma.ParticipantCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.ParticipantCountAggregateOutputType> | number
        }
      }
    }
    ChatMessage: {
      payload: Prisma.$ChatMessagePayload<ExtArgs>
      fields: Prisma.ChatMessageFieldRefs
      operations: {
        findUnique: {
          args: Prisma.ChatMessageFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ChatMessagePayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.ChatMessageFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ChatMessagePayload>
        }
        findFirst: {
          args: Prisma.ChatMessageFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ChatMessagePayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.ChatMessageFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ChatMessagePayload>
        }
        findMany: {
          args: Prisma.ChatMessageFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ChatMessagePayload>[]
        }
        create: {
          args: Prisma.ChatMessageCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ChatMessagePayload>
        }
        createMany: {
          args: Prisma.ChatMessageCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.ChatMessageCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ChatMessagePayload>[]
        }
        delete: {
          args: Prisma.ChatMessageDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ChatMessagePayload>
        }
        update: {
          args: Prisma.ChatMessageUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ChatMessagePayload>
        }
        deleteMany: {
          args: Prisma.ChatMessageDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.ChatMessageUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.ChatMessageUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ChatMessagePayload>[]
        }
        upsert: {
          args: Prisma.ChatMessageUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ChatMessagePayload>
        }
        aggregate: {
          args: Prisma.ChatMessageAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateChatMessage>
        }
        groupBy: {
          args: Prisma.ChatMessageGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.ChatMessageGroupByOutputType>[]
        }
        count: {
          args: Prisma.ChatMessageCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.ChatMessageCountAggregateOutputType> | number
        }
      }
    }
    ChatMessageHistory: {
      payload: Prisma.$ChatMessageHistoryPayload<ExtArgs>
      fields: Prisma.ChatMessageHistoryFieldRefs
      operations: {
        findUnique: {
          args: Prisma.ChatMessageHistoryFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ChatMessageHistoryPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.ChatMessageHistoryFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ChatMessageHistoryPayload>
        }
        findFirst: {
          args: Prisma.ChatMessageHistoryFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ChatMessageHistoryPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.ChatMessageHistoryFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ChatMessageHistoryPayload>
        }
        findMany: {
          args: Prisma.ChatMessageHistoryFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ChatMessageHistoryPayload>[]
        }
        create: {
          args: Prisma.ChatMessageHistoryCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ChatMessageHistoryPayload>
        }
        createMany: {
          args: Prisma.ChatMessageHistoryCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.ChatMessageHistoryCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ChatMessageHistoryPayload>[]
        }
        delete: {
          args: Prisma.ChatMessageHistoryDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ChatMessageHistoryPayload>
        }
        update: {
          args: Prisma.ChatMessageHistoryUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ChatMessageHistoryPayload>
        }
        deleteMany: {
          args: Prisma.ChatMessageHistoryDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.ChatMessageHistoryUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.ChatMessageHistoryUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ChatMessageHistoryPayload>[]
        }
        upsert: {
          args: Prisma.ChatMessageHistoryUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ChatMessageHistoryPayload>
        }
        aggregate: {
          args: Prisma.ChatMessageHistoryAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateChatMessageHistory>
        }
        groupBy: {
          args: Prisma.ChatMessageHistoryGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.ChatMessageHistoryGroupByOutputType>[]
        }
        count: {
          args: Prisma.ChatMessageHistoryCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.ChatMessageHistoryCountAggregateOutputType> | number
        }
      }
    }
    MessageReaction: {
      payload: Prisma.$MessageReactionPayload<ExtArgs>
      fields: Prisma.MessageReactionFieldRefs
      operations: {
        findUnique: {
          args: Prisma.MessageReactionFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MessageReactionPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.MessageReactionFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MessageReactionPayload>
        }
        findFirst: {
          args: Prisma.MessageReactionFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MessageReactionPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.MessageReactionFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MessageReactionPayload>
        }
        findMany: {
          args: Prisma.MessageReactionFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MessageReactionPayload>[]
        }
        create: {
          args: Prisma.MessageReactionCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MessageReactionPayload>
        }
        createMany: {
          args: Prisma.MessageReactionCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.MessageReactionCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MessageReactionPayload>[]
        }
        delete: {
          args: Prisma.MessageReactionDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MessageReactionPayload>
        }
        update: {
          args: Prisma.MessageReactionUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MessageReactionPayload>
        }
        deleteMany: {
          args: Prisma.MessageReactionDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.MessageReactionUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.MessageReactionUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MessageReactionPayload>[]
        }
        upsert: {
          args: Prisma.MessageReactionUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MessageReactionPayload>
        }
        aggregate: {
          args: Prisma.MessageReactionAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateMessageReaction>
        }
        groupBy: {
          args: Prisma.MessageReactionGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.MessageReactionGroupByOutputType>[]
        }
        count: {
          args: Prisma.MessageReactionCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.MessageReactionCountAggregateOutputType> | number
        }
      }
    }
    SystemMessage: {
      payload: Prisma.$SystemMessagePayload<ExtArgs>
      fields: Prisma.SystemMessageFieldRefs
      operations: {
        findUnique: {
          args: Prisma.SystemMessageFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$SystemMessagePayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.SystemMessageFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$SystemMessagePayload>
        }
        findFirst: {
          args: Prisma.SystemMessageFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$SystemMessagePayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.SystemMessageFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$SystemMessagePayload>
        }
        findMany: {
          args: Prisma.SystemMessageFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$SystemMessagePayload>[]
        }
        create: {
          args: Prisma.SystemMessageCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$SystemMessagePayload>
        }
        createMany: {
          args: Prisma.SystemMessageCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.SystemMessageCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$SystemMessagePayload>[]
        }
        delete: {
          args: Prisma.SystemMessageDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$SystemMessagePayload>
        }
        update: {
          args: Prisma.SystemMessageUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$SystemMessagePayload>
        }
        deleteMany: {
          args: Prisma.SystemMessageDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.SystemMessageUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.SystemMessageUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$SystemMessagePayload>[]
        }
        upsert: {
          args: Prisma.SystemMessageUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$SystemMessagePayload>
        }
        aggregate: {
          args: Prisma.SystemMessageAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateSystemMessage>
        }
        groupBy: {
          args: Prisma.SystemMessageGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.SystemMessageGroupByOutputType>[]
        }
        count: {
          args: Prisma.SystemMessageCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.SystemMessageCountAggregateOutputType> | number
        }
      }
    }
    TypingIndicator: {
      payload: Prisma.$TypingIndicatorPayload<ExtArgs>
      fields: Prisma.TypingIndicatorFieldRefs
      operations: {
        findUnique: {
          args: Prisma.TypingIndicatorFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TypingIndicatorPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.TypingIndicatorFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TypingIndicatorPayload>
        }
        findFirst: {
          args: Prisma.TypingIndicatorFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TypingIndicatorPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.TypingIndicatorFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TypingIndicatorPayload>
        }
        findMany: {
          args: Prisma.TypingIndicatorFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TypingIndicatorPayload>[]
        }
        create: {
          args: Prisma.TypingIndicatorCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TypingIndicatorPayload>
        }
        createMany: {
          args: Prisma.TypingIndicatorCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.TypingIndicatorCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TypingIndicatorPayload>[]
        }
        delete: {
          args: Prisma.TypingIndicatorDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TypingIndicatorPayload>
        }
        update: {
          args: Prisma.TypingIndicatorUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TypingIndicatorPayload>
        }
        deleteMany: {
          args: Prisma.TypingIndicatorDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.TypingIndicatorUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.TypingIndicatorUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TypingIndicatorPayload>[]
        }
        upsert: {
          args: Prisma.TypingIndicatorUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TypingIndicatorPayload>
        }
        aggregate: {
          args: Prisma.TypingIndicatorAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateTypingIndicator>
        }
        groupBy: {
          args: Prisma.TypingIndicatorGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.TypingIndicatorGroupByOutputType>[]
        }
        count: {
          args: Prisma.TypingIndicatorCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.TypingIndicatorCountAggregateOutputType> | number
        }
      }
    }
    PeerConnectionAnalytics: {
      payload: Prisma.$PeerConnectionAnalyticsPayload<ExtArgs>
      fields: Prisma.PeerConnectionAnalyticsFieldRefs
      operations: {
        findUnique: {
          args: Prisma.PeerConnectionAnalyticsFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PeerConnectionAnalyticsPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.PeerConnectionAnalyticsFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PeerConnectionAnalyticsPayload>
        }
        findFirst: {
          args: Prisma.PeerConnectionAnalyticsFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PeerConnectionAnalyticsPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.PeerConnectionAnalyticsFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PeerConnectionAnalyticsPayload>
        }
        findMany: {
          args: Prisma.PeerConnectionAnalyticsFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PeerConnectionAnalyticsPayload>[]
        }
        create: {
          args: Prisma.PeerConnectionAnalyticsCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PeerConnectionAnalyticsPayload>
        }
        createMany: {
          args: Prisma.PeerConnectionAnalyticsCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.PeerConnectionAnalyticsCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PeerConnectionAnalyticsPayload>[]
        }
        delete: {
          args: Prisma.PeerConnectionAnalyticsDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PeerConnectionAnalyticsPayload>
        }
        update: {
          args: Prisma.PeerConnectionAnalyticsUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PeerConnectionAnalyticsPayload>
        }
        deleteMany: {
          args: Prisma.PeerConnectionAnalyticsDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.PeerConnectionAnalyticsUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.PeerConnectionAnalyticsUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PeerConnectionAnalyticsPayload>[]
        }
        upsert: {
          args: Prisma.PeerConnectionAnalyticsUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PeerConnectionAnalyticsPayload>
        }
        aggregate: {
          args: Prisma.PeerConnectionAnalyticsAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregatePeerConnectionAnalytics>
        }
        groupBy: {
          args: Prisma.PeerConnectionAnalyticsGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.PeerConnectionAnalyticsGroupByOutputType>[]
        }
        count: {
          args: Prisma.PeerConnectionAnalyticsCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.PeerConnectionAnalyticsCountAggregateOutputType> | number
        }
      }
    }
    RoomActivity: {
      payload: Prisma.$RoomActivityPayload<ExtArgs>
      fields: Prisma.RoomActivityFieldRefs
      operations: {
        findUnique: {
          args: Prisma.RoomActivityFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$RoomActivityPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.RoomActivityFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$RoomActivityPayload>
        }
        findFirst: {
          args: Prisma.RoomActivityFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$RoomActivityPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.RoomActivityFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$RoomActivityPayload>
        }
        findMany: {
          args: Prisma.RoomActivityFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$RoomActivityPayload>[]
        }
        create: {
          args: Prisma.RoomActivityCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$RoomActivityPayload>
        }
        createMany: {
          args: Prisma.RoomActivityCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.RoomActivityCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$RoomActivityPayload>[]
        }
        delete: {
          args: Prisma.RoomActivityDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$RoomActivityPayload>
        }
        update: {
          args: Prisma.RoomActivityUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$RoomActivityPayload>
        }
        deleteMany: {
          args: Prisma.RoomActivityDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.RoomActivityUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.RoomActivityUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$RoomActivityPayload>[]
        }
        upsert: {
          args: Prisma.RoomActivityUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$RoomActivityPayload>
        }
        aggregate: {
          args: Prisma.RoomActivityAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateRoomActivity>
        }
        groupBy: {
          args: Prisma.RoomActivityGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.RoomActivityGroupByOutputType>[]
        }
        count: {
          args: Prisma.RoomActivityCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.RoomActivityCountAggregateOutputType> | number
        }
      }
    }
    ConnectionLog: {
      payload: Prisma.$ConnectionLogPayload<ExtArgs>
      fields: Prisma.ConnectionLogFieldRefs
      operations: {
        findUnique: {
          args: Prisma.ConnectionLogFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ConnectionLogPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.ConnectionLogFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ConnectionLogPayload>
        }
        findFirst: {
          args: Prisma.ConnectionLogFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ConnectionLogPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.ConnectionLogFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ConnectionLogPayload>
        }
        findMany: {
          args: Prisma.ConnectionLogFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ConnectionLogPayload>[]
        }
        create: {
          args: Prisma.ConnectionLogCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ConnectionLogPayload>
        }
        createMany: {
          args: Prisma.ConnectionLogCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.ConnectionLogCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ConnectionLogPayload>[]
        }
        delete: {
          args: Prisma.ConnectionLogDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ConnectionLogPayload>
        }
        update: {
          args: Prisma.ConnectionLogUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ConnectionLogPayload>
        }
        deleteMany: {
          args: Prisma.ConnectionLogDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.ConnectionLogUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.ConnectionLogUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ConnectionLogPayload>[]
        }
        upsert: {
          args: Prisma.ConnectionLogUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ConnectionLogPayload>
        }
        aggregate: {
          args: Prisma.ConnectionLogAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateConnectionLog>
        }
        groupBy: {
          args: Prisma.ConnectionLogGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.ConnectionLogGroupByOutputType>[]
        }
        count: {
          args: Prisma.ConnectionLogCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.ConnectionLogCountAggregateOutputType> | number
        }
      }
    }
    TurnCredential: {
      payload: Prisma.$TurnCredentialPayload<ExtArgs>
      fields: Prisma.TurnCredentialFieldRefs
      operations: {
        findUnique: {
          args: Prisma.TurnCredentialFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TurnCredentialPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.TurnCredentialFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TurnCredentialPayload>
        }
        findFirst: {
          args: Prisma.TurnCredentialFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TurnCredentialPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.TurnCredentialFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TurnCredentialPayload>
        }
        findMany: {
          args: Prisma.TurnCredentialFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TurnCredentialPayload>[]
        }
        create: {
          args: Prisma.TurnCredentialCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TurnCredentialPayload>
        }
        createMany: {
          args: Prisma.TurnCredentialCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.TurnCredentialCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TurnCredentialPayload>[]
        }
        delete: {
          args: Prisma.TurnCredentialDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TurnCredentialPayload>
        }
        update: {
          args: Prisma.TurnCredentialUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TurnCredentialPayload>
        }
        deleteMany: {
          args: Prisma.TurnCredentialDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.TurnCredentialUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.TurnCredentialUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TurnCredentialPayload>[]
        }
        upsert: {
          args: Prisma.TurnCredentialUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TurnCredentialPayload>
        }
        aggregate: {
          args: Prisma.TurnCredentialAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateTurnCredential>
        }
        groupBy: {
          args: Prisma.TurnCredentialGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.TurnCredentialGroupByOutputType>[]
        }
        count: {
          args: Prisma.TurnCredentialCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.TurnCredentialCountAggregateOutputType> | number
        }
      }
    }
    SystemEvent: {
      payload: Prisma.$SystemEventPayload<ExtArgs>
      fields: Prisma.SystemEventFieldRefs
      operations: {
        findUnique: {
          args: Prisma.SystemEventFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$SystemEventPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.SystemEventFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$SystemEventPayload>
        }
        findFirst: {
          args: Prisma.SystemEventFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$SystemEventPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.SystemEventFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$SystemEventPayload>
        }
        findMany: {
          args: Prisma.SystemEventFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$SystemEventPayload>[]
        }
        create: {
          args: Prisma.SystemEventCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$SystemEventPayload>
        }
        createMany: {
          args: Prisma.SystemEventCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.SystemEventCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$SystemEventPayload>[]
        }
        delete: {
          args: Prisma.SystemEventDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$SystemEventPayload>
        }
        update: {
          args: Prisma.SystemEventUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$SystemEventPayload>
        }
        deleteMany: {
          args: Prisma.SystemEventDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.SystemEventUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.SystemEventUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$SystemEventPayload>[]
        }
        upsert: {
          args: Prisma.SystemEventUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$SystemEventPayload>
        }
        aggregate: {
          args: Prisma.SystemEventAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateSystemEvent>
        }
        groupBy: {
          args: Prisma.SystemEventGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.SystemEventGroupByOutputType>[]
        }
        count: {
          args: Prisma.SystemEventCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.SystemEventCountAggregateOutputType> | number
        }
      }
    }
  }
} & {
  other: {
    payload: any
    operations: {
      $executeRaw: {
        args: [query: TemplateStringsArray | Sql, ...values: any[]],
        result: any
      }
      $executeRawUnsafe: {
        args: [query: string, ...values: any[]],
        result: any
      }
      $queryRaw: {
        args: [query: TemplateStringsArray | Sql, ...values: any[]],
        result: any
      }
      $queryRawUnsafe: {
        args: [query: string, ...values: any[]],
        result: any
      }
    }
  }
}

/**
 * Enums
 */

export const TransactionIsolationLevel = runtime.makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
} as const)

export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


export const RoomScalarFieldEnum = {
  id: 'id',
  eventId: 'eventId',
  creator: 'creator',
  createdAt: 'createdAt',
  lastActivity: 'lastActivity',
  maxParticipants: 'maxParticipants',
  timeoutDuration: 'timeoutDuration',
  isActive: 'isActive',
  scheduledStartTime: 'scheduledStartTime',
  eventTitle: 'eventTitle',
  eventDescription: 'eventDescription',
  isPreScheduled: 'isPreScheduled',
  hostUserId: 'hostUserId',
  hostUserName: 'hostUserName'
} as const

export type RoomScalarFieldEnum = (typeof RoomScalarFieldEnum)[keyof typeof RoomScalarFieldEnum]


export const ParticipantScalarFieldEnum = {
  id: 'id',
  socketId: 'socketId',
  userName: 'userName',
  isCreator: 'isCreator',
  joinedAt: 'joinedAt',
  lastSeen: 'lastSeen',
  reconnectionToken: 'reconnectionToken',
  roomId: 'roomId'
} as const

export type ParticipantScalarFieldEnum = (typeof ParticipantScalarFieldEnum)[keyof typeof ParticipantScalarFieldEnum]


export const ChatMessageScalarFieldEnum = {
  id: 'id',
  roomId: 'roomId',
  senderId: 'senderId',
  senderName: 'senderName',
  content: 'content',
  originalContent: 'originalContent',
  timestamp: 'timestamp',
  type: 'type',
  isDeleted: 'isDeleted',
  deletedAt: 'deletedAt',
  deletedBy: 'deletedBy',
  deletionReason: 'deletionReason',
  isEdited: 'isEdited',
  editedAt: 'editedAt',
  editCount: 'editCount',
  replyToId: 'replyToId',
  mentions: 'mentions',
  ipAddress: 'ipAddress',
  messageHash: 'messageHash'
} as const

export type ChatMessageScalarFieldEnum = (typeof ChatMessageScalarFieldEnum)[keyof typeof ChatMessageScalarFieldEnum]


export const ChatMessageHistoryScalarFieldEnum = {
  id: 'id',
  messageId: 'messageId',
  roomId: 'roomId',
  senderId: 'senderId',
  actionType: 'actionType',
  actionTimestamp: 'actionTimestamp',
  actionBy: 'actionBy',
  previousContent: 'previousContent',
  newContent: 'newContent',
  actionReason: 'actionReason',
  ipAddress: 'ipAddress',
  contentHash: 'contentHash'
} as const

export type ChatMessageHistoryScalarFieldEnum = (typeof ChatMessageHistoryScalarFieldEnum)[keyof typeof ChatMessageHistoryScalarFieldEnum]


export const MessageReactionScalarFieldEnum = {
  id: 'id',
  messageId: 'messageId',
  participantId: 'participantId',
  emoji: 'emoji',
  createdAt: 'createdAt'
} as const

export type MessageReactionScalarFieldEnum = (typeof MessageReactionScalarFieldEnum)[keyof typeof MessageReactionScalarFieldEnum]


export const SystemMessageScalarFieldEnum = {
  id: 'id',
  roomId: 'roomId',
  type: 'type',
  content: 'content',
  userName: 'userName',
  userId: 'userId',
  timestamp: 'timestamp',
  metadata: 'metadata'
} as const

export type SystemMessageScalarFieldEnum = (typeof SystemMessageScalarFieldEnum)[keyof typeof SystemMessageScalarFieldEnum]


export const TypingIndicatorScalarFieldEnum = {
  id: 'id',
  roomId: 'roomId',
  participantId: 'participantId',
  isTyping: 'isTyping',
  updatedAt: 'updatedAt'
} as const

export type TypingIndicatorScalarFieldEnum = (typeof TypingIndicatorScalarFieldEnum)[keyof typeof TypingIndicatorScalarFieldEnum]


export const PeerConnectionAnalyticsScalarFieldEnum = {
  id: 'id',
  roomId: 'roomId',
  initiatorId: 'initiatorId',
  targetId: 'targetId',
  connectionState: 'connectionState',
  iceConnectionState: 'iceConnectionState',
  createdAt: 'createdAt',
  establishedAt: 'establishedAt',
  failedAt: 'failedAt',
  lastStateChange: 'lastStateChange',
  candidatesGenerated: 'candidatesGenerated',
  candidatesReceived: 'candidatesReceived',
  connectionDuration: 'connectionDuration',
  failureReason: 'failureReason',
  networkType: 'networkType',
  candidateTypesUsed: 'candidateTypesUsed'
} as const

export type PeerConnectionAnalyticsScalarFieldEnum = (typeof PeerConnectionAnalyticsScalarFieldEnum)[keyof typeof PeerConnectionAnalyticsScalarFieldEnum]


export const RoomActivityScalarFieldEnum = {
  id: 'id',
  roomId: 'roomId',
  eventType: 'eventType',
  participantId: 'participantId',
  timestamp: 'timestamp',
  metadata: 'metadata'
} as const

export type RoomActivityScalarFieldEnum = (typeof RoomActivityScalarFieldEnum)[keyof typeof RoomActivityScalarFieldEnum]


export const ConnectionLogScalarFieldEnum = {
  id: 'id',
  socketId: 'socketId',
  eventType: 'eventType',
  roomId: 'roomId',
  timestamp: 'timestamp',
  userAgent: 'userAgent',
  ipAddress: 'ipAddress',
  metadata: 'metadata'
} as const

export type ConnectionLogScalarFieldEnum = (typeof ConnectionLogScalarFieldEnum)[keyof typeof ConnectionLogScalarFieldEnum]


export const TurnCredentialScalarFieldEnum = {
  id: 'id',
  username: 'username',
  password: 'password',
  urls: 'urls',
  ttl: 'ttl',
  createdAt: 'createdAt',
  expiresAt: 'expiresAt',
  isActive: 'isActive'
} as const

export type TurnCredentialScalarFieldEnum = (typeof TurnCredentialScalarFieldEnum)[keyof typeof TurnCredentialScalarFieldEnum]


export const SystemEventScalarFieldEnum = {
  id: 'id',
  eventType: 'eventType',
  severity: 'severity',
  message: 'message',
  metadata: 'metadata',
  timestamp: 'timestamp',
  resolved: 'resolved',
  resolvedAt: 'resolvedAt'
} as const

export type SystemEventScalarFieldEnum = (typeof SystemEventScalarFieldEnum)[keyof typeof SystemEventScalarFieldEnum]


export const SortOrder = {
  asc: 'asc',
  desc: 'desc'
} as const

export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


export const NullableJsonNullValueInput = {
  DbNull: DbNull,
  JsonNull: JsonNull
} as const

export type NullableJsonNullValueInput = (typeof NullableJsonNullValueInput)[keyof typeof NullableJsonNullValueInput]


export const QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
} as const

export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


export const NullsOrder = {
  first: 'first',
  last: 'last'
} as const

export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


export const JsonNullValueFilter = {
  DbNull: DbNull,
  JsonNull: JsonNull,
  AnyNull: AnyNull
} as const

export type JsonNullValueFilter = (typeof JsonNullValueFilter)[keyof typeof JsonNullValueFilter]



/**
 * Field references 
 */


/**
 * Reference to a field of type 'String'
 */
export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


/**
 * Reference to a field of type 'String[]'
 */
export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


/**
 * Reference to a field of type 'DateTime'
 */
export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


/**
 * Reference to a field of type 'DateTime[]'
 */
export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


/**
 * Reference to a field of type 'Int'
 */
export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


/**
 * Reference to a field of type 'Int[]'
 */
export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


/**
 * Reference to a field of type 'Boolean'
 */
export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


/**
 * Reference to a field of type 'MessageType'
 */
export type EnumMessageTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'MessageType'>
    


/**
 * Reference to a field of type 'MessageType[]'
 */
export type ListEnumMessageTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'MessageType[]'>
    


/**
 * Reference to a field of type 'MessageActionType'
 */
export type EnumMessageActionTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'MessageActionType'>
    


/**
 * Reference to a field of type 'MessageActionType[]'
 */
export type ListEnumMessageActionTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'MessageActionType[]'>
    


/**
 * Reference to a field of type 'SystemMessageType'
 */
export type EnumSystemMessageTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'SystemMessageType'>
    


/**
 * Reference to a field of type 'SystemMessageType[]'
 */
export type ListEnumSystemMessageTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'SystemMessageType[]'>
    


/**
 * Reference to a field of type 'Json'
 */
export type JsonFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Json'>
    


/**
 * Reference to a field of type 'QueryMode'
 */
export type EnumQueryModeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'QueryMode'>
    


/**
 * Reference to a field of type 'PeerConnectionState'
 */
export type EnumPeerConnectionStateFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'PeerConnectionState'>
    


/**
 * Reference to a field of type 'PeerConnectionState[]'
 */
export type ListEnumPeerConnectionStateFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'PeerConnectionState[]'>
    


/**
 * Reference to a field of type 'IceConnectionState'
 */
export type EnumIceConnectionStateFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'IceConnectionState'>
    


/**
 * Reference to a field of type 'IceConnectionState[]'
 */
export type ListEnumIceConnectionStateFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'IceConnectionState[]'>
    


/**
 * Reference to a field of type 'Float'
 */
export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


/**
 * Reference to a field of type 'Float[]'
 */
export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    

/**
 * Batch Payload for updateMany & deleteMany & createMany
 */
export type BatchPayload = {
  count: number
}


export type Datasource = {
  url?: string
}
export type Datasources = {
  db?: Datasource
}

export const defineExtension = runtime.Extensions.defineExtension as unknown as runtime.Types.Extensions.ExtendsHook<"define", TypeMapCb, runtime.Types.Extensions.DefaultArgs>
export type DefaultPrismaClient = PrismaClient
export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
export interface PrismaClientOptions {
  /**
   * Overwrites the datasource url from your schema.prisma file
   */
  datasources?: Datasources
  /**
   * Overwrites the datasource url from your schema.prisma file
   */
  datasourceUrl?: string
  /**
   * @default "colorless"
   */
  errorFormat?: ErrorFormat
  /**
   * @example
   * ```
   * // Defaults to stdout
   * log: ['query', 'info', 'warn', 'error']
   * 
   * // Emit as events
   * log: [
   *   { emit: 'stdout', level: 'query' },
   *   { emit: 'stdout', level: 'info' },
   *   { emit: 'stdout', level: 'warn' }
   *   { emit: 'stdout', level: 'error' }
   * ]
   * ```
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
   */
  log?: (LogLevel | LogDefinition)[]
  /**
   * The default values for transactionOptions
   * maxWait ?= 2000
   * timeout ?= 5000
   */
  transactionOptions?: {
    maxWait?: number
    timeout?: number
    isolationLevel?: TransactionIsolationLevel
  }
  /**
   * Global configuration for omitting model fields by default.
   * 
   * @example
   * ```
   * const prisma = new PrismaClient({
   *   omit: {
   *     user: {
   *       password: true
   *     }
   *   }
   * })
   * ```
   */
  omit?: GlobalOmitConfig
}
export type GlobalOmitConfig = {
  room?: Prisma.RoomOmit
  participant?: Prisma.ParticipantOmit
  chatMessage?: Prisma.ChatMessageOmit
  chatMessageHistory?: Prisma.ChatMessageHistoryOmit
  messageReaction?: Prisma.MessageReactionOmit
  systemMessage?: Prisma.SystemMessageOmit
  typingIndicator?: Prisma.TypingIndicatorOmit
  peerConnectionAnalytics?: Prisma.PeerConnectionAnalyticsOmit
  roomActivity?: Prisma.RoomActivityOmit
  connectionLog?: Prisma.ConnectionLogOmit
  turnCredential?: Prisma.TurnCredentialOmit
  systemEvent?: Prisma.SystemEventOmit
}

/* Types for Logging */
export type LogLevel = 'info' | 'query' | 'warn' | 'error'
export type LogDefinition = {
  level: LogLevel
  emit: 'stdout' | 'event'
}

export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
  GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
  : never

export type QueryEvent = {
  timestamp: Date
  query: string
  params: string
  duration: number
  target: string
}

export type LogEvent = {
  timestamp: Date
  message: string
  target: string
}
/* End Types for Logging */


export type PrismaAction =
  | 'findUnique'
  | 'findUniqueOrThrow'
  | 'findMany'
  | 'findFirst'
  | 'findFirstOrThrow'
  | 'create'
  | 'createMany'
  | 'createManyAndReturn'
  | 'update'
  | 'updateMany'
  | 'updateManyAndReturn'
  | 'upsert'
  | 'delete'
  | 'deleteMany'
  | 'executeRaw'
  | 'queryRaw'
  | 'aggregate'
  | 'count'
  | 'runCommandRaw'
  | 'findRaw' 
  | 'groupBy'

/**
 * These options are being passed into the middleware as "params"
 */
export type MiddlewareParams = {
  model?: ModelName
  action: PrismaAction
  args: any
  dataPath: string[]
  runInTransaction: boolean
}

/**
 * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
 */
export type Middleware<T = any> = (
  params: MiddlewareParams,
  next: (params: MiddlewareParams) => runtime.Types.Utils.JsPromise<T>,
) => runtime.Types.Utils.JsPromise<T>

/**
 * `PrismaClient` proxy available in interactive transactions.
 */
export type TransactionClient = Omit<DefaultPrismaClient, runtime.ITXClientDenyList>

