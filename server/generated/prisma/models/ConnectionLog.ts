
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `ConnectionLog` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model ConnectionLog
 * 
 */
export type ConnectionLogModel = runtime.Types.Result.DefaultSelection<Prisma.$ConnectionLogPayload>

export type AggregateConnectionLog = {
  _count: ConnectionLogCountAggregateOutputType | null
  _min: ConnectionLogMinAggregateOutputType | null
  _max: ConnectionLogMaxAggregateOutputType | null
}

export type ConnectionLogMinAggregateOutputType = {
  id: string | null
  socketId: string | null
  eventType: string | null
  roomId: string | null
  timestamp: Date | null
  userAgent: string | null
  ipAddress: string | null
}

export type ConnectionLogMaxAggregateOutputType = {
  id: string | null
  socketId: string | null
  eventType: string | null
  roomId: string | null
  timestamp: Date | null
  userAgent: string | null
  ipAddress: string | null
}

export type ConnectionLogCountAggregateOutputType = {
  id: number
  socketId: number
  eventType: number
  roomId: number
  timestamp: number
  userAgent: number
  ipAddress: number
  metadata: number
  _all: number
}


export type ConnectionLogMinAggregateInputType = {
  id?: true
  socketId?: true
  eventType?: true
  roomId?: true
  timestamp?: true
  userAgent?: true
  ipAddress?: true
}

export type ConnectionLogMaxAggregateInputType = {
  id?: true
  socketId?: true
  eventType?: true
  roomId?: true
  timestamp?: true
  userAgent?: true
  ipAddress?: true
}

export type ConnectionLogCountAggregateInputType = {
  id?: true
  socketId?: true
  eventType?: true
  roomId?: true
  timestamp?: true
  userAgent?: true
  ipAddress?: true
  metadata?: true
  _all?: true
}

export type ConnectionLogAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which ConnectionLog to aggregate.
   */
  where?: Prisma.ConnectionLogWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of ConnectionLogs to fetch.
   */
  orderBy?: Prisma.ConnectionLogOrderByWithRelationInput | Prisma.ConnectionLogOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.ConnectionLogWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` ConnectionLogs from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` ConnectionLogs.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned ConnectionLogs
  **/
  _count?: true | ConnectionLogCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: ConnectionLogMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: ConnectionLogMaxAggregateInputType
}

export type GetConnectionLogAggregateType<T extends ConnectionLogAggregateArgs> = {
      [P in keyof T & keyof AggregateConnectionLog]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateConnectionLog[P]>
    : Prisma.GetScalarType<T[P], AggregateConnectionLog[P]>
}




export type ConnectionLogGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.ConnectionLogWhereInput
  orderBy?: Prisma.ConnectionLogOrderByWithAggregationInput | Prisma.ConnectionLogOrderByWithAggregationInput[]
  by: Prisma.ConnectionLogScalarFieldEnum[] | Prisma.ConnectionLogScalarFieldEnum
  having?: Prisma.ConnectionLogScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: ConnectionLogCountAggregateInputType | true
  _min?: ConnectionLogMinAggregateInputType
  _max?: ConnectionLogMaxAggregateInputType
}

export type ConnectionLogGroupByOutputType = {
  id: string
  socketId: string
  eventType: string
  roomId: string | null
  timestamp: Date
  userAgent: string | null
  ipAddress: string | null
  metadata: runtime.JsonValue | null
  _count: ConnectionLogCountAggregateOutputType | null
  _min: ConnectionLogMinAggregateOutputType | null
  _max: ConnectionLogMaxAggregateOutputType | null
}

type GetConnectionLogGroupByPayload<T extends ConnectionLogGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<ConnectionLogGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof ConnectionLogGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], ConnectionLogGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], ConnectionLogGroupByOutputType[P]>
      }
    >
  > 



export type ConnectionLogWhereInput = {
  AND?: Prisma.ConnectionLogWhereInput | Prisma.ConnectionLogWhereInput[]
  OR?: Prisma.ConnectionLogWhereInput[]
  NOT?: Prisma.ConnectionLogWhereInput | Prisma.ConnectionLogWhereInput[]
  id?: Prisma.StringFilter<"ConnectionLog"> | string
  socketId?: Prisma.StringFilter<"ConnectionLog"> | string
  eventType?: Prisma.StringFilter<"ConnectionLog"> | string
  roomId?: Prisma.StringNullableFilter<"ConnectionLog"> | string | null
  timestamp?: Prisma.DateTimeFilter<"ConnectionLog"> | Date | string
  userAgent?: Prisma.StringNullableFilter<"ConnectionLog"> | string | null
  ipAddress?: Prisma.StringNullableFilter<"ConnectionLog"> | string | null
  metadata?: Prisma.JsonNullableFilter<"ConnectionLog">
}

export type ConnectionLogOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  socketId?: Prisma.SortOrder
  eventType?: Prisma.SortOrder
  roomId?: Prisma.SortOrderInput | Prisma.SortOrder
  timestamp?: Prisma.SortOrder
  userAgent?: Prisma.SortOrderInput | Prisma.SortOrder
  ipAddress?: Prisma.SortOrderInput | Prisma.SortOrder
  metadata?: Prisma.SortOrderInput | Prisma.SortOrder
}

export type ConnectionLogWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  AND?: Prisma.ConnectionLogWhereInput | Prisma.ConnectionLogWhereInput[]
  OR?: Prisma.ConnectionLogWhereInput[]
  NOT?: Prisma.ConnectionLogWhereInput | Prisma.ConnectionLogWhereInput[]
  socketId?: Prisma.StringFilter<"ConnectionLog"> | string
  eventType?: Prisma.StringFilter<"ConnectionLog"> | string
  roomId?: Prisma.StringNullableFilter<"ConnectionLog"> | string | null
  timestamp?: Prisma.DateTimeFilter<"ConnectionLog"> | Date | string
  userAgent?: Prisma.StringNullableFilter<"ConnectionLog"> | string | null
  ipAddress?: Prisma.StringNullableFilter<"ConnectionLog"> | string | null
  metadata?: Prisma.JsonNullableFilter<"ConnectionLog">
}, "id">

export type ConnectionLogOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  socketId?: Prisma.SortOrder
  eventType?: Prisma.SortOrder
  roomId?: Prisma.SortOrderInput | Prisma.SortOrder
  timestamp?: Prisma.SortOrder
  userAgent?: Prisma.SortOrderInput | Prisma.SortOrder
  ipAddress?: Prisma.SortOrderInput | Prisma.SortOrder
  metadata?: Prisma.SortOrderInput | Prisma.SortOrder
  _count?: Prisma.ConnectionLogCountOrderByAggregateInput
  _max?: Prisma.ConnectionLogMaxOrderByAggregateInput
  _min?: Prisma.ConnectionLogMinOrderByAggregateInput
}

export type ConnectionLogScalarWhereWithAggregatesInput = {
  AND?: Prisma.ConnectionLogScalarWhereWithAggregatesInput | Prisma.ConnectionLogScalarWhereWithAggregatesInput[]
  OR?: Prisma.ConnectionLogScalarWhereWithAggregatesInput[]
  NOT?: Prisma.ConnectionLogScalarWhereWithAggregatesInput | Prisma.ConnectionLogScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"ConnectionLog"> | string
  socketId?: Prisma.StringWithAggregatesFilter<"ConnectionLog"> | string
  eventType?: Prisma.StringWithAggregatesFilter<"ConnectionLog"> | string
  roomId?: Prisma.StringNullableWithAggregatesFilter<"ConnectionLog"> | string | null
  timestamp?: Prisma.DateTimeWithAggregatesFilter<"ConnectionLog"> | Date | string
  userAgent?: Prisma.StringNullableWithAggregatesFilter<"ConnectionLog"> | string | null
  ipAddress?: Prisma.StringNullableWithAggregatesFilter<"ConnectionLog"> | string | null
  metadata?: Prisma.JsonNullableWithAggregatesFilter<"ConnectionLog">
}

export type ConnectionLogCreateInput = {
  id?: string
  socketId: string
  eventType: string
  roomId?: string | null
  timestamp?: Date | string
  userAgent?: string | null
  ipAddress?: string | null
  metadata?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
}

export type ConnectionLogUncheckedCreateInput = {
  id?: string
  socketId: string
  eventType: string
  roomId?: string | null
  timestamp?: Date | string
  userAgent?: string | null
  ipAddress?: string | null
  metadata?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
}

export type ConnectionLogUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  socketId?: Prisma.StringFieldUpdateOperationsInput | string
  eventType?: Prisma.StringFieldUpdateOperationsInput | string
  roomId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  timestamp?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  userAgent?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  ipAddress?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  metadata?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
}

export type ConnectionLogUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  socketId?: Prisma.StringFieldUpdateOperationsInput | string
  eventType?: Prisma.StringFieldUpdateOperationsInput | string
  roomId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  timestamp?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  userAgent?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  ipAddress?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  metadata?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
}

export type ConnectionLogCreateManyInput = {
  id?: string
  socketId: string
  eventType: string
  roomId?: string | null
  timestamp?: Date | string
  userAgent?: string | null
  ipAddress?: string | null
  metadata?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
}

export type ConnectionLogUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  socketId?: Prisma.StringFieldUpdateOperationsInput | string
  eventType?: Prisma.StringFieldUpdateOperationsInput | string
  roomId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  timestamp?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  userAgent?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  ipAddress?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  metadata?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
}

export type ConnectionLogUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  socketId?: Prisma.StringFieldUpdateOperationsInput | string
  eventType?: Prisma.StringFieldUpdateOperationsInput | string
  roomId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  timestamp?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  userAgent?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  ipAddress?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  metadata?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
}

export type ConnectionLogCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  socketId?: Prisma.SortOrder
  eventType?: Prisma.SortOrder
  roomId?: Prisma.SortOrder
  timestamp?: Prisma.SortOrder
  userAgent?: Prisma.SortOrder
  ipAddress?: Prisma.SortOrder
  metadata?: Prisma.SortOrder
}

export type ConnectionLogMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  socketId?: Prisma.SortOrder
  eventType?: Prisma.SortOrder
  roomId?: Prisma.SortOrder
  timestamp?: Prisma.SortOrder
  userAgent?: Prisma.SortOrder
  ipAddress?: Prisma.SortOrder
}

export type ConnectionLogMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  socketId?: Prisma.SortOrder
  eventType?: Prisma.SortOrder
  roomId?: Prisma.SortOrder
  timestamp?: Prisma.SortOrder
  userAgent?: Prisma.SortOrder
  ipAddress?: Prisma.SortOrder
}



export type ConnectionLogSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  socketId?: boolean
  eventType?: boolean
  roomId?: boolean
  timestamp?: boolean
  userAgent?: boolean
  ipAddress?: boolean
  metadata?: boolean
}, ExtArgs["result"]["connectionLog"]>

export type ConnectionLogSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  socketId?: boolean
  eventType?: boolean
  roomId?: boolean
  timestamp?: boolean
  userAgent?: boolean
  ipAddress?: boolean
  metadata?: boolean
}, ExtArgs["result"]["connectionLog"]>

export type ConnectionLogSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  socketId?: boolean
  eventType?: boolean
  roomId?: boolean
  timestamp?: boolean
  userAgent?: boolean
  ipAddress?: boolean
  metadata?: boolean
}, ExtArgs["result"]["connectionLog"]>

export type ConnectionLogSelectScalar = {
  id?: boolean
  socketId?: boolean
  eventType?: boolean
  roomId?: boolean
  timestamp?: boolean
  userAgent?: boolean
  ipAddress?: boolean
  metadata?: boolean
}

export type ConnectionLogOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "socketId" | "eventType" | "roomId" | "timestamp" | "userAgent" | "ipAddress" | "metadata", ExtArgs["result"]["connectionLog"]>

export type $ConnectionLogPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "ConnectionLog"
  objects: {}
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    socketId: string
    eventType: string
    roomId: string | null
    timestamp: Date
    userAgent: string | null
    ipAddress: string | null
    metadata: runtime.JsonValue | null
  }, ExtArgs["result"]["connectionLog"]>
  composites: {}
}

export type ConnectionLogGetPayload<S extends boolean | null | undefined | ConnectionLogDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$ConnectionLogPayload, S>

export type ConnectionLogCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<ConnectionLogFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: ConnectionLogCountAggregateInputType | true
  }

export interface ConnectionLogDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ConnectionLog'], meta: { name: 'ConnectionLog' } }
  /**
   * Find zero or one ConnectionLog that matches the filter.
   * @param {ConnectionLogFindUniqueArgs} args - Arguments to find a ConnectionLog
   * @example
   * // Get one ConnectionLog
   * const connectionLog = await prisma.connectionLog.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends ConnectionLogFindUniqueArgs>(args: Prisma.SelectSubset<T, ConnectionLogFindUniqueArgs<ExtArgs>>): Prisma.Prisma__ConnectionLogClient<runtime.Types.Result.GetResult<Prisma.$ConnectionLogPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one ConnectionLog that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {ConnectionLogFindUniqueOrThrowArgs} args - Arguments to find a ConnectionLog
   * @example
   * // Get one ConnectionLog
   * const connectionLog = await prisma.connectionLog.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends ConnectionLogFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, ConnectionLogFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__ConnectionLogClient<runtime.Types.Result.GetResult<Prisma.$ConnectionLogPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first ConnectionLog that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ConnectionLogFindFirstArgs} args - Arguments to find a ConnectionLog
   * @example
   * // Get one ConnectionLog
   * const connectionLog = await prisma.connectionLog.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends ConnectionLogFindFirstArgs>(args?: Prisma.SelectSubset<T, ConnectionLogFindFirstArgs<ExtArgs>>): Prisma.Prisma__ConnectionLogClient<runtime.Types.Result.GetResult<Prisma.$ConnectionLogPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first ConnectionLog that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ConnectionLogFindFirstOrThrowArgs} args - Arguments to find a ConnectionLog
   * @example
   * // Get one ConnectionLog
   * const connectionLog = await prisma.connectionLog.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends ConnectionLogFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, ConnectionLogFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__ConnectionLogClient<runtime.Types.Result.GetResult<Prisma.$ConnectionLogPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more ConnectionLogs that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ConnectionLogFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all ConnectionLogs
   * const connectionLogs = await prisma.connectionLog.findMany()
   * 
   * // Get first 10 ConnectionLogs
   * const connectionLogs = await prisma.connectionLog.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const connectionLogWithIdOnly = await prisma.connectionLog.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends ConnectionLogFindManyArgs>(args?: Prisma.SelectSubset<T, ConnectionLogFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ConnectionLogPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a ConnectionLog.
   * @param {ConnectionLogCreateArgs} args - Arguments to create a ConnectionLog.
   * @example
   * // Create one ConnectionLog
   * const ConnectionLog = await prisma.connectionLog.create({
   *   data: {
   *     // ... data to create a ConnectionLog
   *   }
   * })
   * 
   */
  create<T extends ConnectionLogCreateArgs>(args: Prisma.SelectSubset<T, ConnectionLogCreateArgs<ExtArgs>>): Prisma.Prisma__ConnectionLogClient<runtime.Types.Result.GetResult<Prisma.$ConnectionLogPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many ConnectionLogs.
   * @param {ConnectionLogCreateManyArgs} args - Arguments to create many ConnectionLogs.
   * @example
   * // Create many ConnectionLogs
   * const connectionLog = await prisma.connectionLog.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends ConnectionLogCreateManyArgs>(args?: Prisma.SelectSubset<T, ConnectionLogCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many ConnectionLogs and returns the data saved in the database.
   * @param {ConnectionLogCreateManyAndReturnArgs} args - Arguments to create many ConnectionLogs.
   * @example
   * // Create many ConnectionLogs
   * const connectionLog = await prisma.connectionLog.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many ConnectionLogs and only return the `id`
   * const connectionLogWithIdOnly = await prisma.connectionLog.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends ConnectionLogCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, ConnectionLogCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ConnectionLogPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a ConnectionLog.
   * @param {ConnectionLogDeleteArgs} args - Arguments to delete one ConnectionLog.
   * @example
   * // Delete one ConnectionLog
   * const ConnectionLog = await prisma.connectionLog.delete({
   *   where: {
   *     // ... filter to delete one ConnectionLog
   *   }
   * })
   * 
   */
  delete<T extends ConnectionLogDeleteArgs>(args: Prisma.SelectSubset<T, ConnectionLogDeleteArgs<ExtArgs>>): Prisma.Prisma__ConnectionLogClient<runtime.Types.Result.GetResult<Prisma.$ConnectionLogPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one ConnectionLog.
   * @param {ConnectionLogUpdateArgs} args - Arguments to update one ConnectionLog.
   * @example
   * // Update one ConnectionLog
   * const connectionLog = await prisma.connectionLog.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends ConnectionLogUpdateArgs>(args: Prisma.SelectSubset<T, ConnectionLogUpdateArgs<ExtArgs>>): Prisma.Prisma__ConnectionLogClient<runtime.Types.Result.GetResult<Prisma.$ConnectionLogPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more ConnectionLogs.
   * @param {ConnectionLogDeleteManyArgs} args - Arguments to filter ConnectionLogs to delete.
   * @example
   * // Delete a few ConnectionLogs
   * const { count } = await prisma.connectionLog.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends ConnectionLogDeleteManyArgs>(args?: Prisma.SelectSubset<T, ConnectionLogDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more ConnectionLogs.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ConnectionLogUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many ConnectionLogs
   * const connectionLog = await prisma.connectionLog.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends ConnectionLogUpdateManyArgs>(args: Prisma.SelectSubset<T, ConnectionLogUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more ConnectionLogs and returns the data updated in the database.
   * @param {ConnectionLogUpdateManyAndReturnArgs} args - Arguments to update many ConnectionLogs.
   * @example
   * // Update many ConnectionLogs
   * const connectionLog = await prisma.connectionLog.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more ConnectionLogs and only return the `id`
   * const connectionLogWithIdOnly = await prisma.connectionLog.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends ConnectionLogUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, ConnectionLogUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ConnectionLogPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one ConnectionLog.
   * @param {ConnectionLogUpsertArgs} args - Arguments to update or create a ConnectionLog.
   * @example
   * // Update or create a ConnectionLog
   * const connectionLog = await prisma.connectionLog.upsert({
   *   create: {
   *     // ... data to create a ConnectionLog
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the ConnectionLog we want to update
   *   }
   * })
   */
  upsert<T extends ConnectionLogUpsertArgs>(args: Prisma.SelectSubset<T, ConnectionLogUpsertArgs<ExtArgs>>): Prisma.Prisma__ConnectionLogClient<runtime.Types.Result.GetResult<Prisma.$ConnectionLogPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of ConnectionLogs.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ConnectionLogCountArgs} args - Arguments to filter ConnectionLogs to count.
   * @example
   * // Count the number of ConnectionLogs
   * const count = await prisma.connectionLog.count({
   *   where: {
   *     // ... the filter for the ConnectionLogs we want to count
   *   }
   * })
  **/
  count<T extends ConnectionLogCountArgs>(
    args?: Prisma.Subset<T, ConnectionLogCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], ConnectionLogCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a ConnectionLog.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ConnectionLogAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends ConnectionLogAggregateArgs>(args: Prisma.Subset<T, ConnectionLogAggregateArgs>): Prisma.PrismaPromise<GetConnectionLogAggregateType<T>>

  /**
   * Group by ConnectionLog.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ConnectionLogGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends ConnectionLogGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: ConnectionLogGroupByArgs['orderBy'] }
      : { orderBy?: ConnectionLogGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, ConnectionLogGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetConnectionLogGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the ConnectionLog model
 */
readonly fields: ConnectionLogFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for ConnectionLog.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__ConnectionLogClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the ConnectionLog model
 */
export interface ConnectionLogFieldRefs {
  readonly id: Prisma.FieldRef<"ConnectionLog", 'String'>
  readonly socketId: Prisma.FieldRef<"ConnectionLog", 'String'>
  readonly eventType: Prisma.FieldRef<"ConnectionLog", 'String'>
  readonly roomId: Prisma.FieldRef<"ConnectionLog", 'String'>
  readonly timestamp: Prisma.FieldRef<"ConnectionLog", 'DateTime'>
  readonly userAgent: Prisma.FieldRef<"ConnectionLog", 'String'>
  readonly ipAddress: Prisma.FieldRef<"ConnectionLog", 'String'>
  readonly metadata: Prisma.FieldRef<"ConnectionLog", 'Json'>
}
    

// Custom InputTypes
/**
 * ConnectionLog findUnique
 */
export type ConnectionLogFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ConnectionLog
   */
  select?: Prisma.ConnectionLogSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ConnectionLog
   */
  omit?: Prisma.ConnectionLogOmit<ExtArgs> | null
  /**
   * Filter, which ConnectionLog to fetch.
   */
  where: Prisma.ConnectionLogWhereUniqueInput
}

/**
 * ConnectionLog findUniqueOrThrow
 */
export type ConnectionLogFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ConnectionLog
   */
  select?: Prisma.ConnectionLogSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ConnectionLog
   */
  omit?: Prisma.ConnectionLogOmit<ExtArgs> | null
  /**
   * Filter, which ConnectionLog to fetch.
   */
  where: Prisma.ConnectionLogWhereUniqueInput
}

/**
 * ConnectionLog findFirst
 */
export type ConnectionLogFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ConnectionLog
   */
  select?: Prisma.ConnectionLogSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ConnectionLog
   */
  omit?: Prisma.ConnectionLogOmit<ExtArgs> | null
  /**
   * Filter, which ConnectionLog to fetch.
   */
  where?: Prisma.ConnectionLogWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of ConnectionLogs to fetch.
   */
  orderBy?: Prisma.ConnectionLogOrderByWithRelationInput | Prisma.ConnectionLogOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for ConnectionLogs.
   */
  cursor?: Prisma.ConnectionLogWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` ConnectionLogs from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` ConnectionLogs.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of ConnectionLogs.
   */
  distinct?: Prisma.ConnectionLogScalarFieldEnum | Prisma.ConnectionLogScalarFieldEnum[]
}

/**
 * ConnectionLog findFirstOrThrow
 */
export type ConnectionLogFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ConnectionLog
   */
  select?: Prisma.ConnectionLogSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ConnectionLog
   */
  omit?: Prisma.ConnectionLogOmit<ExtArgs> | null
  /**
   * Filter, which ConnectionLog to fetch.
   */
  where?: Prisma.ConnectionLogWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of ConnectionLogs to fetch.
   */
  orderBy?: Prisma.ConnectionLogOrderByWithRelationInput | Prisma.ConnectionLogOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for ConnectionLogs.
   */
  cursor?: Prisma.ConnectionLogWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` ConnectionLogs from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` ConnectionLogs.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of ConnectionLogs.
   */
  distinct?: Prisma.ConnectionLogScalarFieldEnum | Prisma.ConnectionLogScalarFieldEnum[]
}

/**
 * ConnectionLog findMany
 */
export type ConnectionLogFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ConnectionLog
   */
  select?: Prisma.ConnectionLogSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ConnectionLog
   */
  omit?: Prisma.ConnectionLogOmit<ExtArgs> | null
  /**
   * Filter, which ConnectionLogs to fetch.
   */
  where?: Prisma.ConnectionLogWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of ConnectionLogs to fetch.
   */
  orderBy?: Prisma.ConnectionLogOrderByWithRelationInput | Prisma.ConnectionLogOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing ConnectionLogs.
   */
  cursor?: Prisma.ConnectionLogWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` ConnectionLogs from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` ConnectionLogs.
   */
  skip?: number
  distinct?: Prisma.ConnectionLogScalarFieldEnum | Prisma.ConnectionLogScalarFieldEnum[]
}

/**
 * ConnectionLog create
 */
export type ConnectionLogCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ConnectionLog
   */
  select?: Prisma.ConnectionLogSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ConnectionLog
   */
  omit?: Prisma.ConnectionLogOmit<ExtArgs> | null
  /**
   * The data needed to create a ConnectionLog.
   */
  data: Prisma.XOR<Prisma.ConnectionLogCreateInput, Prisma.ConnectionLogUncheckedCreateInput>
}

/**
 * ConnectionLog createMany
 */
export type ConnectionLogCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many ConnectionLogs.
   */
  data: Prisma.ConnectionLogCreateManyInput | Prisma.ConnectionLogCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * ConnectionLog createManyAndReturn
 */
export type ConnectionLogCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ConnectionLog
   */
  select?: Prisma.ConnectionLogSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the ConnectionLog
   */
  omit?: Prisma.ConnectionLogOmit<ExtArgs> | null
  /**
   * The data used to create many ConnectionLogs.
   */
  data: Prisma.ConnectionLogCreateManyInput | Prisma.ConnectionLogCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * ConnectionLog update
 */
export type ConnectionLogUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ConnectionLog
   */
  select?: Prisma.ConnectionLogSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ConnectionLog
   */
  omit?: Prisma.ConnectionLogOmit<ExtArgs> | null
  /**
   * The data needed to update a ConnectionLog.
   */
  data: Prisma.XOR<Prisma.ConnectionLogUpdateInput, Prisma.ConnectionLogUncheckedUpdateInput>
  /**
   * Choose, which ConnectionLog to update.
   */
  where: Prisma.ConnectionLogWhereUniqueInput
}

/**
 * ConnectionLog updateMany
 */
export type ConnectionLogUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update ConnectionLogs.
   */
  data: Prisma.XOR<Prisma.ConnectionLogUpdateManyMutationInput, Prisma.ConnectionLogUncheckedUpdateManyInput>
  /**
   * Filter which ConnectionLogs to update
   */
  where?: Prisma.ConnectionLogWhereInput
  /**
   * Limit how many ConnectionLogs to update.
   */
  limit?: number
}

/**
 * ConnectionLog updateManyAndReturn
 */
export type ConnectionLogUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ConnectionLog
   */
  select?: Prisma.ConnectionLogSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the ConnectionLog
   */
  omit?: Prisma.ConnectionLogOmit<ExtArgs> | null
  /**
   * The data used to update ConnectionLogs.
   */
  data: Prisma.XOR<Prisma.ConnectionLogUpdateManyMutationInput, Prisma.ConnectionLogUncheckedUpdateManyInput>
  /**
   * Filter which ConnectionLogs to update
   */
  where?: Prisma.ConnectionLogWhereInput
  /**
   * Limit how many ConnectionLogs to update.
   */
  limit?: number
}

/**
 * ConnectionLog upsert
 */
export type ConnectionLogUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ConnectionLog
   */
  select?: Prisma.ConnectionLogSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ConnectionLog
   */
  omit?: Prisma.ConnectionLogOmit<ExtArgs> | null
  /**
   * The filter to search for the ConnectionLog to update in case it exists.
   */
  where: Prisma.ConnectionLogWhereUniqueInput
  /**
   * In case the ConnectionLog found by the `where` argument doesn't exist, create a new ConnectionLog with this data.
   */
  create: Prisma.XOR<Prisma.ConnectionLogCreateInput, Prisma.ConnectionLogUncheckedCreateInput>
  /**
   * In case the ConnectionLog was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.ConnectionLogUpdateInput, Prisma.ConnectionLogUncheckedUpdateInput>
}

/**
 * ConnectionLog delete
 */
export type ConnectionLogDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ConnectionLog
   */
  select?: Prisma.ConnectionLogSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ConnectionLog
   */
  omit?: Prisma.ConnectionLogOmit<ExtArgs> | null
  /**
   * Filter which ConnectionLog to delete.
   */
  where: Prisma.ConnectionLogWhereUniqueInput
}

/**
 * ConnectionLog deleteMany
 */
export type ConnectionLogDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which ConnectionLogs to delete
   */
  where?: Prisma.ConnectionLogWhereInput
  /**
   * Limit how many ConnectionLogs to delete.
   */
  limit?: number
}

/**
 * ConnectionLog without action
 */
export type ConnectionLogDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ConnectionLog
   */
  select?: Prisma.ConnectionLogSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ConnectionLog
   */
  omit?: Prisma.ConnectionLogOmit<ExtArgs> | null
}
