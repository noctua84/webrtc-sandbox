
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `TurnCredential` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model TurnCredential
 * 
 */
export type TurnCredentialModel = runtime.Types.Result.DefaultSelection<Prisma.$TurnCredentialPayload>

export type AggregateTurnCredential = {
  _count: TurnCredentialCountAggregateOutputType | null
  _avg: TurnCredentialAvgAggregateOutputType | null
  _sum: TurnCredentialSumAggregateOutputType | null
  _min: TurnCredentialMinAggregateOutputType | null
  _max: TurnCredentialMaxAggregateOutputType | null
}

export type TurnCredentialAvgAggregateOutputType = {
  ttl: number | null
}

export type TurnCredentialSumAggregateOutputType = {
  ttl: number | null
}

export type TurnCredentialMinAggregateOutputType = {
  id: string | null
  username: string | null
  password: string | null
  ttl: number | null
  createdAt: Date | null
  expiresAt: Date | null
  isActive: boolean | null
}

export type TurnCredentialMaxAggregateOutputType = {
  id: string | null
  username: string | null
  password: string | null
  ttl: number | null
  createdAt: Date | null
  expiresAt: Date | null
  isActive: boolean | null
}

export type TurnCredentialCountAggregateOutputType = {
  id: number
  username: number
  password: number
  urls: number
  ttl: number
  createdAt: number
  expiresAt: number
  isActive: number
  _all: number
}


export type TurnCredentialAvgAggregateInputType = {
  ttl?: true
}

export type TurnCredentialSumAggregateInputType = {
  ttl?: true
}

export type TurnCredentialMinAggregateInputType = {
  id?: true
  username?: true
  password?: true
  ttl?: true
  createdAt?: true
  expiresAt?: true
  isActive?: true
}

export type TurnCredentialMaxAggregateInputType = {
  id?: true
  username?: true
  password?: true
  ttl?: true
  createdAt?: true
  expiresAt?: true
  isActive?: true
}

export type TurnCredentialCountAggregateInputType = {
  id?: true
  username?: true
  password?: true
  urls?: true
  ttl?: true
  createdAt?: true
  expiresAt?: true
  isActive?: true
  _all?: true
}

export type TurnCredentialAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which TurnCredential to aggregate.
   */
  where?: Prisma.TurnCredentialWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of TurnCredentials to fetch.
   */
  orderBy?: Prisma.TurnCredentialOrderByWithRelationInput | Prisma.TurnCredentialOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.TurnCredentialWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` TurnCredentials from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` TurnCredentials.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned TurnCredentials
  **/
  _count?: true | TurnCredentialCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: TurnCredentialAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: TurnCredentialSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: TurnCredentialMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: TurnCredentialMaxAggregateInputType
}

export type GetTurnCredentialAggregateType<T extends TurnCredentialAggregateArgs> = {
      [P in keyof T & keyof AggregateTurnCredential]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateTurnCredential[P]>
    : Prisma.GetScalarType<T[P], AggregateTurnCredential[P]>
}




export type TurnCredentialGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.TurnCredentialWhereInput
  orderBy?: Prisma.TurnCredentialOrderByWithAggregationInput | Prisma.TurnCredentialOrderByWithAggregationInput[]
  by: Prisma.TurnCredentialScalarFieldEnum[] | Prisma.TurnCredentialScalarFieldEnum
  having?: Prisma.TurnCredentialScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: TurnCredentialCountAggregateInputType | true
  _avg?: TurnCredentialAvgAggregateInputType
  _sum?: TurnCredentialSumAggregateInputType
  _min?: TurnCredentialMinAggregateInputType
  _max?: TurnCredentialMaxAggregateInputType
}

export type TurnCredentialGroupByOutputType = {
  id: string
  username: string
  password: string
  urls: string[]
  ttl: number
  createdAt: Date
  expiresAt: Date
  isActive: boolean
  _count: TurnCredentialCountAggregateOutputType | null
  _avg: TurnCredentialAvgAggregateOutputType | null
  _sum: TurnCredentialSumAggregateOutputType | null
  _min: TurnCredentialMinAggregateOutputType | null
  _max: TurnCredentialMaxAggregateOutputType | null
}

type GetTurnCredentialGroupByPayload<T extends TurnCredentialGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<TurnCredentialGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof TurnCredentialGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], TurnCredentialGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], TurnCredentialGroupByOutputType[P]>
      }
    >
  > 



export type TurnCredentialWhereInput = {
  AND?: Prisma.TurnCredentialWhereInput | Prisma.TurnCredentialWhereInput[]
  OR?: Prisma.TurnCredentialWhereInput[]
  NOT?: Prisma.TurnCredentialWhereInput | Prisma.TurnCredentialWhereInput[]
  id?: Prisma.StringFilter<"TurnCredential"> | string
  username?: Prisma.StringFilter<"TurnCredential"> | string
  password?: Prisma.StringFilter<"TurnCredential"> | string
  urls?: Prisma.StringNullableListFilter<"TurnCredential">
  ttl?: Prisma.IntFilter<"TurnCredential"> | number
  createdAt?: Prisma.DateTimeFilter<"TurnCredential"> | Date | string
  expiresAt?: Prisma.DateTimeFilter<"TurnCredential"> | Date | string
  isActive?: Prisma.BoolFilter<"TurnCredential"> | boolean
}

export type TurnCredentialOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  username?: Prisma.SortOrder
  password?: Prisma.SortOrder
  urls?: Prisma.SortOrder
  ttl?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  expiresAt?: Prisma.SortOrder
  isActive?: Prisma.SortOrder
}

export type TurnCredentialWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  username?: string
  AND?: Prisma.TurnCredentialWhereInput | Prisma.TurnCredentialWhereInput[]
  OR?: Prisma.TurnCredentialWhereInput[]
  NOT?: Prisma.TurnCredentialWhereInput | Prisma.TurnCredentialWhereInput[]
  password?: Prisma.StringFilter<"TurnCredential"> | string
  urls?: Prisma.StringNullableListFilter<"TurnCredential">
  ttl?: Prisma.IntFilter<"TurnCredential"> | number
  createdAt?: Prisma.DateTimeFilter<"TurnCredential"> | Date | string
  expiresAt?: Prisma.DateTimeFilter<"TurnCredential"> | Date | string
  isActive?: Prisma.BoolFilter<"TurnCredential"> | boolean
}, "id" | "username">

export type TurnCredentialOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  username?: Prisma.SortOrder
  password?: Prisma.SortOrder
  urls?: Prisma.SortOrder
  ttl?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  expiresAt?: Prisma.SortOrder
  isActive?: Prisma.SortOrder
  _count?: Prisma.TurnCredentialCountOrderByAggregateInput
  _avg?: Prisma.TurnCredentialAvgOrderByAggregateInput
  _max?: Prisma.TurnCredentialMaxOrderByAggregateInput
  _min?: Prisma.TurnCredentialMinOrderByAggregateInput
  _sum?: Prisma.TurnCredentialSumOrderByAggregateInput
}

export type TurnCredentialScalarWhereWithAggregatesInput = {
  AND?: Prisma.TurnCredentialScalarWhereWithAggregatesInput | Prisma.TurnCredentialScalarWhereWithAggregatesInput[]
  OR?: Prisma.TurnCredentialScalarWhereWithAggregatesInput[]
  NOT?: Prisma.TurnCredentialScalarWhereWithAggregatesInput | Prisma.TurnCredentialScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"TurnCredential"> | string
  username?: Prisma.StringWithAggregatesFilter<"TurnCredential"> | string
  password?: Prisma.StringWithAggregatesFilter<"TurnCredential"> | string
  urls?: Prisma.StringNullableListFilter<"TurnCredential">
  ttl?: Prisma.IntWithAggregatesFilter<"TurnCredential"> | number
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"TurnCredential"> | Date | string
  expiresAt?: Prisma.DateTimeWithAggregatesFilter<"TurnCredential"> | Date | string
  isActive?: Prisma.BoolWithAggregatesFilter<"TurnCredential"> | boolean
}

export type TurnCredentialCreateInput = {
  id?: string
  username: string
  password: string
  urls?: Prisma.TurnCredentialCreateurlsInput | string[]
  ttl?: number
  createdAt?: Date | string
  expiresAt: Date | string
  isActive?: boolean
}

export type TurnCredentialUncheckedCreateInput = {
  id?: string
  username: string
  password: string
  urls?: Prisma.TurnCredentialCreateurlsInput | string[]
  ttl?: number
  createdAt?: Date | string
  expiresAt: Date | string
  isActive?: boolean
}

export type TurnCredentialUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  username?: Prisma.StringFieldUpdateOperationsInput | string
  password?: Prisma.StringFieldUpdateOperationsInput | string
  urls?: Prisma.TurnCredentialUpdateurlsInput | string[]
  ttl?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  expiresAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  isActive?: Prisma.BoolFieldUpdateOperationsInput | boolean
}

export type TurnCredentialUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  username?: Prisma.StringFieldUpdateOperationsInput | string
  password?: Prisma.StringFieldUpdateOperationsInput | string
  urls?: Prisma.TurnCredentialUpdateurlsInput | string[]
  ttl?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  expiresAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  isActive?: Prisma.BoolFieldUpdateOperationsInput | boolean
}

export type TurnCredentialCreateManyInput = {
  id?: string
  username: string
  password: string
  urls?: Prisma.TurnCredentialCreateurlsInput | string[]
  ttl?: number
  createdAt?: Date | string
  expiresAt: Date | string
  isActive?: boolean
}

export type TurnCredentialUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  username?: Prisma.StringFieldUpdateOperationsInput | string
  password?: Prisma.StringFieldUpdateOperationsInput | string
  urls?: Prisma.TurnCredentialUpdateurlsInput | string[]
  ttl?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  expiresAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  isActive?: Prisma.BoolFieldUpdateOperationsInput | boolean
}

export type TurnCredentialUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  username?: Prisma.StringFieldUpdateOperationsInput | string
  password?: Prisma.StringFieldUpdateOperationsInput | string
  urls?: Prisma.TurnCredentialUpdateurlsInput | string[]
  ttl?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  expiresAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  isActive?: Prisma.BoolFieldUpdateOperationsInput | boolean
}

export type TurnCredentialCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  username?: Prisma.SortOrder
  password?: Prisma.SortOrder
  urls?: Prisma.SortOrder
  ttl?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  expiresAt?: Prisma.SortOrder
  isActive?: Prisma.SortOrder
}

export type TurnCredentialAvgOrderByAggregateInput = {
  ttl?: Prisma.SortOrder
}

export type TurnCredentialMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  username?: Prisma.SortOrder
  password?: Prisma.SortOrder
  ttl?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  expiresAt?: Prisma.SortOrder
  isActive?: Prisma.SortOrder
}

export type TurnCredentialMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  username?: Prisma.SortOrder
  password?: Prisma.SortOrder
  ttl?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  expiresAt?: Prisma.SortOrder
  isActive?: Prisma.SortOrder
}

export type TurnCredentialSumOrderByAggregateInput = {
  ttl?: Prisma.SortOrder
}

export type TurnCredentialCreateurlsInput = {
  set: string[]
}

export type TurnCredentialUpdateurlsInput = {
  set?: string[]
  push?: string | string[]
}



export type TurnCredentialSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  username?: boolean
  password?: boolean
  urls?: boolean
  ttl?: boolean
  createdAt?: boolean
  expiresAt?: boolean
  isActive?: boolean
}, ExtArgs["result"]["turnCredential"]>

export type TurnCredentialSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  username?: boolean
  password?: boolean
  urls?: boolean
  ttl?: boolean
  createdAt?: boolean
  expiresAt?: boolean
  isActive?: boolean
}, ExtArgs["result"]["turnCredential"]>

export type TurnCredentialSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  username?: boolean
  password?: boolean
  urls?: boolean
  ttl?: boolean
  createdAt?: boolean
  expiresAt?: boolean
  isActive?: boolean
}, ExtArgs["result"]["turnCredential"]>

export type TurnCredentialSelectScalar = {
  id?: boolean
  username?: boolean
  password?: boolean
  urls?: boolean
  ttl?: boolean
  createdAt?: boolean
  expiresAt?: boolean
  isActive?: boolean
}

export type TurnCredentialOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "username" | "password" | "urls" | "ttl" | "createdAt" | "expiresAt" | "isActive", ExtArgs["result"]["turnCredential"]>

export type $TurnCredentialPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "TurnCredential"
  objects: {}
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    username: string
    password: string
    urls: string[]
    ttl: number
    createdAt: Date
    expiresAt: Date
    isActive: boolean
  }, ExtArgs["result"]["turnCredential"]>
  composites: {}
}

export type TurnCredentialGetPayload<S extends boolean | null | undefined | TurnCredentialDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$TurnCredentialPayload, S>

export type TurnCredentialCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<TurnCredentialFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: TurnCredentialCountAggregateInputType | true
  }

export interface TurnCredentialDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['TurnCredential'], meta: { name: 'TurnCredential' } }
  /**
   * Find zero or one TurnCredential that matches the filter.
   * @param {TurnCredentialFindUniqueArgs} args - Arguments to find a TurnCredential
   * @example
   * // Get one TurnCredential
   * const turnCredential = await prisma.turnCredential.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends TurnCredentialFindUniqueArgs>(args: Prisma.SelectSubset<T, TurnCredentialFindUniqueArgs<ExtArgs>>): Prisma.Prisma__TurnCredentialClient<runtime.Types.Result.GetResult<Prisma.$TurnCredentialPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one TurnCredential that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {TurnCredentialFindUniqueOrThrowArgs} args - Arguments to find a TurnCredential
   * @example
   * // Get one TurnCredential
   * const turnCredential = await prisma.turnCredential.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends TurnCredentialFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, TurnCredentialFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__TurnCredentialClient<runtime.Types.Result.GetResult<Prisma.$TurnCredentialPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first TurnCredential that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TurnCredentialFindFirstArgs} args - Arguments to find a TurnCredential
   * @example
   * // Get one TurnCredential
   * const turnCredential = await prisma.turnCredential.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends TurnCredentialFindFirstArgs>(args?: Prisma.SelectSubset<T, TurnCredentialFindFirstArgs<ExtArgs>>): Prisma.Prisma__TurnCredentialClient<runtime.Types.Result.GetResult<Prisma.$TurnCredentialPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first TurnCredential that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TurnCredentialFindFirstOrThrowArgs} args - Arguments to find a TurnCredential
   * @example
   * // Get one TurnCredential
   * const turnCredential = await prisma.turnCredential.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends TurnCredentialFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, TurnCredentialFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__TurnCredentialClient<runtime.Types.Result.GetResult<Prisma.$TurnCredentialPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more TurnCredentials that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TurnCredentialFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all TurnCredentials
   * const turnCredentials = await prisma.turnCredential.findMany()
   * 
   * // Get first 10 TurnCredentials
   * const turnCredentials = await prisma.turnCredential.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const turnCredentialWithIdOnly = await prisma.turnCredential.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends TurnCredentialFindManyArgs>(args?: Prisma.SelectSubset<T, TurnCredentialFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$TurnCredentialPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a TurnCredential.
   * @param {TurnCredentialCreateArgs} args - Arguments to create a TurnCredential.
   * @example
   * // Create one TurnCredential
   * const TurnCredential = await prisma.turnCredential.create({
   *   data: {
   *     // ... data to create a TurnCredential
   *   }
   * })
   * 
   */
  create<T extends TurnCredentialCreateArgs>(args: Prisma.SelectSubset<T, TurnCredentialCreateArgs<ExtArgs>>): Prisma.Prisma__TurnCredentialClient<runtime.Types.Result.GetResult<Prisma.$TurnCredentialPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many TurnCredentials.
   * @param {TurnCredentialCreateManyArgs} args - Arguments to create many TurnCredentials.
   * @example
   * // Create many TurnCredentials
   * const turnCredential = await prisma.turnCredential.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends TurnCredentialCreateManyArgs>(args?: Prisma.SelectSubset<T, TurnCredentialCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many TurnCredentials and returns the data saved in the database.
   * @param {TurnCredentialCreateManyAndReturnArgs} args - Arguments to create many TurnCredentials.
   * @example
   * // Create many TurnCredentials
   * const turnCredential = await prisma.turnCredential.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many TurnCredentials and only return the `id`
   * const turnCredentialWithIdOnly = await prisma.turnCredential.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends TurnCredentialCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, TurnCredentialCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$TurnCredentialPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a TurnCredential.
   * @param {TurnCredentialDeleteArgs} args - Arguments to delete one TurnCredential.
   * @example
   * // Delete one TurnCredential
   * const TurnCredential = await prisma.turnCredential.delete({
   *   where: {
   *     // ... filter to delete one TurnCredential
   *   }
   * })
   * 
   */
  delete<T extends TurnCredentialDeleteArgs>(args: Prisma.SelectSubset<T, TurnCredentialDeleteArgs<ExtArgs>>): Prisma.Prisma__TurnCredentialClient<runtime.Types.Result.GetResult<Prisma.$TurnCredentialPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one TurnCredential.
   * @param {TurnCredentialUpdateArgs} args - Arguments to update one TurnCredential.
   * @example
   * // Update one TurnCredential
   * const turnCredential = await prisma.turnCredential.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends TurnCredentialUpdateArgs>(args: Prisma.SelectSubset<T, TurnCredentialUpdateArgs<ExtArgs>>): Prisma.Prisma__TurnCredentialClient<runtime.Types.Result.GetResult<Prisma.$TurnCredentialPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more TurnCredentials.
   * @param {TurnCredentialDeleteManyArgs} args - Arguments to filter TurnCredentials to delete.
   * @example
   * // Delete a few TurnCredentials
   * const { count } = await prisma.turnCredential.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends TurnCredentialDeleteManyArgs>(args?: Prisma.SelectSubset<T, TurnCredentialDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more TurnCredentials.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TurnCredentialUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many TurnCredentials
   * const turnCredential = await prisma.turnCredential.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends TurnCredentialUpdateManyArgs>(args: Prisma.SelectSubset<T, TurnCredentialUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more TurnCredentials and returns the data updated in the database.
   * @param {TurnCredentialUpdateManyAndReturnArgs} args - Arguments to update many TurnCredentials.
   * @example
   * // Update many TurnCredentials
   * const turnCredential = await prisma.turnCredential.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more TurnCredentials and only return the `id`
   * const turnCredentialWithIdOnly = await prisma.turnCredential.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends TurnCredentialUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, TurnCredentialUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$TurnCredentialPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one TurnCredential.
   * @param {TurnCredentialUpsertArgs} args - Arguments to update or create a TurnCredential.
   * @example
   * // Update or create a TurnCredential
   * const turnCredential = await prisma.turnCredential.upsert({
   *   create: {
   *     // ... data to create a TurnCredential
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the TurnCredential we want to update
   *   }
   * })
   */
  upsert<T extends TurnCredentialUpsertArgs>(args: Prisma.SelectSubset<T, TurnCredentialUpsertArgs<ExtArgs>>): Prisma.Prisma__TurnCredentialClient<runtime.Types.Result.GetResult<Prisma.$TurnCredentialPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of TurnCredentials.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TurnCredentialCountArgs} args - Arguments to filter TurnCredentials to count.
   * @example
   * // Count the number of TurnCredentials
   * const count = await prisma.turnCredential.count({
   *   where: {
   *     // ... the filter for the TurnCredentials we want to count
   *   }
   * })
  **/
  count<T extends TurnCredentialCountArgs>(
    args?: Prisma.Subset<T, TurnCredentialCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], TurnCredentialCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a TurnCredential.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TurnCredentialAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends TurnCredentialAggregateArgs>(args: Prisma.Subset<T, TurnCredentialAggregateArgs>): Prisma.PrismaPromise<GetTurnCredentialAggregateType<T>>

  /**
   * Group by TurnCredential.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TurnCredentialGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends TurnCredentialGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: TurnCredentialGroupByArgs['orderBy'] }
      : { orderBy?: TurnCredentialGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, TurnCredentialGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTurnCredentialGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the TurnCredential model
 */
readonly fields: TurnCredentialFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for TurnCredential.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__TurnCredentialClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the TurnCredential model
 */
export interface TurnCredentialFieldRefs {
  readonly id: Prisma.FieldRef<"TurnCredential", 'String'>
  readonly username: Prisma.FieldRef<"TurnCredential", 'String'>
  readonly password: Prisma.FieldRef<"TurnCredential", 'String'>
  readonly urls: Prisma.FieldRef<"TurnCredential", 'String[]'>
  readonly ttl: Prisma.FieldRef<"TurnCredential", 'Int'>
  readonly createdAt: Prisma.FieldRef<"TurnCredential", 'DateTime'>
  readonly expiresAt: Prisma.FieldRef<"TurnCredential", 'DateTime'>
  readonly isActive: Prisma.FieldRef<"TurnCredential", 'Boolean'>
}
    

// Custom InputTypes
/**
 * TurnCredential findUnique
 */
export type TurnCredentialFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TurnCredential
   */
  select?: Prisma.TurnCredentialSelect<ExtArgs> | null
  /**
   * Omit specific fields from the TurnCredential
   */
  omit?: Prisma.TurnCredentialOmit<ExtArgs> | null
  /**
   * Filter, which TurnCredential to fetch.
   */
  where: Prisma.TurnCredentialWhereUniqueInput
}

/**
 * TurnCredential findUniqueOrThrow
 */
export type TurnCredentialFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TurnCredential
   */
  select?: Prisma.TurnCredentialSelect<ExtArgs> | null
  /**
   * Omit specific fields from the TurnCredential
   */
  omit?: Prisma.TurnCredentialOmit<ExtArgs> | null
  /**
   * Filter, which TurnCredential to fetch.
   */
  where: Prisma.TurnCredentialWhereUniqueInput
}

/**
 * TurnCredential findFirst
 */
export type TurnCredentialFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TurnCredential
   */
  select?: Prisma.TurnCredentialSelect<ExtArgs> | null
  /**
   * Omit specific fields from the TurnCredential
   */
  omit?: Prisma.TurnCredentialOmit<ExtArgs> | null
  /**
   * Filter, which TurnCredential to fetch.
   */
  where?: Prisma.TurnCredentialWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of TurnCredentials to fetch.
   */
  orderBy?: Prisma.TurnCredentialOrderByWithRelationInput | Prisma.TurnCredentialOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for TurnCredentials.
   */
  cursor?: Prisma.TurnCredentialWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` TurnCredentials from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` TurnCredentials.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of TurnCredentials.
   */
  distinct?: Prisma.TurnCredentialScalarFieldEnum | Prisma.TurnCredentialScalarFieldEnum[]
}

/**
 * TurnCredential findFirstOrThrow
 */
export type TurnCredentialFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TurnCredential
   */
  select?: Prisma.TurnCredentialSelect<ExtArgs> | null
  /**
   * Omit specific fields from the TurnCredential
   */
  omit?: Prisma.TurnCredentialOmit<ExtArgs> | null
  /**
   * Filter, which TurnCredential to fetch.
   */
  where?: Prisma.TurnCredentialWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of TurnCredentials to fetch.
   */
  orderBy?: Prisma.TurnCredentialOrderByWithRelationInput | Prisma.TurnCredentialOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for TurnCredentials.
   */
  cursor?: Prisma.TurnCredentialWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` TurnCredentials from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` TurnCredentials.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of TurnCredentials.
   */
  distinct?: Prisma.TurnCredentialScalarFieldEnum | Prisma.TurnCredentialScalarFieldEnum[]
}

/**
 * TurnCredential findMany
 */
export type TurnCredentialFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TurnCredential
   */
  select?: Prisma.TurnCredentialSelect<ExtArgs> | null
  /**
   * Omit specific fields from the TurnCredential
   */
  omit?: Prisma.TurnCredentialOmit<ExtArgs> | null
  /**
   * Filter, which TurnCredentials to fetch.
   */
  where?: Prisma.TurnCredentialWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of TurnCredentials to fetch.
   */
  orderBy?: Prisma.TurnCredentialOrderByWithRelationInput | Prisma.TurnCredentialOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing TurnCredentials.
   */
  cursor?: Prisma.TurnCredentialWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` TurnCredentials from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` TurnCredentials.
   */
  skip?: number
  distinct?: Prisma.TurnCredentialScalarFieldEnum | Prisma.TurnCredentialScalarFieldEnum[]
}

/**
 * TurnCredential create
 */
export type TurnCredentialCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TurnCredential
   */
  select?: Prisma.TurnCredentialSelect<ExtArgs> | null
  /**
   * Omit specific fields from the TurnCredential
   */
  omit?: Prisma.TurnCredentialOmit<ExtArgs> | null
  /**
   * The data needed to create a TurnCredential.
   */
  data: Prisma.XOR<Prisma.TurnCredentialCreateInput, Prisma.TurnCredentialUncheckedCreateInput>
}

/**
 * TurnCredential createMany
 */
export type TurnCredentialCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many TurnCredentials.
   */
  data: Prisma.TurnCredentialCreateManyInput | Prisma.TurnCredentialCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * TurnCredential createManyAndReturn
 */
export type TurnCredentialCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TurnCredential
   */
  select?: Prisma.TurnCredentialSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the TurnCredential
   */
  omit?: Prisma.TurnCredentialOmit<ExtArgs> | null
  /**
   * The data used to create many TurnCredentials.
   */
  data: Prisma.TurnCredentialCreateManyInput | Prisma.TurnCredentialCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * TurnCredential update
 */
export type TurnCredentialUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TurnCredential
   */
  select?: Prisma.TurnCredentialSelect<ExtArgs> | null
  /**
   * Omit specific fields from the TurnCredential
   */
  omit?: Prisma.TurnCredentialOmit<ExtArgs> | null
  /**
   * The data needed to update a TurnCredential.
   */
  data: Prisma.XOR<Prisma.TurnCredentialUpdateInput, Prisma.TurnCredentialUncheckedUpdateInput>
  /**
   * Choose, which TurnCredential to update.
   */
  where: Prisma.TurnCredentialWhereUniqueInput
}

/**
 * TurnCredential updateMany
 */
export type TurnCredentialUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update TurnCredentials.
   */
  data: Prisma.XOR<Prisma.TurnCredentialUpdateManyMutationInput, Prisma.TurnCredentialUncheckedUpdateManyInput>
  /**
   * Filter which TurnCredentials to update
   */
  where?: Prisma.TurnCredentialWhereInput
  /**
   * Limit how many TurnCredentials to update.
   */
  limit?: number
}

/**
 * TurnCredential updateManyAndReturn
 */
export type TurnCredentialUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TurnCredential
   */
  select?: Prisma.TurnCredentialSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the TurnCredential
   */
  omit?: Prisma.TurnCredentialOmit<ExtArgs> | null
  /**
   * The data used to update TurnCredentials.
   */
  data: Prisma.XOR<Prisma.TurnCredentialUpdateManyMutationInput, Prisma.TurnCredentialUncheckedUpdateManyInput>
  /**
   * Filter which TurnCredentials to update
   */
  where?: Prisma.TurnCredentialWhereInput
  /**
   * Limit how many TurnCredentials to update.
   */
  limit?: number
}

/**
 * TurnCredential upsert
 */
export type TurnCredentialUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TurnCredential
   */
  select?: Prisma.TurnCredentialSelect<ExtArgs> | null
  /**
   * Omit specific fields from the TurnCredential
   */
  omit?: Prisma.TurnCredentialOmit<ExtArgs> | null
  /**
   * The filter to search for the TurnCredential to update in case it exists.
   */
  where: Prisma.TurnCredentialWhereUniqueInput
  /**
   * In case the TurnCredential found by the `where` argument doesn't exist, create a new TurnCredential with this data.
   */
  create: Prisma.XOR<Prisma.TurnCredentialCreateInput, Prisma.TurnCredentialUncheckedCreateInput>
  /**
   * In case the TurnCredential was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.TurnCredentialUpdateInput, Prisma.TurnCredentialUncheckedUpdateInput>
}

/**
 * TurnCredential delete
 */
export type TurnCredentialDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TurnCredential
   */
  select?: Prisma.TurnCredentialSelect<ExtArgs> | null
  /**
   * Omit specific fields from the TurnCredential
   */
  omit?: Prisma.TurnCredentialOmit<ExtArgs> | null
  /**
   * Filter which TurnCredential to delete.
   */
  where: Prisma.TurnCredentialWhereUniqueInput
}

/**
 * TurnCredential deleteMany
 */
export type TurnCredentialDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which TurnCredentials to delete
   */
  where?: Prisma.TurnCredentialWhereInput
  /**
   * Limit how many TurnCredentials to delete.
   */
  limit?: number
}

/**
 * TurnCredential without action
 */
export type TurnCredentialDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TurnCredential
   */
  select?: Prisma.TurnCredentialSelect<ExtArgs> | null
  /**
   * Omit specific fields from the TurnCredential
   */
  omit?: Prisma.TurnCredentialOmit<ExtArgs> | null
}
