
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `SystemMessage` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model SystemMessage
 * 
 */
export type SystemMessageModel = runtime.Types.Result.DefaultSelection<Prisma.$SystemMessagePayload>

export type AggregateSystemMessage = {
  _count: SystemMessageCountAggregateOutputType | null
  _min: SystemMessageMinAggregateOutputType | null
  _max: SystemMessageMaxAggregateOutputType | null
}

export type SystemMessageMinAggregateOutputType = {
  id: string | null
  roomId: string | null
  type: $Enums.SystemMessageType | null
  content: string | null
  userName: string | null
  userId: string | null
  timestamp: Date | null
}

export type SystemMessageMaxAggregateOutputType = {
  id: string | null
  roomId: string | null
  type: $Enums.SystemMessageType | null
  content: string | null
  userName: string | null
  userId: string | null
  timestamp: Date | null
}

export type SystemMessageCountAggregateOutputType = {
  id: number
  roomId: number
  type: number
  content: number
  userName: number
  userId: number
  timestamp: number
  metadata: number
  _all: number
}


export type SystemMessageMinAggregateInputType = {
  id?: true
  roomId?: true
  type?: true
  content?: true
  userName?: true
  userId?: true
  timestamp?: true
}

export type SystemMessageMaxAggregateInputType = {
  id?: true
  roomId?: true
  type?: true
  content?: true
  userName?: true
  userId?: true
  timestamp?: true
}

export type SystemMessageCountAggregateInputType = {
  id?: true
  roomId?: true
  type?: true
  content?: true
  userName?: true
  userId?: true
  timestamp?: true
  metadata?: true
  _all?: true
}

export type SystemMessageAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which SystemMessage to aggregate.
   */
  where?: Prisma.SystemMessageWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of SystemMessages to fetch.
   */
  orderBy?: Prisma.SystemMessageOrderByWithRelationInput | Prisma.SystemMessageOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.SystemMessageWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` SystemMessages from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` SystemMessages.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned SystemMessages
  **/
  _count?: true | SystemMessageCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: SystemMessageMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: SystemMessageMaxAggregateInputType
}

export type GetSystemMessageAggregateType<T extends SystemMessageAggregateArgs> = {
      [P in keyof T & keyof AggregateSystemMessage]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateSystemMessage[P]>
    : Prisma.GetScalarType<T[P], AggregateSystemMessage[P]>
}




export type SystemMessageGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.SystemMessageWhereInput
  orderBy?: Prisma.SystemMessageOrderByWithAggregationInput | Prisma.SystemMessageOrderByWithAggregationInput[]
  by: Prisma.SystemMessageScalarFieldEnum[] | Prisma.SystemMessageScalarFieldEnum
  having?: Prisma.SystemMessageScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: SystemMessageCountAggregateInputType | true
  _min?: SystemMessageMinAggregateInputType
  _max?: SystemMessageMaxAggregateInputType
}

export type SystemMessageGroupByOutputType = {
  id: string
  roomId: string
  type: $Enums.SystemMessageType
  content: string
  userName: string | null
  userId: string | null
  timestamp: Date
  metadata: runtime.JsonValue | null
  _count: SystemMessageCountAggregateOutputType | null
  _min: SystemMessageMinAggregateOutputType | null
  _max: SystemMessageMaxAggregateOutputType | null
}

type GetSystemMessageGroupByPayload<T extends SystemMessageGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<SystemMessageGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof SystemMessageGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], SystemMessageGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], SystemMessageGroupByOutputType[P]>
      }
    >
  > 



export type SystemMessageWhereInput = {
  AND?: Prisma.SystemMessageWhereInput | Prisma.SystemMessageWhereInput[]
  OR?: Prisma.SystemMessageWhereInput[]
  NOT?: Prisma.SystemMessageWhereInput | Prisma.SystemMessageWhereInput[]
  id?: Prisma.StringFilter<"SystemMessage"> | string
  roomId?: Prisma.StringFilter<"SystemMessage"> | string
  type?: Prisma.EnumSystemMessageTypeFilter<"SystemMessage"> | $Enums.SystemMessageType
  content?: Prisma.StringFilter<"SystemMessage"> | string
  userName?: Prisma.StringNullableFilter<"SystemMessage"> | string | null
  userId?: Prisma.StringNullableFilter<"SystemMessage"> | string | null
  timestamp?: Prisma.DateTimeFilter<"SystemMessage"> | Date | string
  metadata?: Prisma.JsonNullableFilter<"SystemMessage">
  room?: Prisma.XOR<Prisma.RoomScalarRelationFilter, Prisma.RoomWhereInput>
}

export type SystemMessageOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  roomId?: Prisma.SortOrder
  type?: Prisma.SortOrder
  content?: Prisma.SortOrder
  userName?: Prisma.SortOrderInput | Prisma.SortOrder
  userId?: Prisma.SortOrderInput | Prisma.SortOrder
  timestamp?: Prisma.SortOrder
  metadata?: Prisma.SortOrderInput | Prisma.SortOrder
  room?: Prisma.RoomOrderByWithRelationInput
}

export type SystemMessageWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  AND?: Prisma.SystemMessageWhereInput | Prisma.SystemMessageWhereInput[]
  OR?: Prisma.SystemMessageWhereInput[]
  NOT?: Prisma.SystemMessageWhereInput | Prisma.SystemMessageWhereInput[]
  roomId?: Prisma.StringFilter<"SystemMessage"> | string
  type?: Prisma.EnumSystemMessageTypeFilter<"SystemMessage"> | $Enums.SystemMessageType
  content?: Prisma.StringFilter<"SystemMessage"> | string
  userName?: Prisma.StringNullableFilter<"SystemMessage"> | string | null
  userId?: Prisma.StringNullableFilter<"SystemMessage"> | string | null
  timestamp?: Prisma.DateTimeFilter<"SystemMessage"> | Date | string
  metadata?: Prisma.JsonNullableFilter<"SystemMessage">
  room?: Prisma.XOR<Prisma.RoomScalarRelationFilter, Prisma.RoomWhereInput>
}, "id">

export type SystemMessageOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  roomId?: Prisma.SortOrder
  type?: Prisma.SortOrder
  content?: Prisma.SortOrder
  userName?: Prisma.SortOrderInput | Prisma.SortOrder
  userId?: Prisma.SortOrderInput | Prisma.SortOrder
  timestamp?: Prisma.SortOrder
  metadata?: Prisma.SortOrderInput | Prisma.SortOrder
  _count?: Prisma.SystemMessageCountOrderByAggregateInput
  _max?: Prisma.SystemMessageMaxOrderByAggregateInput
  _min?: Prisma.SystemMessageMinOrderByAggregateInput
}

export type SystemMessageScalarWhereWithAggregatesInput = {
  AND?: Prisma.SystemMessageScalarWhereWithAggregatesInput | Prisma.SystemMessageScalarWhereWithAggregatesInput[]
  OR?: Prisma.SystemMessageScalarWhereWithAggregatesInput[]
  NOT?: Prisma.SystemMessageScalarWhereWithAggregatesInput | Prisma.SystemMessageScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"SystemMessage"> | string
  roomId?: Prisma.StringWithAggregatesFilter<"SystemMessage"> | string
  type?: Prisma.EnumSystemMessageTypeWithAggregatesFilter<"SystemMessage"> | $Enums.SystemMessageType
  content?: Prisma.StringWithAggregatesFilter<"SystemMessage"> | string
  userName?: Prisma.StringNullableWithAggregatesFilter<"SystemMessage"> | string | null
  userId?: Prisma.StringNullableWithAggregatesFilter<"SystemMessage"> | string | null
  timestamp?: Prisma.DateTimeWithAggregatesFilter<"SystemMessage"> | Date | string
  metadata?: Prisma.JsonNullableWithAggregatesFilter<"SystemMessage">
}

export type SystemMessageCreateInput = {
  id?: string
  type: $Enums.SystemMessageType
  content: string
  userName?: string | null
  userId?: string | null
  timestamp?: Date | string
  metadata?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  room: Prisma.RoomCreateNestedOneWithoutSystemMessagesInput
}

export type SystemMessageUncheckedCreateInput = {
  id?: string
  roomId: string
  type: $Enums.SystemMessageType
  content: string
  userName?: string | null
  userId?: string | null
  timestamp?: Date | string
  metadata?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
}

export type SystemMessageUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  type?: Prisma.EnumSystemMessageTypeFieldUpdateOperationsInput | $Enums.SystemMessageType
  content?: Prisma.StringFieldUpdateOperationsInput | string
  userName?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  userId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  timestamp?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  metadata?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  room?: Prisma.RoomUpdateOneRequiredWithoutSystemMessagesNestedInput
}

export type SystemMessageUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  roomId?: Prisma.StringFieldUpdateOperationsInput | string
  type?: Prisma.EnumSystemMessageTypeFieldUpdateOperationsInput | $Enums.SystemMessageType
  content?: Prisma.StringFieldUpdateOperationsInput | string
  userName?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  userId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  timestamp?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  metadata?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
}

export type SystemMessageCreateManyInput = {
  id?: string
  roomId: string
  type: $Enums.SystemMessageType
  content: string
  userName?: string | null
  userId?: string | null
  timestamp?: Date | string
  metadata?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
}

export type SystemMessageUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  type?: Prisma.EnumSystemMessageTypeFieldUpdateOperationsInput | $Enums.SystemMessageType
  content?: Prisma.StringFieldUpdateOperationsInput | string
  userName?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  userId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  timestamp?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  metadata?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
}

export type SystemMessageUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  roomId?: Prisma.StringFieldUpdateOperationsInput | string
  type?: Prisma.EnumSystemMessageTypeFieldUpdateOperationsInput | $Enums.SystemMessageType
  content?: Prisma.StringFieldUpdateOperationsInput | string
  userName?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  userId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  timestamp?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  metadata?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
}

export type SystemMessageListRelationFilter = {
  every?: Prisma.SystemMessageWhereInput
  some?: Prisma.SystemMessageWhereInput
  none?: Prisma.SystemMessageWhereInput
}

export type SystemMessageOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type SystemMessageCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  roomId?: Prisma.SortOrder
  type?: Prisma.SortOrder
  content?: Prisma.SortOrder
  userName?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  timestamp?: Prisma.SortOrder
  metadata?: Prisma.SortOrder
}

export type SystemMessageMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  roomId?: Prisma.SortOrder
  type?: Prisma.SortOrder
  content?: Prisma.SortOrder
  userName?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  timestamp?: Prisma.SortOrder
}

export type SystemMessageMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  roomId?: Prisma.SortOrder
  type?: Prisma.SortOrder
  content?: Prisma.SortOrder
  userName?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  timestamp?: Prisma.SortOrder
}

export type SystemMessageCreateNestedManyWithoutRoomInput = {
  create?: Prisma.XOR<Prisma.SystemMessageCreateWithoutRoomInput, Prisma.SystemMessageUncheckedCreateWithoutRoomInput> | Prisma.SystemMessageCreateWithoutRoomInput[] | Prisma.SystemMessageUncheckedCreateWithoutRoomInput[]
  connectOrCreate?: Prisma.SystemMessageCreateOrConnectWithoutRoomInput | Prisma.SystemMessageCreateOrConnectWithoutRoomInput[]
  createMany?: Prisma.SystemMessageCreateManyRoomInputEnvelope
  connect?: Prisma.SystemMessageWhereUniqueInput | Prisma.SystemMessageWhereUniqueInput[]
}

export type SystemMessageUncheckedCreateNestedManyWithoutRoomInput = {
  create?: Prisma.XOR<Prisma.SystemMessageCreateWithoutRoomInput, Prisma.SystemMessageUncheckedCreateWithoutRoomInput> | Prisma.SystemMessageCreateWithoutRoomInput[] | Prisma.SystemMessageUncheckedCreateWithoutRoomInput[]
  connectOrCreate?: Prisma.SystemMessageCreateOrConnectWithoutRoomInput | Prisma.SystemMessageCreateOrConnectWithoutRoomInput[]
  createMany?: Prisma.SystemMessageCreateManyRoomInputEnvelope
  connect?: Prisma.SystemMessageWhereUniqueInput | Prisma.SystemMessageWhereUniqueInput[]
}

export type SystemMessageUpdateManyWithoutRoomNestedInput = {
  create?: Prisma.XOR<Prisma.SystemMessageCreateWithoutRoomInput, Prisma.SystemMessageUncheckedCreateWithoutRoomInput> | Prisma.SystemMessageCreateWithoutRoomInput[] | Prisma.SystemMessageUncheckedCreateWithoutRoomInput[]
  connectOrCreate?: Prisma.SystemMessageCreateOrConnectWithoutRoomInput | Prisma.SystemMessageCreateOrConnectWithoutRoomInput[]
  upsert?: Prisma.SystemMessageUpsertWithWhereUniqueWithoutRoomInput | Prisma.SystemMessageUpsertWithWhereUniqueWithoutRoomInput[]
  createMany?: Prisma.SystemMessageCreateManyRoomInputEnvelope
  set?: Prisma.SystemMessageWhereUniqueInput | Prisma.SystemMessageWhereUniqueInput[]
  disconnect?: Prisma.SystemMessageWhereUniqueInput | Prisma.SystemMessageWhereUniqueInput[]
  delete?: Prisma.SystemMessageWhereUniqueInput | Prisma.SystemMessageWhereUniqueInput[]
  connect?: Prisma.SystemMessageWhereUniqueInput | Prisma.SystemMessageWhereUniqueInput[]
  update?: Prisma.SystemMessageUpdateWithWhereUniqueWithoutRoomInput | Prisma.SystemMessageUpdateWithWhereUniqueWithoutRoomInput[]
  updateMany?: Prisma.SystemMessageUpdateManyWithWhereWithoutRoomInput | Prisma.SystemMessageUpdateManyWithWhereWithoutRoomInput[]
  deleteMany?: Prisma.SystemMessageScalarWhereInput | Prisma.SystemMessageScalarWhereInput[]
}

export type SystemMessageUncheckedUpdateManyWithoutRoomNestedInput = {
  create?: Prisma.XOR<Prisma.SystemMessageCreateWithoutRoomInput, Prisma.SystemMessageUncheckedCreateWithoutRoomInput> | Prisma.SystemMessageCreateWithoutRoomInput[] | Prisma.SystemMessageUncheckedCreateWithoutRoomInput[]
  connectOrCreate?: Prisma.SystemMessageCreateOrConnectWithoutRoomInput | Prisma.SystemMessageCreateOrConnectWithoutRoomInput[]
  upsert?: Prisma.SystemMessageUpsertWithWhereUniqueWithoutRoomInput | Prisma.SystemMessageUpsertWithWhereUniqueWithoutRoomInput[]
  createMany?: Prisma.SystemMessageCreateManyRoomInputEnvelope
  set?: Prisma.SystemMessageWhereUniqueInput | Prisma.SystemMessageWhereUniqueInput[]
  disconnect?: Prisma.SystemMessageWhereUniqueInput | Prisma.SystemMessageWhereUniqueInput[]
  delete?: Prisma.SystemMessageWhereUniqueInput | Prisma.SystemMessageWhereUniqueInput[]
  connect?: Prisma.SystemMessageWhereUniqueInput | Prisma.SystemMessageWhereUniqueInput[]
  update?: Prisma.SystemMessageUpdateWithWhereUniqueWithoutRoomInput | Prisma.SystemMessageUpdateWithWhereUniqueWithoutRoomInput[]
  updateMany?: Prisma.SystemMessageUpdateManyWithWhereWithoutRoomInput | Prisma.SystemMessageUpdateManyWithWhereWithoutRoomInput[]
  deleteMany?: Prisma.SystemMessageScalarWhereInput | Prisma.SystemMessageScalarWhereInput[]
}

export type EnumSystemMessageTypeFieldUpdateOperationsInput = {
  set?: $Enums.SystemMessageType
}

export type SystemMessageCreateWithoutRoomInput = {
  id?: string
  type: $Enums.SystemMessageType
  content: string
  userName?: string | null
  userId?: string | null
  timestamp?: Date | string
  metadata?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
}

export type SystemMessageUncheckedCreateWithoutRoomInput = {
  id?: string
  type: $Enums.SystemMessageType
  content: string
  userName?: string | null
  userId?: string | null
  timestamp?: Date | string
  metadata?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
}

export type SystemMessageCreateOrConnectWithoutRoomInput = {
  where: Prisma.SystemMessageWhereUniqueInput
  create: Prisma.XOR<Prisma.SystemMessageCreateWithoutRoomInput, Prisma.SystemMessageUncheckedCreateWithoutRoomInput>
}

export type SystemMessageCreateManyRoomInputEnvelope = {
  data: Prisma.SystemMessageCreateManyRoomInput | Prisma.SystemMessageCreateManyRoomInput[]
  skipDuplicates?: boolean
}

export type SystemMessageUpsertWithWhereUniqueWithoutRoomInput = {
  where: Prisma.SystemMessageWhereUniqueInput
  update: Prisma.XOR<Prisma.SystemMessageUpdateWithoutRoomInput, Prisma.SystemMessageUncheckedUpdateWithoutRoomInput>
  create: Prisma.XOR<Prisma.SystemMessageCreateWithoutRoomInput, Prisma.SystemMessageUncheckedCreateWithoutRoomInput>
}

export type SystemMessageUpdateWithWhereUniqueWithoutRoomInput = {
  where: Prisma.SystemMessageWhereUniqueInput
  data: Prisma.XOR<Prisma.SystemMessageUpdateWithoutRoomInput, Prisma.SystemMessageUncheckedUpdateWithoutRoomInput>
}

export type SystemMessageUpdateManyWithWhereWithoutRoomInput = {
  where: Prisma.SystemMessageScalarWhereInput
  data: Prisma.XOR<Prisma.SystemMessageUpdateManyMutationInput, Prisma.SystemMessageUncheckedUpdateManyWithoutRoomInput>
}

export type SystemMessageScalarWhereInput = {
  AND?: Prisma.SystemMessageScalarWhereInput | Prisma.SystemMessageScalarWhereInput[]
  OR?: Prisma.SystemMessageScalarWhereInput[]
  NOT?: Prisma.SystemMessageScalarWhereInput | Prisma.SystemMessageScalarWhereInput[]
  id?: Prisma.StringFilter<"SystemMessage"> | string
  roomId?: Prisma.StringFilter<"SystemMessage"> | string
  type?: Prisma.EnumSystemMessageTypeFilter<"SystemMessage"> | $Enums.SystemMessageType
  content?: Prisma.StringFilter<"SystemMessage"> | string
  userName?: Prisma.StringNullableFilter<"SystemMessage"> | string | null
  userId?: Prisma.StringNullableFilter<"SystemMessage"> | string | null
  timestamp?: Prisma.DateTimeFilter<"SystemMessage"> | Date | string
  metadata?: Prisma.JsonNullableFilter<"SystemMessage">
}

export type SystemMessageCreateManyRoomInput = {
  id?: string
  type: $Enums.SystemMessageType
  content: string
  userName?: string | null
  userId?: string | null
  timestamp?: Date | string
  metadata?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
}

export type SystemMessageUpdateWithoutRoomInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  type?: Prisma.EnumSystemMessageTypeFieldUpdateOperationsInput | $Enums.SystemMessageType
  content?: Prisma.StringFieldUpdateOperationsInput | string
  userName?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  userId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  timestamp?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  metadata?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
}

export type SystemMessageUncheckedUpdateWithoutRoomInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  type?: Prisma.EnumSystemMessageTypeFieldUpdateOperationsInput | $Enums.SystemMessageType
  content?: Prisma.StringFieldUpdateOperationsInput | string
  userName?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  userId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  timestamp?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  metadata?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
}

export type SystemMessageUncheckedUpdateManyWithoutRoomInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  type?: Prisma.EnumSystemMessageTypeFieldUpdateOperationsInput | $Enums.SystemMessageType
  content?: Prisma.StringFieldUpdateOperationsInput | string
  userName?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  userId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  timestamp?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  metadata?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
}



export type SystemMessageSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  roomId?: boolean
  type?: boolean
  content?: boolean
  userName?: boolean
  userId?: boolean
  timestamp?: boolean
  metadata?: boolean
  room?: boolean | Prisma.RoomDefaultArgs<ExtArgs>
}, ExtArgs["result"]["systemMessage"]>

export type SystemMessageSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  roomId?: boolean
  type?: boolean
  content?: boolean
  userName?: boolean
  userId?: boolean
  timestamp?: boolean
  metadata?: boolean
  room?: boolean | Prisma.RoomDefaultArgs<ExtArgs>
}, ExtArgs["result"]["systemMessage"]>

export type SystemMessageSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  roomId?: boolean
  type?: boolean
  content?: boolean
  userName?: boolean
  userId?: boolean
  timestamp?: boolean
  metadata?: boolean
  room?: boolean | Prisma.RoomDefaultArgs<ExtArgs>
}, ExtArgs["result"]["systemMessage"]>

export type SystemMessageSelectScalar = {
  id?: boolean
  roomId?: boolean
  type?: boolean
  content?: boolean
  userName?: boolean
  userId?: boolean
  timestamp?: boolean
  metadata?: boolean
}

export type SystemMessageOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "roomId" | "type" | "content" | "userName" | "userId" | "timestamp" | "metadata", ExtArgs["result"]["systemMessage"]>
export type SystemMessageInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  room?: boolean | Prisma.RoomDefaultArgs<ExtArgs>
}
export type SystemMessageIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  room?: boolean | Prisma.RoomDefaultArgs<ExtArgs>
}
export type SystemMessageIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  room?: boolean | Prisma.RoomDefaultArgs<ExtArgs>
}

export type $SystemMessagePayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "SystemMessage"
  objects: {
    room: Prisma.$RoomPayload<ExtArgs>
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    roomId: string
    type: $Enums.SystemMessageType
    content: string
    userName: string | null
    userId: string | null
    timestamp: Date
    metadata: runtime.JsonValue | null
  }, ExtArgs["result"]["systemMessage"]>
  composites: {}
}

export type SystemMessageGetPayload<S extends boolean | null | undefined | SystemMessageDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$SystemMessagePayload, S>

export type SystemMessageCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<SystemMessageFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: SystemMessageCountAggregateInputType | true
  }

export interface SystemMessageDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['SystemMessage'], meta: { name: 'SystemMessage' } }
  /**
   * Find zero or one SystemMessage that matches the filter.
   * @param {SystemMessageFindUniqueArgs} args - Arguments to find a SystemMessage
   * @example
   * // Get one SystemMessage
   * const systemMessage = await prisma.systemMessage.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends SystemMessageFindUniqueArgs>(args: Prisma.SelectSubset<T, SystemMessageFindUniqueArgs<ExtArgs>>): Prisma.Prisma__SystemMessageClient<runtime.Types.Result.GetResult<Prisma.$SystemMessagePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one SystemMessage that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {SystemMessageFindUniqueOrThrowArgs} args - Arguments to find a SystemMessage
   * @example
   * // Get one SystemMessage
   * const systemMessage = await prisma.systemMessage.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends SystemMessageFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, SystemMessageFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__SystemMessageClient<runtime.Types.Result.GetResult<Prisma.$SystemMessagePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first SystemMessage that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {SystemMessageFindFirstArgs} args - Arguments to find a SystemMessage
   * @example
   * // Get one SystemMessage
   * const systemMessage = await prisma.systemMessage.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends SystemMessageFindFirstArgs>(args?: Prisma.SelectSubset<T, SystemMessageFindFirstArgs<ExtArgs>>): Prisma.Prisma__SystemMessageClient<runtime.Types.Result.GetResult<Prisma.$SystemMessagePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first SystemMessage that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {SystemMessageFindFirstOrThrowArgs} args - Arguments to find a SystemMessage
   * @example
   * // Get one SystemMessage
   * const systemMessage = await prisma.systemMessage.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends SystemMessageFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, SystemMessageFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__SystemMessageClient<runtime.Types.Result.GetResult<Prisma.$SystemMessagePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more SystemMessages that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {SystemMessageFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all SystemMessages
   * const systemMessages = await prisma.systemMessage.findMany()
   * 
   * // Get first 10 SystemMessages
   * const systemMessages = await prisma.systemMessage.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const systemMessageWithIdOnly = await prisma.systemMessage.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends SystemMessageFindManyArgs>(args?: Prisma.SelectSubset<T, SystemMessageFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$SystemMessagePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a SystemMessage.
   * @param {SystemMessageCreateArgs} args - Arguments to create a SystemMessage.
   * @example
   * // Create one SystemMessage
   * const SystemMessage = await prisma.systemMessage.create({
   *   data: {
   *     // ... data to create a SystemMessage
   *   }
   * })
   * 
   */
  create<T extends SystemMessageCreateArgs>(args: Prisma.SelectSubset<T, SystemMessageCreateArgs<ExtArgs>>): Prisma.Prisma__SystemMessageClient<runtime.Types.Result.GetResult<Prisma.$SystemMessagePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many SystemMessages.
   * @param {SystemMessageCreateManyArgs} args - Arguments to create many SystemMessages.
   * @example
   * // Create many SystemMessages
   * const systemMessage = await prisma.systemMessage.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends SystemMessageCreateManyArgs>(args?: Prisma.SelectSubset<T, SystemMessageCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many SystemMessages and returns the data saved in the database.
   * @param {SystemMessageCreateManyAndReturnArgs} args - Arguments to create many SystemMessages.
   * @example
   * // Create many SystemMessages
   * const systemMessage = await prisma.systemMessage.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many SystemMessages and only return the `id`
   * const systemMessageWithIdOnly = await prisma.systemMessage.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends SystemMessageCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, SystemMessageCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$SystemMessagePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a SystemMessage.
   * @param {SystemMessageDeleteArgs} args - Arguments to delete one SystemMessage.
   * @example
   * // Delete one SystemMessage
   * const SystemMessage = await prisma.systemMessage.delete({
   *   where: {
   *     // ... filter to delete one SystemMessage
   *   }
   * })
   * 
   */
  delete<T extends SystemMessageDeleteArgs>(args: Prisma.SelectSubset<T, SystemMessageDeleteArgs<ExtArgs>>): Prisma.Prisma__SystemMessageClient<runtime.Types.Result.GetResult<Prisma.$SystemMessagePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one SystemMessage.
   * @param {SystemMessageUpdateArgs} args - Arguments to update one SystemMessage.
   * @example
   * // Update one SystemMessage
   * const systemMessage = await prisma.systemMessage.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends SystemMessageUpdateArgs>(args: Prisma.SelectSubset<T, SystemMessageUpdateArgs<ExtArgs>>): Prisma.Prisma__SystemMessageClient<runtime.Types.Result.GetResult<Prisma.$SystemMessagePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more SystemMessages.
   * @param {SystemMessageDeleteManyArgs} args - Arguments to filter SystemMessages to delete.
   * @example
   * // Delete a few SystemMessages
   * const { count } = await prisma.systemMessage.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends SystemMessageDeleteManyArgs>(args?: Prisma.SelectSubset<T, SystemMessageDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more SystemMessages.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {SystemMessageUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many SystemMessages
   * const systemMessage = await prisma.systemMessage.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends SystemMessageUpdateManyArgs>(args: Prisma.SelectSubset<T, SystemMessageUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more SystemMessages and returns the data updated in the database.
   * @param {SystemMessageUpdateManyAndReturnArgs} args - Arguments to update many SystemMessages.
   * @example
   * // Update many SystemMessages
   * const systemMessage = await prisma.systemMessage.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more SystemMessages and only return the `id`
   * const systemMessageWithIdOnly = await prisma.systemMessage.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends SystemMessageUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, SystemMessageUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$SystemMessagePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one SystemMessage.
   * @param {SystemMessageUpsertArgs} args - Arguments to update or create a SystemMessage.
   * @example
   * // Update or create a SystemMessage
   * const systemMessage = await prisma.systemMessage.upsert({
   *   create: {
   *     // ... data to create a SystemMessage
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the SystemMessage we want to update
   *   }
   * })
   */
  upsert<T extends SystemMessageUpsertArgs>(args: Prisma.SelectSubset<T, SystemMessageUpsertArgs<ExtArgs>>): Prisma.Prisma__SystemMessageClient<runtime.Types.Result.GetResult<Prisma.$SystemMessagePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of SystemMessages.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {SystemMessageCountArgs} args - Arguments to filter SystemMessages to count.
   * @example
   * // Count the number of SystemMessages
   * const count = await prisma.systemMessage.count({
   *   where: {
   *     // ... the filter for the SystemMessages we want to count
   *   }
   * })
  **/
  count<T extends SystemMessageCountArgs>(
    args?: Prisma.Subset<T, SystemMessageCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], SystemMessageCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a SystemMessage.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {SystemMessageAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends SystemMessageAggregateArgs>(args: Prisma.Subset<T, SystemMessageAggregateArgs>): Prisma.PrismaPromise<GetSystemMessageAggregateType<T>>

  /**
   * Group by SystemMessage.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {SystemMessageGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends SystemMessageGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: SystemMessageGroupByArgs['orderBy'] }
      : { orderBy?: SystemMessageGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, SystemMessageGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSystemMessageGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the SystemMessage model
 */
readonly fields: SystemMessageFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for SystemMessage.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__SystemMessageClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  room<T extends Prisma.RoomDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.RoomDefaultArgs<ExtArgs>>): Prisma.Prisma__RoomClient<runtime.Types.Result.GetResult<Prisma.$RoomPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the SystemMessage model
 */
export interface SystemMessageFieldRefs {
  readonly id: Prisma.FieldRef<"SystemMessage", 'String'>
  readonly roomId: Prisma.FieldRef<"SystemMessage", 'String'>
  readonly type: Prisma.FieldRef<"SystemMessage", 'SystemMessageType'>
  readonly content: Prisma.FieldRef<"SystemMessage", 'String'>
  readonly userName: Prisma.FieldRef<"SystemMessage", 'String'>
  readonly userId: Prisma.FieldRef<"SystemMessage", 'String'>
  readonly timestamp: Prisma.FieldRef<"SystemMessage", 'DateTime'>
  readonly metadata: Prisma.FieldRef<"SystemMessage", 'Json'>
}
    

// Custom InputTypes
/**
 * SystemMessage findUnique
 */
export type SystemMessageFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the SystemMessage
   */
  select?: Prisma.SystemMessageSelect<ExtArgs> | null
  /**
   * Omit specific fields from the SystemMessage
   */
  omit?: Prisma.SystemMessageOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.SystemMessageInclude<ExtArgs> | null
  /**
   * Filter, which SystemMessage to fetch.
   */
  where: Prisma.SystemMessageWhereUniqueInput
}

/**
 * SystemMessage findUniqueOrThrow
 */
export type SystemMessageFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the SystemMessage
   */
  select?: Prisma.SystemMessageSelect<ExtArgs> | null
  /**
   * Omit specific fields from the SystemMessage
   */
  omit?: Prisma.SystemMessageOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.SystemMessageInclude<ExtArgs> | null
  /**
   * Filter, which SystemMessage to fetch.
   */
  where: Prisma.SystemMessageWhereUniqueInput
}

/**
 * SystemMessage findFirst
 */
export type SystemMessageFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the SystemMessage
   */
  select?: Prisma.SystemMessageSelect<ExtArgs> | null
  /**
   * Omit specific fields from the SystemMessage
   */
  omit?: Prisma.SystemMessageOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.SystemMessageInclude<ExtArgs> | null
  /**
   * Filter, which SystemMessage to fetch.
   */
  where?: Prisma.SystemMessageWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of SystemMessages to fetch.
   */
  orderBy?: Prisma.SystemMessageOrderByWithRelationInput | Prisma.SystemMessageOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for SystemMessages.
   */
  cursor?: Prisma.SystemMessageWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` SystemMessages from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` SystemMessages.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of SystemMessages.
   */
  distinct?: Prisma.SystemMessageScalarFieldEnum | Prisma.SystemMessageScalarFieldEnum[]
}

/**
 * SystemMessage findFirstOrThrow
 */
export type SystemMessageFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the SystemMessage
   */
  select?: Prisma.SystemMessageSelect<ExtArgs> | null
  /**
   * Omit specific fields from the SystemMessage
   */
  omit?: Prisma.SystemMessageOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.SystemMessageInclude<ExtArgs> | null
  /**
   * Filter, which SystemMessage to fetch.
   */
  where?: Prisma.SystemMessageWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of SystemMessages to fetch.
   */
  orderBy?: Prisma.SystemMessageOrderByWithRelationInput | Prisma.SystemMessageOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for SystemMessages.
   */
  cursor?: Prisma.SystemMessageWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` SystemMessages from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` SystemMessages.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of SystemMessages.
   */
  distinct?: Prisma.SystemMessageScalarFieldEnum | Prisma.SystemMessageScalarFieldEnum[]
}

/**
 * SystemMessage findMany
 */
export type SystemMessageFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the SystemMessage
   */
  select?: Prisma.SystemMessageSelect<ExtArgs> | null
  /**
   * Omit specific fields from the SystemMessage
   */
  omit?: Prisma.SystemMessageOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.SystemMessageInclude<ExtArgs> | null
  /**
   * Filter, which SystemMessages to fetch.
   */
  where?: Prisma.SystemMessageWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of SystemMessages to fetch.
   */
  orderBy?: Prisma.SystemMessageOrderByWithRelationInput | Prisma.SystemMessageOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing SystemMessages.
   */
  cursor?: Prisma.SystemMessageWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` SystemMessages from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` SystemMessages.
   */
  skip?: number
  distinct?: Prisma.SystemMessageScalarFieldEnum | Prisma.SystemMessageScalarFieldEnum[]
}

/**
 * SystemMessage create
 */
export type SystemMessageCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the SystemMessage
   */
  select?: Prisma.SystemMessageSelect<ExtArgs> | null
  /**
   * Omit specific fields from the SystemMessage
   */
  omit?: Prisma.SystemMessageOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.SystemMessageInclude<ExtArgs> | null
  /**
   * The data needed to create a SystemMessage.
   */
  data: Prisma.XOR<Prisma.SystemMessageCreateInput, Prisma.SystemMessageUncheckedCreateInput>
}

/**
 * SystemMessage createMany
 */
export type SystemMessageCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many SystemMessages.
   */
  data: Prisma.SystemMessageCreateManyInput | Prisma.SystemMessageCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * SystemMessage createManyAndReturn
 */
export type SystemMessageCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the SystemMessage
   */
  select?: Prisma.SystemMessageSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the SystemMessage
   */
  omit?: Prisma.SystemMessageOmit<ExtArgs> | null
  /**
   * The data used to create many SystemMessages.
   */
  data: Prisma.SystemMessageCreateManyInput | Prisma.SystemMessageCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.SystemMessageIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * SystemMessage update
 */
export type SystemMessageUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the SystemMessage
   */
  select?: Prisma.SystemMessageSelect<ExtArgs> | null
  /**
   * Omit specific fields from the SystemMessage
   */
  omit?: Prisma.SystemMessageOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.SystemMessageInclude<ExtArgs> | null
  /**
   * The data needed to update a SystemMessage.
   */
  data: Prisma.XOR<Prisma.SystemMessageUpdateInput, Prisma.SystemMessageUncheckedUpdateInput>
  /**
   * Choose, which SystemMessage to update.
   */
  where: Prisma.SystemMessageWhereUniqueInput
}

/**
 * SystemMessage updateMany
 */
export type SystemMessageUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update SystemMessages.
   */
  data: Prisma.XOR<Prisma.SystemMessageUpdateManyMutationInput, Prisma.SystemMessageUncheckedUpdateManyInput>
  /**
   * Filter which SystemMessages to update
   */
  where?: Prisma.SystemMessageWhereInput
  /**
   * Limit how many SystemMessages to update.
   */
  limit?: number
}

/**
 * SystemMessage updateManyAndReturn
 */
export type SystemMessageUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the SystemMessage
   */
  select?: Prisma.SystemMessageSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the SystemMessage
   */
  omit?: Prisma.SystemMessageOmit<ExtArgs> | null
  /**
   * The data used to update SystemMessages.
   */
  data: Prisma.XOR<Prisma.SystemMessageUpdateManyMutationInput, Prisma.SystemMessageUncheckedUpdateManyInput>
  /**
   * Filter which SystemMessages to update
   */
  where?: Prisma.SystemMessageWhereInput
  /**
   * Limit how many SystemMessages to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.SystemMessageIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * SystemMessage upsert
 */
export type SystemMessageUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the SystemMessage
   */
  select?: Prisma.SystemMessageSelect<ExtArgs> | null
  /**
   * Omit specific fields from the SystemMessage
   */
  omit?: Prisma.SystemMessageOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.SystemMessageInclude<ExtArgs> | null
  /**
   * The filter to search for the SystemMessage to update in case it exists.
   */
  where: Prisma.SystemMessageWhereUniqueInput
  /**
   * In case the SystemMessage found by the `where` argument doesn't exist, create a new SystemMessage with this data.
   */
  create: Prisma.XOR<Prisma.SystemMessageCreateInput, Prisma.SystemMessageUncheckedCreateInput>
  /**
   * In case the SystemMessage was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.SystemMessageUpdateInput, Prisma.SystemMessageUncheckedUpdateInput>
}

/**
 * SystemMessage delete
 */
export type SystemMessageDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the SystemMessage
   */
  select?: Prisma.SystemMessageSelect<ExtArgs> | null
  /**
   * Omit specific fields from the SystemMessage
   */
  omit?: Prisma.SystemMessageOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.SystemMessageInclude<ExtArgs> | null
  /**
   * Filter which SystemMessage to delete.
   */
  where: Prisma.SystemMessageWhereUniqueInput
}

/**
 * SystemMessage deleteMany
 */
export type SystemMessageDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which SystemMessages to delete
   */
  where?: Prisma.SystemMessageWhereInput
  /**
   * Limit how many SystemMessages to delete.
   */
  limit?: number
}

/**
 * SystemMessage without action
 */
export type SystemMessageDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the SystemMessage
   */
  select?: Prisma.SystemMessageSelect<ExtArgs> | null
  /**
   * Omit specific fields from the SystemMessage
   */
  omit?: Prisma.SystemMessageOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.SystemMessageInclude<ExtArgs> | null
}
