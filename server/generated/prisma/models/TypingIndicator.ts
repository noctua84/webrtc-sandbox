
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `TypingIndicator` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model TypingIndicator
 * 
 */
export type TypingIndicatorModel = runtime.Types.Result.DefaultSelection<Prisma.$TypingIndicatorPayload>

export type AggregateTypingIndicator = {
  _count: TypingIndicatorCountAggregateOutputType | null
  _min: TypingIndicatorMinAggregateOutputType | null
  _max: TypingIndicatorMaxAggregateOutputType | null
}

export type TypingIndicatorMinAggregateOutputType = {
  id: string | null
  roomId: string | null
  participantId: string | null
  isTyping: boolean | null
  updatedAt: Date | null
}

export type TypingIndicatorMaxAggregateOutputType = {
  id: string | null
  roomId: string | null
  participantId: string | null
  isTyping: boolean | null
  updatedAt: Date | null
}

export type TypingIndicatorCountAggregateOutputType = {
  id: number
  roomId: number
  participantId: number
  isTyping: number
  updatedAt: number
  _all: number
}


export type TypingIndicatorMinAggregateInputType = {
  id?: true
  roomId?: true
  participantId?: true
  isTyping?: true
  updatedAt?: true
}

export type TypingIndicatorMaxAggregateInputType = {
  id?: true
  roomId?: true
  participantId?: true
  isTyping?: true
  updatedAt?: true
}

export type TypingIndicatorCountAggregateInputType = {
  id?: true
  roomId?: true
  participantId?: true
  isTyping?: true
  updatedAt?: true
  _all?: true
}

export type TypingIndicatorAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which TypingIndicator to aggregate.
   */
  where?: Prisma.TypingIndicatorWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of TypingIndicators to fetch.
   */
  orderBy?: Prisma.TypingIndicatorOrderByWithRelationInput | Prisma.TypingIndicatorOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.TypingIndicatorWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` TypingIndicators from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` TypingIndicators.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned TypingIndicators
  **/
  _count?: true | TypingIndicatorCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: TypingIndicatorMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: TypingIndicatorMaxAggregateInputType
}

export type GetTypingIndicatorAggregateType<T extends TypingIndicatorAggregateArgs> = {
      [P in keyof T & keyof AggregateTypingIndicator]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateTypingIndicator[P]>
    : Prisma.GetScalarType<T[P], AggregateTypingIndicator[P]>
}




export type TypingIndicatorGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.TypingIndicatorWhereInput
  orderBy?: Prisma.TypingIndicatorOrderByWithAggregationInput | Prisma.TypingIndicatorOrderByWithAggregationInput[]
  by: Prisma.TypingIndicatorScalarFieldEnum[] | Prisma.TypingIndicatorScalarFieldEnum
  having?: Prisma.TypingIndicatorScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: TypingIndicatorCountAggregateInputType | true
  _min?: TypingIndicatorMinAggregateInputType
  _max?: TypingIndicatorMaxAggregateInputType
}

export type TypingIndicatorGroupByOutputType = {
  id: string
  roomId: string
  participantId: string
  isTyping: boolean
  updatedAt: Date
  _count: TypingIndicatorCountAggregateOutputType | null
  _min: TypingIndicatorMinAggregateOutputType | null
  _max: TypingIndicatorMaxAggregateOutputType | null
}

type GetTypingIndicatorGroupByPayload<T extends TypingIndicatorGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<TypingIndicatorGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof TypingIndicatorGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], TypingIndicatorGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], TypingIndicatorGroupByOutputType[P]>
      }
    >
  > 



export type TypingIndicatorWhereInput = {
  AND?: Prisma.TypingIndicatorWhereInput | Prisma.TypingIndicatorWhereInput[]
  OR?: Prisma.TypingIndicatorWhereInput[]
  NOT?: Prisma.TypingIndicatorWhereInput | Prisma.TypingIndicatorWhereInput[]
  id?: Prisma.StringFilter<"TypingIndicator"> | string
  roomId?: Prisma.StringFilter<"TypingIndicator"> | string
  participantId?: Prisma.StringFilter<"TypingIndicator"> | string
  isTyping?: Prisma.BoolFilter<"TypingIndicator"> | boolean
  updatedAt?: Prisma.DateTimeFilter<"TypingIndicator"> | Date | string
  participant?: Prisma.XOR<Prisma.ParticipantScalarRelationFilter, Prisma.ParticipantWhereInput>
}

export type TypingIndicatorOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  roomId?: Prisma.SortOrder
  participantId?: Prisma.SortOrder
  isTyping?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  participant?: Prisma.ParticipantOrderByWithRelationInput
}

export type TypingIndicatorWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  roomId_participantId?: Prisma.TypingIndicatorRoomIdParticipantIdCompoundUniqueInput
  AND?: Prisma.TypingIndicatorWhereInput | Prisma.TypingIndicatorWhereInput[]
  OR?: Prisma.TypingIndicatorWhereInput[]
  NOT?: Prisma.TypingIndicatorWhereInput | Prisma.TypingIndicatorWhereInput[]
  roomId?: Prisma.StringFilter<"TypingIndicator"> | string
  participantId?: Prisma.StringFilter<"TypingIndicator"> | string
  isTyping?: Prisma.BoolFilter<"TypingIndicator"> | boolean
  updatedAt?: Prisma.DateTimeFilter<"TypingIndicator"> | Date | string
  participant?: Prisma.XOR<Prisma.ParticipantScalarRelationFilter, Prisma.ParticipantWhereInput>
}, "id" | "roomId_participantId">

export type TypingIndicatorOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  roomId?: Prisma.SortOrder
  participantId?: Prisma.SortOrder
  isTyping?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  _count?: Prisma.TypingIndicatorCountOrderByAggregateInput
  _max?: Prisma.TypingIndicatorMaxOrderByAggregateInput
  _min?: Prisma.TypingIndicatorMinOrderByAggregateInput
}

export type TypingIndicatorScalarWhereWithAggregatesInput = {
  AND?: Prisma.TypingIndicatorScalarWhereWithAggregatesInput | Prisma.TypingIndicatorScalarWhereWithAggregatesInput[]
  OR?: Prisma.TypingIndicatorScalarWhereWithAggregatesInput[]
  NOT?: Prisma.TypingIndicatorScalarWhereWithAggregatesInput | Prisma.TypingIndicatorScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"TypingIndicator"> | string
  roomId?: Prisma.StringWithAggregatesFilter<"TypingIndicator"> | string
  participantId?: Prisma.StringWithAggregatesFilter<"TypingIndicator"> | string
  isTyping?: Prisma.BoolWithAggregatesFilter<"TypingIndicator"> | boolean
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<"TypingIndicator"> | Date | string
}

export type TypingIndicatorCreateInput = {
  id?: string
  roomId: string
  isTyping?: boolean
  updatedAt?: Date | string
  participant: Prisma.ParticipantCreateNestedOneWithoutTypingIndicatorsInput
}

export type TypingIndicatorUncheckedCreateInput = {
  id?: string
  roomId: string
  participantId: string
  isTyping?: boolean
  updatedAt?: Date | string
}

export type TypingIndicatorUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  roomId?: Prisma.StringFieldUpdateOperationsInput | string
  isTyping?: Prisma.BoolFieldUpdateOperationsInput | boolean
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  participant?: Prisma.ParticipantUpdateOneRequiredWithoutTypingIndicatorsNestedInput
}

export type TypingIndicatorUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  roomId?: Prisma.StringFieldUpdateOperationsInput | string
  participantId?: Prisma.StringFieldUpdateOperationsInput | string
  isTyping?: Prisma.BoolFieldUpdateOperationsInput | boolean
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type TypingIndicatorCreateManyInput = {
  id?: string
  roomId: string
  participantId: string
  isTyping?: boolean
  updatedAt?: Date | string
}

export type TypingIndicatorUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  roomId?: Prisma.StringFieldUpdateOperationsInput | string
  isTyping?: Prisma.BoolFieldUpdateOperationsInput | boolean
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type TypingIndicatorUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  roomId?: Prisma.StringFieldUpdateOperationsInput | string
  participantId?: Prisma.StringFieldUpdateOperationsInput | string
  isTyping?: Prisma.BoolFieldUpdateOperationsInput | boolean
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type TypingIndicatorListRelationFilter = {
  every?: Prisma.TypingIndicatorWhereInput
  some?: Prisma.TypingIndicatorWhereInput
  none?: Prisma.TypingIndicatorWhereInput
}

export type TypingIndicatorOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type TypingIndicatorRoomIdParticipantIdCompoundUniqueInput = {
  roomId: string
  participantId: string
}

export type TypingIndicatorCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  roomId?: Prisma.SortOrder
  participantId?: Prisma.SortOrder
  isTyping?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type TypingIndicatorMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  roomId?: Prisma.SortOrder
  participantId?: Prisma.SortOrder
  isTyping?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type TypingIndicatorMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  roomId?: Prisma.SortOrder
  participantId?: Prisma.SortOrder
  isTyping?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type TypingIndicatorCreateNestedManyWithoutParticipantInput = {
  create?: Prisma.XOR<Prisma.TypingIndicatorCreateWithoutParticipantInput, Prisma.TypingIndicatorUncheckedCreateWithoutParticipantInput> | Prisma.TypingIndicatorCreateWithoutParticipantInput[] | Prisma.TypingIndicatorUncheckedCreateWithoutParticipantInput[]
  connectOrCreate?: Prisma.TypingIndicatorCreateOrConnectWithoutParticipantInput | Prisma.TypingIndicatorCreateOrConnectWithoutParticipantInput[]
  createMany?: Prisma.TypingIndicatorCreateManyParticipantInputEnvelope
  connect?: Prisma.TypingIndicatorWhereUniqueInput | Prisma.TypingIndicatorWhereUniqueInput[]
}

export type TypingIndicatorUncheckedCreateNestedManyWithoutParticipantInput = {
  create?: Prisma.XOR<Prisma.TypingIndicatorCreateWithoutParticipantInput, Prisma.TypingIndicatorUncheckedCreateWithoutParticipantInput> | Prisma.TypingIndicatorCreateWithoutParticipantInput[] | Prisma.TypingIndicatorUncheckedCreateWithoutParticipantInput[]
  connectOrCreate?: Prisma.TypingIndicatorCreateOrConnectWithoutParticipantInput | Prisma.TypingIndicatorCreateOrConnectWithoutParticipantInput[]
  createMany?: Prisma.TypingIndicatorCreateManyParticipantInputEnvelope
  connect?: Prisma.TypingIndicatorWhereUniqueInput | Prisma.TypingIndicatorWhereUniqueInput[]
}

export type TypingIndicatorUpdateManyWithoutParticipantNestedInput = {
  create?: Prisma.XOR<Prisma.TypingIndicatorCreateWithoutParticipantInput, Prisma.TypingIndicatorUncheckedCreateWithoutParticipantInput> | Prisma.TypingIndicatorCreateWithoutParticipantInput[] | Prisma.TypingIndicatorUncheckedCreateWithoutParticipantInput[]
  connectOrCreate?: Prisma.TypingIndicatorCreateOrConnectWithoutParticipantInput | Prisma.TypingIndicatorCreateOrConnectWithoutParticipantInput[]
  upsert?: Prisma.TypingIndicatorUpsertWithWhereUniqueWithoutParticipantInput | Prisma.TypingIndicatorUpsertWithWhereUniqueWithoutParticipantInput[]
  createMany?: Prisma.TypingIndicatorCreateManyParticipantInputEnvelope
  set?: Prisma.TypingIndicatorWhereUniqueInput | Prisma.TypingIndicatorWhereUniqueInput[]
  disconnect?: Prisma.TypingIndicatorWhereUniqueInput | Prisma.TypingIndicatorWhereUniqueInput[]
  delete?: Prisma.TypingIndicatorWhereUniqueInput | Prisma.TypingIndicatorWhereUniqueInput[]
  connect?: Prisma.TypingIndicatorWhereUniqueInput | Prisma.TypingIndicatorWhereUniqueInput[]
  update?: Prisma.TypingIndicatorUpdateWithWhereUniqueWithoutParticipantInput | Prisma.TypingIndicatorUpdateWithWhereUniqueWithoutParticipantInput[]
  updateMany?: Prisma.TypingIndicatorUpdateManyWithWhereWithoutParticipantInput | Prisma.TypingIndicatorUpdateManyWithWhereWithoutParticipantInput[]
  deleteMany?: Prisma.TypingIndicatorScalarWhereInput | Prisma.TypingIndicatorScalarWhereInput[]
}

export type TypingIndicatorUncheckedUpdateManyWithoutParticipantNestedInput = {
  create?: Prisma.XOR<Prisma.TypingIndicatorCreateWithoutParticipantInput, Prisma.TypingIndicatorUncheckedCreateWithoutParticipantInput> | Prisma.TypingIndicatorCreateWithoutParticipantInput[] | Prisma.TypingIndicatorUncheckedCreateWithoutParticipantInput[]
  connectOrCreate?: Prisma.TypingIndicatorCreateOrConnectWithoutParticipantInput | Prisma.TypingIndicatorCreateOrConnectWithoutParticipantInput[]
  upsert?: Prisma.TypingIndicatorUpsertWithWhereUniqueWithoutParticipantInput | Prisma.TypingIndicatorUpsertWithWhereUniqueWithoutParticipantInput[]
  createMany?: Prisma.TypingIndicatorCreateManyParticipantInputEnvelope
  set?: Prisma.TypingIndicatorWhereUniqueInput | Prisma.TypingIndicatorWhereUniqueInput[]
  disconnect?: Prisma.TypingIndicatorWhereUniqueInput | Prisma.TypingIndicatorWhereUniqueInput[]
  delete?: Prisma.TypingIndicatorWhereUniqueInput | Prisma.TypingIndicatorWhereUniqueInput[]
  connect?: Prisma.TypingIndicatorWhereUniqueInput | Prisma.TypingIndicatorWhereUniqueInput[]
  update?: Prisma.TypingIndicatorUpdateWithWhereUniqueWithoutParticipantInput | Prisma.TypingIndicatorUpdateWithWhereUniqueWithoutParticipantInput[]
  updateMany?: Prisma.TypingIndicatorUpdateManyWithWhereWithoutParticipantInput | Prisma.TypingIndicatorUpdateManyWithWhereWithoutParticipantInput[]
  deleteMany?: Prisma.TypingIndicatorScalarWhereInput | Prisma.TypingIndicatorScalarWhereInput[]
}

export type TypingIndicatorCreateWithoutParticipantInput = {
  id?: string
  roomId: string
  isTyping?: boolean
  updatedAt?: Date | string
}

export type TypingIndicatorUncheckedCreateWithoutParticipantInput = {
  id?: string
  roomId: string
  isTyping?: boolean
  updatedAt?: Date | string
}

export type TypingIndicatorCreateOrConnectWithoutParticipantInput = {
  where: Prisma.TypingIndicatorWhereUniqueInput
  create: Prisma.XOR<Prisma.TypingIndicatorCreateWithoutParticipantInput, Prisma.TypingIndicatorUncheckedCreateWithoutParticipantInput>
}

export type TypingIndicatorCreateManyParticipantInputEnvelope = {
  data: Prisma.TypingIndicatorCreateManyParticipantInput | Prisma.TypingIndicatorCreateManyParticipantInput[]
  skipDuplicates?: boolean
}

export type TypingIndicatorUpsertWithWhereUniqueWithoutParticipantInput = {
  where: Prisma.TypingIndicatorWhereUniqueInput
  update: Prisma.XOR<Prisma.TypingIndicatorUpdateWithoutParticipantInput, Prisma.TypingIndicatorUncheckedUpdateWithoutParticipantInput>
  create: Prisma.XOR<Prisma.TypingIndicatorCreateWithoutParticipantInput, Prisma.TypingIndicatorUncheckedCreateWithoutParticipantInput>
}

export type TypingIndicatorUpdateWithWhereUniqueWithoutParticipantInput = {
  where: Prisma.TypingIndicatorWhereUniqueInput
  data: Prisma.XOR<Prisma.TypingIndicatorUpdateWithoutParticipantInput, Prisma.TypingIndicatorUncheckedUpdateWithoutParticipantInput>
}

export type TypingIndicatorUpdateManyWithWhereWithoutParticipantInput = {
  where: Prisma.TypingIndicatorScalarWhereInput
  data: Prisma.XOR<Prisma.TypingIndicatorUpdateManyMutationInput, Prisma.TypingIndicatorUncheckedUpdateManyWithoutParticipantInput>
}

export type TypingIndicatorScalarWhereInput = {
  AND?: Prisma.TypingIndicatorScalarWhereInput | Prisma.TypingIndicatorScalarWhereInput[]
  OR?: Prisma.TypingIndicatorScalarWhereInput[]
  NOT?: Prisma.TypingIndicatorScalarWhereInput | Prisma.TypingIndicatorScalarWhereInput[]
  id?: Prisma.StringFilter<"TypingIndicator"> | string
  roomId?: Prisma.StringFilter<"TypingIndicator"> | string
  participantId?: Prisma.StringFilter<"TypingIndicator"> | string
  isTyping?: Prisma.BoolFilter<"TypingIndicator"> | boolean
  updatedAt?: Prisma.DateTimeFilter<"TypingIndicator"> | Date | string
}

export type TypingIndicatorCreateManyParticipantInput = {
  id?: string
  roomId: string
  isTyping?: boolean
  updatedAt?: Date | string
}

export type TypingIndicatorUpdateWithoutParticipantInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  roomId?: Prisma.StringFieldUpdateOperationsInput | string
  isTyping?: Prisma.BoolFieldUpdateOperationsInput | boolean
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type TypingIndicatorUncheckedUpdateWithoutParticipantInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  roomId?: Prisma.StringFieldUpdateOperationsInput | string
  isTyping?: Prisma.BoolFieldUpdateOperationsInput | boolean
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type TypingIndicatorUncheckedUpdateManyWithoutParticipantInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  roomId?: Prisma.StringFieldUpdateOperationsInput | string
  isTyping?: Prisma.BoolFieldUpdateOperationsInput | boolean
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}



export type TypingIndicatorSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  roomId?: boolean
  participantId?: boolean
  isTyping?: boolean
  updatedAt?: boolean
  participant?: boolean | Prisma.ParticipantDefaultArgs<ExtArgs>
}, ExtArgs["result"]["typingIndicator"]>

export type TypingIndicatorSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  roomId?: boolean
  participantId?: boolean
  isTyping?: boolean
  updatedAt?: boolean
  participant?: boolean | Prisma.ParticipantDefaultArgs<ExtArgs>
}, ExtArgs["result"]["typingIndicator"]>

export type TypingIndicatorSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  roomId?: boolean
  participantId?: boolean
  isTyping?: boolean
  updatedAt?: boolean
  participant?: boolean | Prisma.ParticipantDefaultArgs<ExtArgs>
}, ExtArgs["result"]["typingIndicator"]>

export type TypingIndicatorSelectScalar = {
  id?: boolean
  roomId?: boolean
  participantId?: boolean
  isTyping?: boolean
  updatedAt?: boolean
}

export type TypingIndicatorOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "roomId" | "participantId" | "isTyping" | "updatedAt", ExtArgs["result"]["typingIndicator"]>
export type TypingIndicatorInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  participant?: boolean | Prisma.ParticipantDefaultArgs<ExtArgs>
}
export type TypingIndicatorIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  participant?: boolean | Prisma.ParticipantDefaultArgs<ExtArgs>
}
export type TypingIndicatorIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  participant?: boolean | Prisma.ParticipantDefaultArgs<ExtArgs>
}

export type $TypingIndicatorPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "TypingIndicator"
  objects: {
    participant: Prisma.$ParticipantPayload<ExtArgs>
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    roomId: string
    participantId: string
    isTyping: boolean
    updatedAt: Date
  }, ExtArgs["result"]["typingIndicator"]>
  composites: {}
}

export type TypingIndicatorGetPayload<S extends boolean | null | undefined | TypingIndicatorDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$TypingIndicatorPayload, S>

export type TypingIndicatorCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<TypingIndicatorFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: TypingIndicatorCountAggregateInputType | true
  }

export interface TypingIndicatorDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['TypingIndicator'], meta: { name: 'TypingIndicator' } }
  /**
   * Find zero or one TypingIndicator that matches the filter.
   * @param {TypingIndicatorFindUniqueArgs} args - Arguments to find a TypingIndicator
   * @example
   * // Get one TypingIndicator
   * const typingIndicator = await prisma.typingIndicator.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends TypingIndicatorFindUniqueArgs>(args: Prisma.SelectSubset<T, TypingIndicatorFindUniqueArgs<ExtArgs>>): Prisma.Prisma__TypingIndicatorClient<runtime.Types.Result.GetResult<Prisma.$TypingIndicatorPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one TypingIndicator that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {TypingIndicatorFindUniqueOrThrowArgs} args - Arguments to find a TypingIndicator
   * @example
   * // Get one TypingIndicator
   * const typingIndicator = await prisma.typingIndicator.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends TypingIndicatorFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, TypingIndicatorFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__TypingIndicatorClient<runtime.Types.Result.GetResult<Prisma.$TypingIndicatorPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first TypingIndicator that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TypingIndicatorFindFirstArgs} args - Arguments to find a TypingIndicator
   * @example
   * // Get one TypingIndicator
   * const typingIndicator = await prisma.typingIndicator.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends TypingIndicatorFindFirstArgs>(args?: Prisma.SelectSubset<T, TypingIndicatorFindFirstArgs<ExtArgs>>): Prisma.Prisma__TypingIndicatorClient<runtime.Types.Result.GetResult<Prisma.$TypingIndicatorPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first TypingIndicator that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TypingIndicatorFindFirstOrThrowArgs} args - Arguments to find a TypingIndicator
   * @example
   * // Get one TypingIndicator
   * const typingIndicator = await prisma.typingIndicator.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends TypingIndicatorFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, TypingIndicatorFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__TypingIndicatorClient<runtime.Types.Result.GetResult<Prisma.$TypingIndicatorPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more TypingIndicators that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TypingIndicatorFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all TypingIndicators
   * const typingIndicators = await prisma.typingIndicator.findMany()
   * 
   * // Get first 10 TypingIndicators
   * const typingIndicators = await prisma.typingIndicator.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const typingIndicatorWithIdOnly = await prisma.typingIndicator.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends TypingIndicatorFindManyArgs>(args?: Prisma.SelectSubset<T, TypingIndicatorFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$TypingIndicatorPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a TypingIndicator.
   * @param {TypingIndicatorCreateArgs} args - Arguments to create a TypingIndicator.
   * @example
   * // Create one TypingIndicator
   * const TypingIndicator = await prisma.typingIndicator.create({
   *   data: {
   *     // ... data to create a TypingIndicator
   *   }
   * })
   * 
   */
  create<T extends TypingIndicatorCreateArgs>(args: Prisma.SelectSubset<T, TypingIndicatorCreateArgs<ExtArgs>>): Prisma.Prisma__TypingIndicatorClient<runtime.Types.Result.GetResult<Prisma.$TypingIndicatorPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many TypingIndicators.
   * @param {TypingIndicatorCreateManyArgs} args - Arguments to create many TypingIndicators.
   * @example
   * // Create many TypingIndicators
   * const typingIndicator = await prisma.typingIndicator.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends TypingIndicatorCreateManyArgs>(args?: Prisma.SelectSubset<T, TypingIndicatorCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many TypingIndicators and returns the data saved in the database.
   * @param {TypingIndicatorCreateManyAndReturnArgs} args - Arguments to create many TypingIndicators.
   * @example
   * // Create many TypingIndicators
   * const typingIndicator = await prisma.typingIndicator.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many TypingIndicators and only return the `id`
   * const typingIndicatorWithIdOnly = await prisma.typingIndicator.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends TypingIndicatorCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, TypingIndicatorCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$TypingIndicatorPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a TypingIndicator.
   * @param {TypingIndicatorDeleteArgs} args - Arguments to delete one TypingIndicator.
   * @example
   * // Delete one TypingIndicator
   * const TypingIndicator = await prisma.typingIndicator.delete({
   *   where: {
   *     // ... filter to delete one TypingIndicator
   *   }
   * })
   * 
   */
  delete<T extends TypingIndicatorDeleteArgs>(args: Prisma.SelectSubset<T, TypingIndicatorDeleteArgs<ExtArgs>>): Prisma.Prisma__TypingIndicatorClient<runtime.Types.Result.GetResult<Prisma.$TypingIndicatorPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one TypingIndicator.
   * @param {TypingIndicatorUpdateArgs} args - Arguments to update one TypingIndicator.
   * @example
   * // Update one TypingIndicator
   * const typingIndicator = await prisma.typingIndicator.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends TypingIndicatorUpdateArgs>(args: Prisma.SelectSubset<T, TypingIndicatorUpdateArgs<ExtArgs>>): Prisma.Prisma__TypingIndicatorClient<runtime.Types.Result.GetResult<Prisma.$TypingIndicatorPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more TypingIndicators.
   * @param {TypingIndicatorDeleteManyArgs} args - Arguments to filter TypingIndicators to delete.
   * @example
   * // Delete a few TypingIndicators
   * const { count } = await prisma.typingIndicator.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends TypingIndicatorDeleteManyArgs>(args?: Prisma.SelectSubset<T, TypingIndicatorDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more TypingIndicators.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TypingIndicatorUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many TypingIndicators
   * const typingIndicator = await prisma.typingIndicator.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends TypingIndicatorUpdateManyArgs>(args: Prisma.SelectSubset<T, TypingIndicatorUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more TypingIndicators and returns the data updated in the database.
   * @param {TypingIndicatorUpdateManyAndReturnArgs} args - Arguments to update many TypingIndicators.
   * @example
   * // Update many TypingIndicators
   * const typingIndicator = await prisma.typingIndicator.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more TypingIndicators and only return the `id`
   * const typingIndicatorWithIdOnly = await prisma.typingIndicator.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends TypingIndicatorUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, TypingIndicatorUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$TypingIndicatorPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one TypingIndicator.
   * @param {TypingIndicatorUpsertArgs} args - Arguments to update or create a TypingIndicator.
   * @example
   * // Update or create a TypingIndicator
   * const typingIndicator = await prisma.typingIndicator.upsert({
   *   create: {
   *     // ... data to create a TypingIndicator
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the TypingIndicator we want to update
   *   }
   * })
   */
  upsert<T extends TypingIndicatorUpsertArgs>(args: Prisma.SelectSubset<T, TypingIndicatorUpsertArgs<ExtArgs>>): Prisma.Prisma__TypingIndicatorClient<runtime.Types.Result.GetResult<Prisma.$TypingIndicatorPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of TypingIndicators.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TypingIndicatorCountArgs} args - Arguments to filter TypingIndicators to count.
   * @example
   * // Count the number of TypingIndicators
   * const count = await prisma.typingIndicator.count({
   *   where: {
   *     // ... the filter for the TypingIndicators we want to count
   *   }
   * })
  **/
  count<T extends TypingIndicatorCountArgs>(
    args?: Prisma.Subset<T, TypingIndicatorCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], TypingIndicatorCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a TypingIndicator.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TypingIndicatorAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends TypingIndicatorAggregateArgs>(args: Prisma.Subset<T, TypingIndicatorAggregateArgs>): Prisma.PrismaPromise<GetTypingIndicatorAggregateType<T>>

  /**
   * Group by TypingIndicator.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TypingIndicatorGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends TypingIndicatorGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: TypingIndicatorGroupByArgs['orderBy'] }
      : { orderBy?: TypingIndicatorGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, TypingIndicatorGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTypingIndicatorGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the TypingIndicator model
 */
readonly fields: TypingIndicatorFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for TypingIndicator.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__TypingIndicatorClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  participant<T extends Prisma.ParticipantDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.ParticipantDefaultArgs<ExtArgs>>): Prisma.Prisma__ParticipantClient<runtime.Types.Result.GetResult<Prisma.$ParticipantPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the TypingIndicator model
 */
export interface TypingIndicatorFieldRefs {
  readonly id: Prisma.FieldRef<"TypingIndicator", 'String'>
  readonly roomId: Prisma.FieldRef<"TypingIndicator", 'String'>
  readonly participantId: Prisma.FieldRef<"TypingIndicator", 'String'>
  readonly isTyping: Prisma.FieldRef<"TypingIndicator", 'Boolean'>
  readonly updatedAt: Prisma.FieldRef<"TypingIndicator", 'DateTime'>
}
    

// Custom InputTypes
/**
 * TypingIndicator findUnique
 */
export type TypingIndicatorFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TypingIndicator
   */
  select?: Prisma.TypingIndicatorSelect<ExtArgs> | null
  /**
   * Omit specific fields from the TypingIndicator
   */
  omit?: Prisma.TypingIndicatorOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TypingIndicatorInclude<ExtArgs> | null
  /**
   * Filter, which TypingIndicator to fetch.
   */
  where: Prisma.TypingIndicatorWhereUniqueInput
}

/**
 * TypingIndicator findUniqueOrThrow
 */
export type TypingIndicatorFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TypingIndicator
   */
  select?: Prisma.TypingIndicatorSelect<ExtArgs> | null
  /**
   * Omit specific fields from the TypingIndicator
   */
  omit?: Prisma.TypingIndicatorOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TypingIndicatorInclude<ExtArgs> | null
  /**
   * Filter, which TypingIndicator to fetch.
   */
  where: Prisma.TypingIndicatorWhereUniqueInput
}

/**
 * TypingIndicator findFirst
 */
export type TypingIndicatorFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TypingIndicator
   */
  select?: Prisma.TypingIndicatorSelect<ExtArgs> | null
  /**
   * Omit specific fields from the TypingIndicator
   */
  omit?: Prisma.TypingIndicatorOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TypingIndicatorInclude<ExtArgs> | null
  /**
   * Filter, which TypingIndicator to fetch.
   */
  where?: Prisma.TypingIndicatorWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of TypingIndicators to fetch.
   */
  orderBy?: Prisma.TypingIndicatorOrderByWithRelationInput | Prisma.TypingIndicatorOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for TypingIndicators.
   */
  cursor?: Prisma.TypingIndicatorWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` TypingIndicators from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` TypingIndicators.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of TypingIndicators.
   */
  distinct?: Prisma.TypingIndicatorScalarFieldEnum | Prisma.TypingIndicatorScalarFieldEnum[]
}

/**
 * TypingIndicator findFirstOrThrow
 */
export type TypingIndicatorFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TypingIndicator
   */
  select?: Prisma.TypingIndicatorSelect<ExtArgs> | null
  /**
   * Omit specific fields from the TypingIndicator
   */
  omit?: Prisma.TypingIndicatorOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TypingIndicatorInclude<ExtArgs> | null
  /**
   * Filter, which TypingIndicator to fetch.
   */
  where?: Prisma.TypingIndicatorWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of TypingIndicators to fetch.
   */
  orderBy?: Prisma.TypingIndicatorOrderByWithRelationInput | Prisma.TypingIndicatorOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for TypingIndicators.
   */
  cursor?: Prisma.TypingIndicatorWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` TypingIndicators from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` TypingIndicators.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of TypingIndicators.
   */
  distinct?: Prisma.TypingIndicatorScalarFieldEnum | Prisma.TypingIndicatorScalarFieldEnum[]
}

/**
 * TypingIndicator findMany
 */
export type TypingIndicatorFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TypingIndicator
   */
  select?: Prisma.TypingIndicatorSelect<ExtArgs> | null
  /**
   * Omit specific fields from the TypingIndicator
   */
  omit?: Prisma.TypingIndicatorOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TypingIndicatorInclude<ExtArgs> | null
  /**
   * Filter, which TypingIndicators to fetch.
   */
  where?: Prisma.TypingIndicatorWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of TypingIndicators to fetch.
   */
  orderBy?: Prisma.TypingIndicatorOrderByWithRelationInput | Prisma.TypingIndicatorOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing TypingIndicators.
   */
  cursor?: Prisma.TypingIndicatorWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` TypingIndicators from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` TypingIndicators.
   */
  skip?: number
  distinct?: Prisma.TypingIndicatorScalarFieldEnum | Prisma.TypingIndicatorScalarFieldEnum[]
}

/**
 * TypingIndicator create
 */
export type TypingIndicatorCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TypingIndicator
   */
  select?: Prisma.TypingIndicatorSelect<ExtArgs> | null
  /**
   * Omit specific fields from the TypingIndicator
   */
  omit?: Prisma.TypingIndicatorOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TypingIndicatorInclude<ExtArgs> | null
  /**
   * The data needed to create a TypingIndicator.
   */
  data: Prisma.XOR<Prisma.TypingIndicatorCreateInput, Prisma.TypingIndicatorUncheckedCreateInput>
}

/**
 * TypingIndicator createMany
 */
export type TypingIndicatorCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many TypingIndicators.
   */
  data: Prisma.TypingIndicatorCreateManyInput | Prisma.TypingIndicatorCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * TypingIndicator createManyAndReturn
 */
export type TypingIndicatorCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TypingIndicator
   */
  select?: Prisma.TypingIndicatorSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the TypingIndicator
   */
  omit?: Prisma.TypingIndicatorOmit<ExtArgs> | null
  /**
   * The data used to create many TypingIndicators.
   */
  data: Prisma.TypingIndicatorCreateManyInput | Prisma.TypingIndicatorCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TypingIndicatorIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * TypingIndicator update
 */
export type TypingIndicatorUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TypingIndicator
   */
  select?: Prisma.TypingIndicatorSelect<ExtArgs> | null
  /**
   * Omit specific fields from the TypingIndicator
   */
  omit?: Prisma.TypingIndicatorOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TypingIndicatorInclude<ExtArgs> | null
  /**
   * The data needed to update a TypingIndicator.
   */
  data: Prisma.XOR<Prisma.TypingIndicatorUpdateInput, Prisma.TypingIndicatorUncheckedUpdateInput>
  /**
   * Choose, which TypingIndicator to update.
   */
  where: Prisma.TypingIndicatorWhereUniqueInput
}

/**
 * TypingIndicator updateMany
 */
export type TypingIndicatorUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update TypingIndicators.
   */
  data: Prisma.XOR<Prisma.TypingIndicatorUpdateManyMutationInput, Prisma.TypingIndicatorUncheckedUpdateManyInput>
  /**
   * Filter which TypingIndicators to update
   */
  where?: Prisma.TypingIndicatorWhereInput
  /**
   * Limit how many TypingIndicators to update.
   */
  limit?: number
}

/**
 * TypingIndicator updateManyAndReturn
 */
export type TypingIndicatorUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TypingIndicator
   */
  select?: Prisma.TypingIndicatorSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the TypingIndicator
   */
  omit?: Prisma.TypingIndicatorOmit<ExtArgs> | null
  /**
   * The data used to update TypingIndicators.
   */
  data: Prisma.XOR<Prisma.TypingIndicatorUpdateManyMutationInput, Prisma.TypingIndicatorUncheckedUpdateManyInput>
  /**
   * Filter which TypingIndicators to update
   */
  where?: Prisma.TypingIndicatorWhereInput
  /**
   * Limit how many TypingIndicators to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TypingIndicatorIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * TypingIndicator upsert
 */
export type TypingIndicatorUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TypingIndicator
   */
  select?: Prisma.TypingIndicatorSelect<ExtArgs> | null
  /**
   * Omit specific fields from the TypingIndicator
   */
  omit?: Prisma.TypingIndicatorOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TypingIndicatorInclude<ExtArgs> | null
  /**
   * The filter to search for the TypingIndicator to update in case it exists.
   */
  where: Prisma.TypingIndicatorWhereUniqueInput
  /**
   * In case the TypingIndicator found by the `where` argument doesn't exist, create a new TypingIndicator with this data.
   */
  create: Prisma.XOR<Prisma.TypingIndicatorCreateInput, Prisma.TypingIndicatorUncheckedCreateInput>
  /**
   * In case the TypingIndicator was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.TypingIndicatorUpdateInput, Prisma.TypingIndicatorUncheckedUpdateInput>
}

/**
 * TypingIndicator delete
 */
export type TypingIndicatorDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TypingIndicator
   */
  select?: Prisma.TypingIndicatorSelect<ExtArgs> | null
  /**
   * Omit specific fields from the TypingIndicator
   */
  omit?: Prisma.TypingIndicatorOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TypingIndicatorInclude<ExtArgs> | null
  /**
   * Filter which TypingIndicator to delete.
   */
  where: Prisma.TypingIndicatorWhereUniqueInput
}

/**
 * TypingIndicator deleteMany
 */
export type TypingIndicatorDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which TypingIndicators to delete
   */
  where?: Prisma.TypingIndicatorWhereInput
  /**
   * Limit how many TypingIndicators to delete.
   */
  limit?: number
}

/**
 * TypingIndicator without action
 */
export type TypingIndicatorDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TypingIndicator
   */
  select?: Prisma.TypingIndicatorSelect<ExtArgs> | null
  /**
   * Omit specific fields from the TypingIndicator
   */
  omit?: Prisma.TypingIndicatorOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TypingIndicatorInclude<ExtArgs> | null
}
