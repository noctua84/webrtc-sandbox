
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `RoomActivity` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model RoomActivity
 * 
 */
export type RoomActivityModel = runtime.Types.Result.DefaultSelection<Prisma.$RoomActivityPayload>

export type AggregateRoomActivity = {
  _count: RoomActivityCountAggregateOutputType | null
  _min: RoomActivityMinAggregateOutputType | null
  _max: RoomActivityMaxAggregateOutputType | null
}

export type RoomActivityMinAggregateOutputType = {
  id: string | null
  roomId: string | null
  eventType: string | null
  participantId: string | null
  timestamp: Date | null
}

export type RoomActivityMaxAggregateOutputType = {
  id: string | null
  roomId: string | null
  eventType: string | null
  participantId: string | null
  timestamp: Date | null
}

export type RoomActivityCountAggregateOutputType = {
  id: number
  roomId: number
  eventType: number
  participantId: number
  timestamp: number
  metadata: number
  _all: number
}


export type RoomActivityMinAggregateInputType = {
  id?: true
  roomId?: true
  eventType?: true
  participantId?: true
  timestamp?: true
}

export type RoomActivityMaxAggregateInputType = {
  id?: true
  roomId?: true
  eventType?: true
  participantId?: true
  timestamp?: true
}

export type RoomActivityCountAggregateInputType = {
  id?: true
  roomId?: true
  eventType?: true
  participantId?: true
  timestamp?: true
  metadata?: true
  _all?: true
}

export type RoomActivityAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which RoomActivity to aggregate.
   */
  where?: Prisma.RoomActivityWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of RoomActivities to fetch.
   */
  orderBy?: Prisma.RoomActivityOrderByWithRelationInput | Prisma.RoomActivityOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.RoomActivityWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` RoomActivities from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` RoomActivities.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned RoomActivities
  **/
  _count?: true | RoomActivityCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: RoomActivityMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: RoomActivityMaxAggregateInputType
}

export type GetRoomActivityAggregateType<T extends RoomActivityAggregateArgs> = {
      [P in keyof T & keyof AggregateRoomActivity]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateRoomActivity[P]>
    : Prisma.GetScalarType<T[P], AggregateRoomActivity[P]>
}




export type RoomActivityGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.RoomActivityWhereInput
  orderBy?: Prisma.RoomActivityOrderByWithAggregationInput | Prisma.RoomActivityOrderByWithAggregationInput[]
  by: Prisma.RoomActivityScalarFieldEnum[] | Prisma.RoomActivityScalarFieldEnum
  having?: Prisma.RoomActivityScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: RoomActivityCountAggregateInputType | true
  _min?: RoomActivityMinAggregateInputType
  _max?: RoomActivityMaxAggregateInputType
}

export type RoomActivityGroupByOutputType = {
  id: string
  roomId: string
  eventType: string
  participantId: string | null
  timestamp: Date
  metadata: runtime.JsonValue | null
  _count: RoomActivityCountAggregateOutputType | null
  _min: RoomActivityMinAggregateOutputType | null
  _max: RoomActivityMaxAggregateOutputType | null
}

type GetRoomActivityGroupByPayload<T extends RoomActivityGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<RoomActivityGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof RoomActivityGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], RoomActivityGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], RoomActivityGroupByOutputType[P]>
      }
    >
  > 



export type RoomActivityWhereInput = {
  AND?: Prisma.RoomActivityWhereInput | Prisma.RoomActivityWhereInput[]
  OR?: Prisma.RoomActivityWhereInput[]
  NOT?: Prisma.RoomActivityWhereInput | Prisma.RoomActivityWhereInput[]
  id?: Prisma.StringFilter<"RoomActivity"> | string
  roomId?: Prisma.StringFilter<"RoomActivity"> | string
  eventType?: Prisma.StringFilter<"RoomActivity"> | string
  participantId?: Prisma.StringNullableFilter<"RoomActivity"> | string | null
  timestamp?: Prisma.DateTimeFilter<"RoomActivity"> | Date | string
  metadata?: Prisma.JsonNullableFilter<"RoomActivity">
}

export type RoomActivityOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  roomId?: Prisma.SortOrder
  eventType?: Prisma.SortOrder
  participantId?: Prisma.SortOrderInput | Prisma.SortOrder
  timestamp?: Prisma.SortOrder
  metadata?: Prisma.SortOrderInput | Prisma.SortOrder
}

export type RoomActivityWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  AND?: Prisma.RoomActivityWhereInput | Prisma.RoomActivityWhereInput[]
  OR?: Prisma.RoomActivityWhereInput[]
  NOT?: Prisma.RoomActivityWhereInput | Prisma.RoomActivityWhereInput[]
  roomId?: Prisma.StringFilter<"RoomActivity"> | string
  eventType?: Prisma.StringFilter<"RoomActivity"> | string
  participantId?: Prisma.StringNullableFilter<"RoomActivity"> | string | null
  timestamp?: Prisma.DateTimeFilter<"RoomActivity"> | Date | string
  metadata?: Prisma.JsonNullableFilter<"RoomActivity">
}, "id">

export type RoomActivityOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  roomId?: Prisma.SortOrder
  eventType?: Prisma.SortOrder
  participantId?: Prisma.SortOrderInput | Prisma.SortOrder
  timestamp?: Prisma.SortOrder
  metadata?: Prisma.SortOrderInput | Prisma.SortOrder
  _count?: Prisma.RoomActivityCountOrderByAggregateInput
  _max?: Prisma.RoomActivityMaxOrderByAggregateInput
  _min?: Prisma.RoomActivityMinOrderByAggregateInput
}

export type RoomActivityScalarWhereWithAggregatesInput = {
  AND?: Prisma.RoomActivityScalarWhereWithAggregatesInput | Prisma.RoomActivityScalarWhereWithAggregatesInput[]
  OR?: Prisma.RoomActivityScalarWhereWithAggregatesInput[]
  NOT?: Prisma.RoomActivityScalarWhereWithAggregatesInput | Prisma.RoomActivityScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"RoomActivity"> | string
  roomId?: Prisma.StringWithAggregatesFilter<"RoomActivity"> | string
  eventType?: Prisma.StringWithAggregatesFilter<"RoomActivity"> | string
  participantId?: Prisma.StringNullableWithAggregatesFilter<"RoomActivity"> | string | null
  timestamp?: Prisma.DateTimeWithAggregatesFilter<"RoomActivity"> | Date | string
  metadata?: Prisma.JsonNullableWithAggregatesFilter<"RoomActivity">
}

export type RoomActivityCreateInput = {
  id?: string
  roomId: string
  eventType: string
  participantId?: string | null
  timestamp?: Date | string
  metadata?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
}

export type RoomActivityUncheckedCreateInput = {
  id?: string
  roomId: string
  eventType: string
  participantId?: string | null
  timestamp?: Date | string
  metadata?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
}

export type RoomActivityUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  roomId?: Prisma.StringFieldUpdateOperationsInput | string
  eventType?: Prisma.StringFieldUpdateOperationsInput | string
  participantId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  timestamp?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  metadata?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
}

export type RoomActivityUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  roomId?: Prisma.StringFieldUpdateOperationsInput | string
  eventType?: Prisma.StringFieldUpdateOperationsInput | string
  participantId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  timestamp?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  metadata?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
}

export type RoomActivityCreateManyInput = {
  id?: string
  roomId: string
  eventType: string
  participantId?: string | null
  timestamp?: Date | string
  metadata?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
}

export type RoomActivityUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  roomId?: Prisma.StringFieldUpdateOperationsInput | string
  eventType?: Prisma.StringFieldUpdateOperationsInput | string
  participantId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  timestamp?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  metadata?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
}

export type RoomActivityUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  roomId?: Prisma.StringFieldUpdateOperationsInput | string
  eventType?: Prisma.StringFieldUpdateOperationsInput | string
  participantId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  timestamp?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  metadata?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
}

export type RoomActivityCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  roomId?: Prisma.SortOrder
  eventType?: Prisma.SortOrder
  participantId?: Prisma.SortOrder
  timestamp?: Prisma.SortOrder
  metadata?: Prisma.SortOrder
}

export type RoomActivityMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  roomId?: Prisma.SortOrder
  eventType?: Prisma.SortOrder
  participantId?: Prisma.SortOrder
  timestamp?: Prisma.SortOrder
}

export type RoomActivityMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  roomId?: Prisma.SortOrder
  eventType?: Prisma.SortOrder
  participantId?: Prisma.SortOrder
  timestamp?: Prisma.SortOrder
}



export type RoomActivitySelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  roomId?: boolean
  eventType?: boolean
  participantId?: boolean
  timestamp?: boolean
  metadata?: boolean
}, ExtArgs["result"]["roomActivity"]>

export type RoomActivitySelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  roomId?: boolean
  eventType?: boolean
  participantId?: boolean
  timestamp?: boolean
  metadata?: boolean
}, ExtArgs["result"]["roomActivity"]>

export type RoomActivitySelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  roomId?: boolean
  eventType?: boolean
  participantId?: boolean
  timestamp?: boolean
  metadata?: boolean
}, ExtArgs["result"]["roomActivity"]>

export type RoomActivitySelectScalar = {
  id?: boolean
  roomId?: boolean
  eventType?: boolean
  participantId?: boolean
  timestamp?: boolean
  metadata?: boolean
}

export type RoomActivityOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "roomId" | "eventType" | "participantId" | "timestamp" | "metadata", ExtArgs["result"]["roomActivity"]>

export type $RoomActivityPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "RoomActivity"
  objects: {}
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    roomId: string
    eventType: string
    participantId: string | null
    timestamp: Date
    metadata: runtime.JsonValue | null
  }, ExtArgs["result"]["roomActivity"]>
  composites: {}
}

export type RoomActivityGetPayload<S extends boolean | null | undefined | RoomActivityDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$RoomActivityPayload, S>

export type RoomActivityCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<RoomActivityFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: RoomActivityCountAggregateInputType | true
  }

export interface RoomActivityDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['RoomActivity'], meta: { name: 'RoomActivity' } }
  /**
   * Find zero or one RoomActivity that matches the filter.
   * @param {RoomActivityFindUniqueArgs} args - Arguments to find a RoomActivity
   * @example
   * // Get one RoomActivity
   * const roomActivity = await prisma.roomActivity.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends RoomActivityFindUniqueArgs>(args: Prisma.SelectSubset<T, RoomActivityFindUniqueArgs<ExtArgs>>): Prisma.Prisma__RoomActivityClient<runtime.Types.Result.GetResult<Prisma.$RoomActivityPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one RoomActivity that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {RoomActivityFindUniqueOrThrowArgs} args - Arguments to find a RoomActivity
   * @example
   * // Get one RoomActivity
   * const roomActivity = await prisma.roomActivity.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends RoomActivityFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, RoomActivityFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__RoomActivityClient<runtime.Types.Result.GetResult<Prisma.$RoomActivityPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first RoomActivity that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {RoomActivityFindFirstArgs} args - Arguments to find a RoomActivity
   * @example
   * // Get one RoomActivity
   * const roomActivity = await prisma.roomActivity.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends RoomActivityFindFirstArgs>(args?: Prisma.SelectSubset<T, RoomActivityFindFirstArgs<ExtArgs>>): Prisma.Prisma__RoomActivityClient<runtime.Types.Result.GetResult<Prisma.$RoomActivityPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first RoomActivity that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {RoomActivityFindFirstOrThrowArgs} args - Arguments to find a RoomActivity
   * @example
   * // Get one RoomActivity
   * const roomActivity = await prisma.roomActivity.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends RoomActivityFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, RoomActivityFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__RoomActivityClient<runtime.Types.Result.GetResult<Prisma.$RoomActivityPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more RoomActivities that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {RoomActivityFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all RoomActivities
   * const roomActivities = await prisma.roomActivity.findMany()
   * 
   * // Get first 10 RoomActivities
   * const roomActivities = await prisma.roomActivity.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const roomActivityWithIdOnly = await prisma.roomActivity.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends RoomActivityFindManyArgs>(args?: Prisma.SelectSubset<T, RoomActivityFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$RoomActivityPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a RoomActivity.
   * @param {RoomActivityCreateArgs} args - Arguments to create a RoomActivity.
   * @example
   * // Create one RoomActivity
   * const RoomActivity = await prisma.roomActivity.create({
   *   data: {
   *     // ... data to create a RoomActivity
   *   }
   * })
   * 
   */
  create<T extends RoomActivityCreateArgs>(args: Prisma.SelectSubset<T, RoomActivityCreateArgs<ExtArgs>>): Prisma.Prisma__RoomActivityClient<runtime.Types.Result.GetResult<Prisma.$RoomActivityPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many RoomActivities.
   * @param {RoomActivityCreateManyArgs} args - Arguments to create many RoomActivities.
   * @example
   * // Create many RoomActivities
   * const roomActivity = await prisma.roomActivity.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends RoomActivityCreateManyArgs>(args?: Prisma.SelectSubset<T, RoomActivityCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many RoomActivities and returns the data saved in the database.
   * @param {RoomActivityCreateManyAndReturnArgs} args - Arguments to create many RoomActivities.
   * @example
   * // Create many RoomActivities
   * const roomActivity = await prisma.roomActivity.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many RoomActivities and only return the `id`
   * const roomActivityWithIdOnly = await prisma.roomActivity.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends RoomActivityCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, RoomActivityCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$RoomActivityPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a RoomActivity.
   * @param {RoomActivityDeleteArgs} args - Arguments to delete one RoomActivity.
   * @example
   * // Delete one RoomActivity
   * const RoomActivity = await prisma.roomActivity.delete({
   *   where: {
   *     // ... filter to delete one RoomActivity
   *   }
   * })
   * 
   */
  delete<T extends RoomActivityDeleteArgs>(args: Prisma.SelectSubset<T, RoomActivityDeleteArgs<ExtArgs>>): Prisma.Prisma__RoomActivityClient<runtime.Types.Result.GetResult<Prisma.$RoomActivityPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one RoomActivity.
   * @param {RoomActivityUpdateArgs} args - Arguments to update one RoomActivity.
   * @example
   * // Update one RoomActivity
   * const roomActivity = await prisma.roomActivity.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends RoomActivityUpdateArgs>(args: Prisma.SelectSubset<T, RoomActivityUpdateArgs<ExtArgs>>): Prisma.Prisma__RoomActivityClient<runtime.Types.Result.GetResult<Prisma.$RoomActivityPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more RoomActivities.
   * @param {RoomActivityDeleteManyArgs} args - Arguments to filter RoomActivities to delete.
   * @example
   * // Delete a few RoomActivities
   * const { count } = await prisma.roomActivity.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends RoomActivityDeleteManyArgs>(args?: Prisma.SelectSubset<T, RoomActivityDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more RoomActivities.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {RoomActivityUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many RoomActivities
   * const roomActivity = await prisma.roomActivity.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends RoomActivityUpdateManyArgs>(args: Prisma.SelectSubset<T, RoomActivityUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more RoomActivities and returns the data updated in the database.
   * @param {RoomActivityUpdateManyAndReturnArgs} args - Arguments to update many RoomActivities.
   * @example
   * // Update many RoomActivities
   * const roomActivity = await prisma.roomActivity.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more RoomActivities and only return the `id`
   * const roomActivityWithIdOnly = await prisma.roomActivity.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends RoomActivityUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, RoomActivityUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$RoomActivityPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one RoomActivity.
   * @param {RoomActivityUpsertArgs} args - Arguments to update or create a RoomActivity.
   * @example
   * // Update or create a RoomActivity
   * const roomActivity = await prisma.roomActivity.upsert({
   *   create: {
   *     // ... data to create a RoomActivity
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the RoomActivity we want to update
   *   }
   * })
   */
  upsert<T extends RoomActivityUpsertArgs>(args: Prisma.SelectSubset<T, RoomActivityUpsertArgs<ExtArgs>>): Prisma.Prisma__RoomActivityClient<runtime.Types.Result.GetResult<Prisma.$RoomActivityPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of RoomActivities.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {RoomActivityCountArgs} args - Arguments to filter RoomActivities to count.
   * @example
   * // Count the number of RoomActivities
   * const count = await prisma.roomActivity.count({
   *   where: {
   *     // ... the filter for the RoomActivities we want to count
   *   }
   * })
  **/
  count<T extends RoomActivityCountArgs>(
    args?: Prisma.Subset<T, RoomActivityCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], RoomActivityCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a RoomActivity.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {RoomActivityAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends RoomActivityAggregateArgs>(args: Prisma.Subset<T, RoomActivityAggregateArgs>): Prisma.PrismaPromise<GetRoomActivityAggregateType<T>>

  /**
   * Group by RoomActivity.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {RoomActivityGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends RoomActivityGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: RoomActivityGroupByArgs['orderBy'] }
      : { orderBy?: RoomActivityGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, RoomActivityGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetRoomActivityGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the RoomActivity model
 */
readonly fields: RoomActivityFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for RoomActivity.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__RoomActivityClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the RoomActivity model
 */
export interface RoomActivityFieldRefs {
  readonly id: Prisma.FieldRef<"RoomActivity", 'String'>
  readonly roomId: Prisma.FieldRef<"RoomActivity", 'String'>
  readonly eventType: Prisma.FieldRef<"RoomActivity", 'String'>
  readonly participantId: Prisma.FieldRef<"RoomActivity", 'String'>
  readonly timestamp: Prisma.FieldRef<"RoomActivity", 'DateTime'>
  readonly metadata: Prisma.FieldRef<"RoomActivity", 'Json'>
}
    

// Custom InputTypes
/**
 * RoomActivity findUnique
 */
export type RoomActivityFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the RoomActivity
   */
  select?: Prisma.RoomActivitySelect<ExtArgs> | null
  /**
   * Omit specific fields from the RoomActivity
   */
  omit?: Prisma.RoomActivityOmit<ExtArgs> | null
  /**
   * Filter, which RoomActivity to fetch.
   */
  where: Prisma.RoomActivityWhereUniqueInput
}

/**
 * RoomActivity findUniqueOrThrow
 */
export type RoomActivityFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the RoomActivity
   */
  select?: Prisma.RoomActivitySelect<ExtArgs> | null
  /**
   * Omit specific fields from the RoomActivity
   */
  omit?: Prisma.RoomActivityOmit<ExtArgs> | null
  /**
   * Filter, which RoomActivity to fetch.
   */
  where: Prisma.RoomActivityWhereUniqueInput
}

/**
 * RoomActivity findFirst
 */
export type RoomActivityFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the RoomActivity
   */
  select?: Prisma.RoomActivitySelect<ExtArgs> | null
  /**
   * Omit specific fields from the RoomActivity
   */
  omit?: Prisma.RoomActivityOmit<ExtArgs> | null
  /**
   * Filter, which RoomActivity to fetch.
   */
  where?: Prisma.RoomActivityWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of RoomActivities to fetch.
   */
  orderBy?: Prisma.RoomActivityOrderByWithRelationInput | Prisma.RoomActivityOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for RoomActivities.
   */
  cursor?: Prisma.RoomActivityWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` RoomActivities from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` RoomActivities.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of RoomActivities.
   */
  distinct?: Prisma.RoomActivityScalarFieldEnum | Prisma.RoomActivityScalarFieldEnum[]
}

/**
 * RoomActivity findFirstOrThrow
 */
export type RoomActivityFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the RoomActivity
   */
  select?: Prisma.RoomActivitySelect<ExtArgs> | null
  /**
   * Omit specific fields from the RoomActivity
   */
  omit?: Prisma.RoomActivityOmit<ExtArgs> | null
  /**
   * Filter, which RoomActivity to fetch.
   */
  where?: Prisma.RoomActivityWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of RoomActivities to fetch.
   */
  orderBy?: Prisma.RoomActivityOrderByWithRelationInput | Prisma.RoomActivityOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for RoomActivities.
   */
  cursor?: Prisma.RoomActivityWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` RoomActivities from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` RoomActivities.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of RoomActivities.
   */
  distinct?: Prisma.RoomActivityScalarFieldEnum | Prisma.RoomActivityScalarFieldEnum[]
}

/**
 * RoomActivity findMany
 */
export type RoomActivityFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the RoomActivity
   */
  select?: Prisma.RoomActivitySelect<ExtArgs> | null
  /**
   * Omit specific fields from the RoomActivity
   */
  omit?: Prisma.RoomActivityOmit<ExtArgs> | null
  /**
   * Filter, which RoomActivities to fetch.
   */
  where?: Prisma.RoomActivityWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of RoomActivities to fetch.
   */
  orderBy?: Prisma.RoomActivityOrderByWithRelationInput | Prisma.RoomActivityOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing RoomActivities.
   */
  cursor?: Prisma.RoomActivityWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` RoomActivities from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` RoomActivities.
   */
  skip?: number
  distinct?: Prisma.RoomActivityScalarFieldEnum | Prisma.RoomActivityScalarFieldEnum[]
}

/**
 * RoomActivity create
 */
export type RoomActivityCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the RoomActivity
   */
  select?: Prisma.RoomActivitySelect<ExtArgs> | null
  /**
   * Omit specific fields from the RoomActivity
   */
  omit?: Prisma.RoomActivityOmit<ExtArgs> | null
  /**
   * The data needed to create a RoomActivity.
   */
  data: Prisma.XOR<Prisma.RoomActivityCreateInput, Prisma.RoomActivityUncheckedCreateInput>
}

/**
 * RoomActivity createMany
 */
export type RoomActivityCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many RoomActivities.
   */
  data: Prisma.RoomActivityCreateManyInput | Prisma.RoomActivityCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * RoomActivity createManyAndReturn
 */
export type RoomActivityCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the RoomActivity
   */
  select?: Prisma.RoomActivitySelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the RoomActivity
   */
  omit?: Prisma.RoomActivityOmit<ExtArgs> | null
  /**
   * The data used to create many RoomActivities.
   */
  data: Prisma.RoomActivityCreateManyInput | Prisma.RoomActivityCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * RoomActivity update
 */
export type RoomActivityUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the RoomActivity
   */
  select?: Prisma.RoomActivitySelect<ExtArgs> | null
  /**
   * Omit specific fields from the RoomActivity
   */
  omit?: Prisma.RoomActivityOmit<ExtArgs> | null
  /**
   * The data needed to update a RoomActivity.
   */
  data: Prisma.XOR<Prisma.RoomActivityUpdateInput, Prisma.RoomActivityUncheckedUpdateInput>
  /**
   * Choose, which RoomActivity to update.
   */
  where: Prisma.RoomActivityWhereUniqueInput
}

/**
 * RoomActivity updateMany
 */
export type RoomActivityUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update RoomActivities.
   */
  data: Prisma.XOR<Prisma.RoomActivityUpdateManyMutationInput, Prisma.RoomActivityUncheckedUpdateManyInput>
  /**
   * Filter which RoomActivities to update
   */
  where?: Prisma.RoomActivityWhereInput
  /**
   * Limit how many RoomActivities to update.
   */
  limit?: number
}

/**
 * RoomActivity updateManyAndReturn
 */
export type RoomActivityUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the RoomActivity
   */
  select?: Prisma.RoomActivitySelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the RoomActivity
   */
  omit?: Prisma.RoomActivityOmit<ExtArgs> | null
  /**
   * The data used to update RoomActivities.
   */
  data: Prisma.XOR<Prisma.RoomActivityUpdateManyMutationInput, Prisma.RoomActivityUncheckedUpdateManyInput>
  /**
   * Filter which RoomActivities to update
   */
  where?: Prisma.RoomActivityWhereInput
  /**
   * Limit how many RoomActivities to update.
   */
  limit?: number
}

/**
 * RoomActivity upsert
 */
export type RoomActivityUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the RoomActivity
   */
  select?: Prisma.RoomActivitySelect<ExtArgs> | null
  /**
   * Omit specific fields from the RoomActivity
   */
  omit?: Prisma.RoomActivityOmit<ExtArgs> | null
  /**
   * The filter to search for the RoomActivity to update in case it exists.
   */
  where: Prisma.RoomActivityWhereUniqueInput
  /**
   * In case the RoomActivity found by the `where` argument doesn't exist, create a new RoomActivity with this data.
   */
  create: Prisma.XOR<Prisma.RoomActivityCreateInput, Prisma.RoomActivityUncheckedCreateInput>
  /**
   * In case the RoomActivity was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.RoomActivityUpdateInput, Prisma.RoomActivityUncheckedUpdateInput>
}

/**
 * RoomActivity delete
 */
export type RoomActivityDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the RoomActivity
   */
  select?: Prisma.RoomActivitySelect<ExtArgs> | null
  /**
   * Omit specific fields from the RoomActivity
   */
  omit?: Prisma.RoomActivityOmit<ExtArgs> | null
  /**
   * Filter which RoomActivity to delete.
   */
  where: Prisma.RoomActivityWhereUniqueInput
}

/**
 * RoomActivity deleteMany
 */
export type RoomActivityDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which RoomActivities to delete
   */
  where?: Prisma.RoomActivityWhereInput
  /**
   * Limit how many RoomActivities to delete.
   */
  limit?: number
}

/**
 * RoomActivity without action
 */
export type RoomActivityDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the RoomActivity
   */
  select?: Prisma.RoomActivitySelect<ExtArgs> | null
  /**
   * Omit specific fields from the RoomActivity
   */
  omit?: Prisma.RoomActivityOmit<ExtArgs> | null
}
