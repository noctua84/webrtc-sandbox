
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `SystemEvent` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model SystemEvent
 * 
 */
export type SystemEventModel = runtime.Types.Result.DefaultSelection<Prisma.$SystemEventPayload>

export type AggregateSystemEvent = {
  _count: SystemEventCountAggregateOutputType | null
  _min: SystemEventMinAggregateOutputType | null
  _max: SystemEventMaxAggregateOutputType | null
}

export type SystemEventMinAggregateOutputType = {
  id: string | null
  eventType: string | null
  severity: string | null
  message: string | null
  timestamp: Date | null
  resolved: boolean | null
  resolvedAt: Date | null
}

export type SystemEventMaxAggregateOutputType = {
  id: string | null
  eventType: string | null
  severity: string | null
  message: string | null
  timestamp: Date | null
  resolved: boolean | null
  resolvedAt: Date | null
}

export type SystemEventCountAggregateOutputType = {
  id: number
  eventType: number
  severity: number
  message: number
  metadata: number
  timestamp: number
  resolved: number
  resolvedAt: number
  _all: number
}


export type SystemEventMinAggregateInputType = {
  id?: true
  eventType?: true
  severity?: true
  message?: true
  timestamp?: true
  resolved?: true
  resolvedAt?: true
}

export type SystemEventMaxAggregateInputType = {
  id?: true
  eventType?: true
  severity?: true
  message?: true
  timestamp?: true
  resolved?: true
  resolvedAt?: true
}

export type SystemEventCountAggregateInputType = {
  id?: true
  eventType?: true
  severity?: true
  message?: true
  metadata?: true
  timestamp?: true
  resolved?: true
  resolvedAt?: true
  _all?: true
}

export type SystemEventAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which SystemEvent to aggregate.
   */
  where?: Prisma.SystemEventWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of SystemEvents to fetch.
   */
  orderBy?: Prisma.SystemEventOrderByWithRelationInput | Prisma.SystemEventOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.SystemEventWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` SystemEvents from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` SystemEvents.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned SystemEvents
  **/
  _count?: true | SystemEventCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: SystemEventMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: SystemEventMaxAggregateInputType
}

export type GetSystemEventAggregateType<T extends SystemEventAggregateArgs> = {
      [P in keyof T & keyof AggregateSystemEvent]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateSystemEvent[P]>
    : Prisma.GetScalarType<T[P], AggregateSystemEvent[P]>
}




export type SystemEventGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.SystemEventWhereInput
  orderBy?: Prisma.SystemEventOrderByWithAggregationInput | Prisma.SystemEventOrderByWithAggregationInput[]
  by: Prisma.SystemEventScalarFieldEnum[] | Prisma.SystemEventScalarFieldEnum
  having?: Prisma.SystemEventScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: SystemEventCountAggregateInputType | true
  _min?: SystemEventMinAggregateInputType
  _max?: SystemEventMaxAggregateInputType
}

export type SystemEventGroupByOutputType = {
  id: string
  eventType: string
  severity: string
  message: string
  metadata: runtime.JsonValue | null
  timestamp: Date
  resolved: boolean
  resolvedAt: Date | null
  _count: SystemEventCountAggregateOutputType | null
  _min: SystemEventMinAggregateOutputType | null
  _max: SystemEventMaxAggregateOutputType | null
}

type GetSystemEventGroupByPayload<T extends SystemEventGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<SystemEventGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof SystemEventGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], SystemEventGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], SystemEventGroupByOutputType[P]>
      }
    >
  > 



export type SystemEventWhereInput = {
  AND?: Prisma.SystemEventWhereInput | Prisma.SystemEventWhereInput[]
  OR?: Prisma.SystemEventWhereInput[]
  NOT?: Prisma.SystemEventWhereInput | Prisma.SystemEventWhereInput[]
  id?: Prisma.StringFilter<"SystemEvent"> | string
  eventType?: Prisma.StringFilter<"SystemEvent"> | string
  severity?: Prisma.StringFilter<"SystemEvent"> | string
  message?: Prisma.StringFilter<"SystemEvent"> | string
  metadata?: Prisma.JsonNullableFilter<"SystemEvent">
  timestamp?: Prisma.DateTimeFilter<"SystemEvent"> | Date | string
  resolved?: Prisma.BoolFilter<"SystemEvent"> | boolean
  resolvedAt?: Prisma.DateTimeNullableFilter<"SystemEvent"> | Date | string | null
}

export type SystemEventOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  eventType?: Prisma.SortOrder
  severity?: Prisma.SortOrder
  message?: Prisma.SortOrder
  metadata?: Prisma.SortOrderInput | Prisma.SortOrder
  timestamp?: Prisma.SortOrder
  resolved?: Prisma.SortOrder
  resolvedAt?: Prisma.SortOrderInput | Prisma.SortOrder
}

export type SystemEventWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  AND?: Prisma.SystemEventWhereInput | Prisma.SystemEventWhereInput[]
  OR?: Prisma.SystemEventWhereInput[]
  NOT?: Prisma.SystemEventWhereInput | Prisma.SystemEventWhereInput[]
  eventType?: Prisma.StringFilter<"SystemEvent"> | string
  severity?: Prisma.StringFilter<"SystemEvent"> | string
  message?: Prisma.StringFilter<"SystemEvent"> | string
  metadata?: Prisma.JsonNullableFilter<"SystemEvent">
  timestamp?: Prisma.DateTimeFilter<"SystemEvent"> | Date | string
  resolved?: Prisma.BoolFilter<"SystemEvent"> | boolean
  resolvedAt?: Prisma.DateTimeNullableFilter<"SystemEvent"> | Date | string | null
}, "id">

export type SystemEventOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  eventType?: Prisma.SortOrder
  severity?: Prisma.SortOrder
  message?: Prisma.SortOrder
  metadata?: Prisma.SortOrderInput | Prisma.SortOrder
  timestamp?: Prisma.SortOrder
  resolved?: Prisma.SortOrder
  resolvedAt?: Prisma.SortOrderInput | Prisma.SortOrder
  _count?: Prisma.SystemEventCountOrderByAggregateInput
  _max?: Prisma.SystemEventMaxOrderByAggregateInput
  _min?: Prisma.SystemEventMinOrderByAggregateInput
}

export type SystemEventScalarWhereWithAggregatesInput = {
  AND?: Prisma.SystemEventScalarWhereWithAggregatesInput | Prisma.SystemEventScalarWhereWithAggregatesInput[]
  OR?: Prisma.SystemEventScalarWhereWithAggregatesInput[]
  NOT?: Prisma.SystemEventScalarWhereWithAggregatesInput | Prisma.SystemEventScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"SystemEvent"> | string
  eventType?: Prisma.StringWithAggregatesFilter<"SystemEvent"> | string
  severity?: Prisma.StringWithAggregatesFilter<"SystemEvent"> | string
  message?: Prisma.StringWithAggregatesFilter<"SystemEvent"> | string
  metadata?: Prisma.JsonNullableWithAggregatesFilter<"SystemEvent">
  timestamp?: Prisma.DateTimeWithAggregatesFilter<"SystemEvent"> | Date | string
  resolved?: Prisma.BoolWithAggregatesFilter<"SystemEvent"> | boolean
  resolvedAt?: Prisma.DateTimeNullableWithAggregatesFilter<"SystemEvent"> | Date | string | null
}

export type SystemEventCreateInput = {
  id?: string
  eventType: string
  severity: string
  message: string
  metadata?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  timestamp?: Date | string
  resolved?: boolean
  resolvedAt?: Date | string | null
}

export type SystemEventUncheckedCreateInput = {
  id?: string
  eventType: string
  severity: string
  message: string
  metadata?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  timestamp?: Date | string
  resolved?: boolean
  resolvedAt?: Date | string | null
}

export type SystemEventUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  eventType?: Prisma.StringFieldUpdateOperationsInput | string
  severity?: Prisma.StringFieldUpdateOperationsInput | string
  message?: Prisma.StringFieldUpdateOperationsInput | string
  metadata?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  timestamp?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  resolved?: Prisma.BoolFieldUpdateOperationsInput | boolean
  resolvedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
}

export type SystemEventUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  eventType?: Prisma.StringFieldUpdateOperationsInput | string
  severity?: Prisma.StringFieldUpdateOperationsInput | string
  message?: Prisma.StringFieldUpdateOperationsInput | string
  metadata?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  timestamp?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  resolved?: Prisma.BoolFieldUpdateOperationsInput | boolean
  resolvedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
}

export type SystemEventCreateManyInput = {
  id?: string
  eventType: string
  severity: string
  message: string
  metadata?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  timestamp?: Date | string
  resolved?: boolean
  resolvedAt?: Date | string | null
}

export type SystemEventUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  eventType?: Prisma.StringFieldUpdateOperationsInput | string
  severity?: Prisma.StringFieldUpdateOperationsInput | string
  message?: Prisma.StringFieldUpdateOperationsInput | string
  metadata?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  timestamp?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  resolved?: Prisma.BoolFieldUpdateOperationsInput | boolean
  resolvedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
}

export type SystemEventUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  eventType?: Prisma.StringFieldUpdateOperationsInput | string
  severity?: Prisma.StringFieldUpdateOperationsInput | string
  message?: Prisma.StringFieldUpdateOperationsInput | string
  metadata?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  timestamp?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  resolved?: Prisma.BoolFieldUpdateOperationsInput | boolean
  resolvedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
}

export type SystemEventCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  eventType?: Prisma.SortOrder
  severity?: Prisma.SortOrder
  message?: Prisma.SortOrder
  metadata?: Prisma.SortOrder
  timestamp?: Prisma.SortOrder
  resolved?: Prisma.SortOrder
  resolvedAt?: Prisma.SortOrder
}

export type SystemEventMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  eventType?: Prisma.SortOrder
  severity?: Prisma.SortOrder
  message?: Prisma.SortOrder
  timestamp?: Prisma.SortOrder
  resolved?: Prisma.SortOrder
  resolvedAt?: Prisma.SortOrder
}

export type SystemEventMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  eventType?: Prisma.SortOrder
  severity?: Prisma.SortOrder
  message?: Prisma.SortOrder
  timestamp?: Prisma.SortOrder
  resolved?: Prisma.SortOrder
  resolvedAt?: Prisma.SortOrder
}



export type SystemEventSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  eventType?: boolean
  severity?: boolean
  message?: boolean
  metadata?: boolean
  timestamp?: boolean
  resolved?: boolean
  resolvedAt?: boolean
}, ExtArgs["result"]["systemEvent"]>

export type SystemEventSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  eventType?: boolean
  severity?: boolean
  message?: boolean
  metadata?: boolean
  timestamp?: boolean
  resolved?: boolean
  resolvedAt?: boolean
}, ExtArgs["result"]["systemEvent"]>

export type SystemEventSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  eventType?: boolean
  severity?: boolean
  message?: boolean
  metadata?: boolean
  timestamp?: boolean
  resolved?: boolean
  resolvedAt?: boolean
}, ExtArgs["result"]["systemEvent"]>

export type SystemEventSelectScalar = {
  id?: boolean
  eventType?: boolean
  severity?: boolean
  message?: boolean
  metadata?: boolean
  timestamp?: boolean
  resolved?: boolean
  resolvedAt?: boolean
}

export type SystemEventOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "eventType" | "severity" | "message" | "metadata" | "timestamp" | "resolved" | "resolvedAt", ExtArgs["result"]["systemEvent"]>

export type $SystemEventPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "SystemEvent"
  objects: {}
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    eventType: string
    severity: string
    message: string
    metadata: runtime.JsonValue | null
    timestamp: Date
    resolved: boolean
    resolvedAt: Date | null
  }, ExtArgs["result"]["systemEvent"]>
  composites: {}
}

export type SystemEventGetPayload<S extends boolean | null | undefined | SystemEventDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$SystemEventPayload, S>

export type SystemEventCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<SystemEventFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: SystemEventCountAggregateInputType | true
  }

export interface SystemEventDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['SystemEvent'], meta: { name: 'SystemEvent' } }
  /**
   * Find zero or one SystemEvent that matches the filter.
   * @param {SystemEventFindUniqueArgs} args - Arguments to find a SystemEvent
   * @example
   * // Get one SystemEvent
   * const systemEvent = await prisma.systemEvent.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends SystemEventFindUniqueArgs>(args: Prisma.SelectSubset<T, SystemEventFindUniqueArgs<ExtArgs>>): Prisma.Prisma__SystemEventClient<runtime.Types.Result.GetResult<Prisma.$SystemEventPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one SystemEvent that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {SystemEventFindUniqueOrThrowArgs} args - Arguments to find a SystemEvent
   * @example
   * // Get one SystemEvent
   * const systemEvent = await prisma.systemEvent.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends SystemEventFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, SystemEventFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__SystemEventClient<runtime.Types.Result.GetResult<Prisma.$SystemEventPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first SystemEvent that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {SystemEventFindFirstArgs} args - Arguments to find a SystemEvent
   * @example
   * // Get one SystemEvent
   * const systemEvent = await prisma.systemEvent.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends SystemEventFindFirstArgs>(args?: Prisma.SelectSubset<T, SystemEventFindFirstArgs<ExtArgs>>): Prisma.Prisma__SystemEventClient<runtime.Types.Result.GetResult<Prisma.$SystemEventPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first SystemEvent that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {SystemEventFindFirstOrThrowArgs} args - Arguments to find a SystemEvent
   * @example
   * // Get one SystemEvent
   * const systemEvent = await prisma.systemEvent.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends SystemEventFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, SystemEventFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__SystemEventClient<runtime.Types.Result.GetResult<Prisma.$SystemEventPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more SystemEvents that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {SystemEventFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all SystemEvents
   * const systemEvents = await prisma.systemEvent.findMany()
   * 
   * // Get first 10 SystemEvents
   * const systemEvents = await prisma.systemEvent.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const systemEventWithIdOnly = await prisma.systemEvent.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends SystemEventFindManyArgs>(args?: Prisma.SelectSubset<T, SystemEventFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$SystemEventPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a SystemEvent.
   * @param {SystemEventCreateArgs} args - Arguments to create a SystemEvent.
   * @example
   * // Create one SystemEvent
   * const SystemEvent = await prisma.systemEvent.create({
   *   data: {
   *     // ... data to create a SystemEvent
   *   }
   * })
   * 
   */
  create<T extends SystemEventCreateArgs>(args: Prisma.SelectSubset<T, SystemEventCreateArgs<ExtArgs>>): Prisma.Prisma__SystemEventClient<runtime.Types.Result.GetResult<Prisma.$SystemEventPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many SystemEvents.
   * @param {SystemEventCreateManyArgs} args - Arguments to create many SystemEvents.
   * @example
   * // Create many SystemEvents
   * const systemEvent = await prisma.systemEvent.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends SystemEventCreateManyArgs>(args?: Prisma.SelectSubset<T, SystemEventCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many SystemEvents and returns the data saved in the database.
   * @param {SystemEventCreateManyAndReturnArgs} args - Arguments to create many SystemEvents.
   * @example
   * // Create many SystemEvents
   * const systemEvent = await prisma.systemEvent.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many SystemEvents and only return the `id`
   * const systemEventWithIdOnly = await prisma.systemEvent.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends SystemEventCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, SystemEventCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$SystemEventPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a SystemEvent.
   * @param {SystemEventDeleteArgs} args - Arguments to delete one SystemEvent.
   * @example
   * // Delete one SystemEvent
   * const SystemEvent = await prisma.systemEvent.delete({
   *   where: {
   *     // ... filter to delete one SystemEvent
   *   }
   * })
   * 
   */
  delete<T extends SystemEventDeleteArgs>(args: Prisma.SelectSubset<T, SystemEventDeleteArgs<ExtArgs>>): Prisma.Prisma__SystemEventClient<runtime.Types.Result.GetResult<Prisma.$SystemEventPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one SystemEvent.
   * @param {SystemEventUpdateArgs} args - Arguments to update one SystemEvent.
   * @example
   * // Update one SystemEvent
   * const systemEvent = await prisma.systemEvent.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends SystemEventUpdateArgs>(args: Prisma.SelectSubset<T, SystemEventUpdateArgs<ExtArgs>>): Prisma.Prisma__SystemEventClient<runtime.Types.Result.GetResult<Prisma.$SystemEventPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more SystemEvents.
   * @param {SystemEventDeleteManyArgs} args - Arguments to filter SystemEvents to delete.
   * @example
   * // Delete a few SystemEvents
   * const { count } = await prisma.systemEvent.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends SystemEventDeleteManyArgs>(args?: Prisma.SelectSubset<T, SystemEventDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more SystemEvents.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {SystemEventUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many SystemEvents
   * const systemEvent = await prisma.systemEvent.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends SystemEventUpdateManyArgs>(args: Prisma.SelectSubset<T, SystemEventUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more SystemEvents and returns the data updated in the database.
   * @param {SystemEventUpdateManyAndReturnArgs} args - Arguments to update many SystemEvents.
   * @example
   * // Update many SystemEvents
   * const systemEvent = await prisma.systemEvent.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more SystemEvents and only return the `id`
   * const systemEventWithIdOnly = await prisma.systemEvent.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends SystemEventUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, SystemEventUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$SystemEventPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one SystemEvent.
   * @param {SystemEventUpsertArgs} args - Arguments to update or create a SystemEvent.
   * @example
   * // Update or create a SystemEvent
   * const systemEvent = await prisma.systemEvent.upsert({
   *   create: {
   *     // ... data to create a SystemEvent
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the SystemEvent we want to update
   *   }
   * })
   */
  upsert<T extends SystemEventUpsertArgs>(args: Prisma.SelectSubset<T, SystemEventUpsertArgs<ExtArgs>>): Prisma.Prisma__SystemEventClient<runtime.Types.Result.GetResult<Prisma.$SystemEventPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of SystemEvents.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {SystemEventCountArgs} args - Arguments to filter SystemEvents to count.
   * @example
   * // Count the number of SystemEvents
   * const count = await prisma.systemEvent.count({
   *   where: {
   *     // ... the filter for the SystemEvents we want to count
   *   }
   * })
  **/
  count<T extends SystemEventCountArgs>(
    args?: Prisma.Subset<T, SystemEventCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], SystemEventCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a SystemEvent.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {SystemEventAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends SystemEventAggregateArgs>(args: Prisma.Subset<T, SystemEventAggregateArgs>): Prisma.PrismaPromise<GetSystemEventAggregateType<T>>

  /**
   * Group by SystemEvent.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {SystemEventGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends SystemEventGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: SystemEventGroupByArgs['orderBy'] }
      : { orderBy?: SystemEventGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, SystemEventGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSystemEventGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the SystemEvent model
 */
readonly fields: SystemEventFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for SystemEvent.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__SystemEventClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the SystemEvent model
 */
export interface SystemEventFieldRefs {
  readonly id: Prisma.FieldRef<"SystemEvent", 'String'>
  readonly eventType: Prisma.FieldRef<"SystemEvent", 'String'>
  readonly severity: Prisma.FieldRef<"SystemEvent", 'String'>
  readonly message: Prisma.FieldRef<"SystemEvent", 'String'>
  readonly metadata: Prisma.FieldRef<"SystemEvent", 'Json'>
  readonly timestamp: Prisma.FieldRef<"SystemEvent", 'DateTime'>
  readonly resolved: Prisma.FieldRef<"SystemEvent", 'Boolean'>
  readonly resolvedAt: Prisma.FieldRef<"SystemEvent", 'DateTime'>
}
    

// Custom InputTypes
/**
 * SystemEvent findUnique
 */
export type SystemEventFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the SystemEvent
   */
  select?: Prisma.SystemEventSelect<ExtArgs> | null
  /**
   * Omit specific fields from the SystemEvent
   */
  omit?: Prisma.SystemEventOmit<ExtArgs> | null
  /**
   * Filter, which SystemEvent to fetch.
   */
  where: Prisma.SystemEventWhereUniqueInput
}

/**
 * SystemEvent findUniqueOrThrow
 */
export type SystemEventFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the SystemEvent
   */
  select?: Prisma.SystemEventSelect<ExtArgs> | null
  /**
   * Omit specific fields from the SystemEvent
   */
  omit?: Prisma.SystemEventOmit<ExtArgs> | null
  /**
   * Filter, which SystemEvent to fetch.
   */
  where: Prisma.SystemEventWhereUniqueInput
}

/**
 * SystemEvent findFirst
 */
export type SystemEventFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the SystemEvent
   */
  select?: Prisma.SystemEventSelect<ExtArgs> | null
  /**
   * Omit specific fields from the SystemEvent
   */
  omit?: Prisma.SystemEventOmit<ExtArgs> | null
  /**
   * Filter, which SystemEvent to fetch.
   */
  where?: Prisma.SystemEventWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of SystemEvents to fetch.
   */
  orderBy?: Prisma.SystemEventOrderByWithRelationInput | Prisma.SystemEventOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for SystemEvents.
   */
  cursor?: Prisma.SystemEventWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` SystemEvents from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` SystemEvents.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of SystemEvents.
   */
  distinct?: Prisma.SystemEventScalarFieldEnum | Prisma.SystemEventScalarFieldEnum[]
}

/**
 * SystemEvent findFirstOrThrow
 */
export type SystemEventFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the SystemEvent
   */
  select?: Prisma.SystemEventSelect<ExtArgs> | null
  /**
   * Omit specific fields from the SystemEvent
   */
  omit?: Prisma.SystemEventOmit<ExtArgs> | null
  /**
   * Filter, which SystemEvent to fetch.
   */
  where?: Prisma.SystemEventWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of SystemEvents to fetch.
   */
  orderBy?: Prisma.SystemEventOrderByWithRelationInput | Prisma.SystemEventOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for SystemEvents.
   */
  cursor?: Prisma.SystemEventWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` SystemEvents from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` SystemEvents.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of SystemEvents.
   */
  distinct?: Prisma.SystemEventScalarFieldEnum | Prisma.SystemEventScalarFieldEnum[]
}

/**
 * SystemEvent findMany
 */
export type SystemEventFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the SystemEvent
   */
  select?: Prisma.SystemEventSelect<ExtArgs> | null
  /**
   * Omit specific fields from the SystemEvent
   */
  omit?: Prisma.SystemEventOmit<ExtArgs> | null
  /**
   * Filter, which SystemEvents to fetch.
   */
  where?: Prisma.SystemEventWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of SystemEvents to fetch.
   */
  orderBy?: Prisma.SystemEventOrderByWithRelationInput | Prisma.SystemEventOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing SystemEvents.
   */
  cursor?: Prisma.SystemEventWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` SystemEvents from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` SystemEvents.
   */
  skip?: number
  distinct?: Prisma.SystemEventScalarFieldEnum | Prisma.SystemEventScalarFieldEnum[]
}

/**
 * SystemEvent create
 */
export type SystemEventCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the SystemEvent
   */
  select?: Prisma.SystemEventSelect<ExtArgs> | null
  /**
   * Omit specific fields from the SystemEvent
   */
  omit?: Prisma.SystemEventOmit<ExtArgs> | null
  /**
   * The data needed to create a SystemEvent.
   */
  data: Prisma.XOR<Prisma.SystemEventCreateInput, Prisma.SystemEventUncheckedCreateInput>
}

/**
 * SystemEvent createMany
 */
export type SystemEventCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many SystemEvents.
   */
  data: Prisma.SystemEventCreateManyInput | Prisma.SystemEventCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * SystemEvent createManyAndReturn
 */
export type SystemEventCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the SystemEvent
   */
  select?: Prisma.SystemEventSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the SystemEvent
   */
  omit?: Prisma.SystemEventOmit<ExtArgs> | null
  /**
   * The data used to create many SystemEvents.
   */
  data: Prisma.SystemEventCreateManyInput | Prisma.SystemEventCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * SystemEvent update
 */
export type SystemEventUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the SystemEvent
   */
  select?: Prisma.SystemEventSelect<ExtArgs> | null
  /**
   * Omit specific fields from the SystemEvent
   */
  omit?: Prisma.SystemEventOmit<ExtArgs> | null
  /**
   * The data needed to update a SystemEvent.
   */
  data: Prisma.XOR<Prisma.SystemEventUpdateInput, Prisma.SystemEventUncheckedUpdateInput>
  /**
   * Choose, which SystemEvent to update.
   */
  where: Prisma.SystemEventWhereUniqueInput
}

/**
 * SystemEvent updateMany
 */
export type SystemEventUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update SystemEvents.
   */
  data: Prisma.XOR<Prisma.SystemEventUpdateManyMutationInput, Prisma.SystemEventUncheckedUpdateManyInput>
  /**
   * Filter which SystemEvents to update
   */
  where?: Prisma.SystemEventWhereInput
  /**
   * Limit how many SystemEvents to update.
   */
  limit?: number
}

/**
 * SystemEvent updateManyAndReturn
 */
export type SystemEventUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the SystemEvent
   */
  select?: Prisma.SystemEventSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the SystemEvent
   */
  omit?: Prisma.SystemEventOmit<ExtArgs> | null
  /**
   * The data used to update SystemEvents.
   */
  data: Prisma.XOR<Prisma.SystemEventUpdateManyMutationInput, Prisma.SystemEventUncheckedUpdateManyInput>
  /**
   * Filter which SystemEvents to update
   */
  where?: Prisma.SystemEventWhereInput
  /**
   * Limit how many SystemEvents to update.
   */
  limit?: number
}

/**
 * SystemEvent upsert
 */
export type SystemEventUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the SystemEvent
   */
  select?: Prisma.SystemEventSelect<ExtArgs> | null
  /**
   * Omit specific fields from the SystemEvent
   */
  omit?: Prisma.SystemEventOmit<ExtArgs> | null
  /**
   * The filter to search for the SystemEvent to update in case it exists.
   */
  where: Prisma.SystemEventWhereUniqueInput
  /**
   * In case the SystemEvent found by the `where` argument doesn't exist, create a new SystemEvent with this data.
   */
  create: Prisma.XOR<Prisma.SystemEventCreateInput, Prisma.SystemEventUncheckedCreateInput>
  /**
   * In case the SystemEvent was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.SystemEventUpdateInput, Prisma.SystemEventUncheckedUpdateInput>
}

/**
 * SystemEvent delete
 */
export type SystemEventDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the SystemEvent
   */
  select?: Prisma.SystemEventSelect<ExtArgs> | null
  /**
   * Omit specific fields from the SystemEvent
   */
  omit?: Prisma.SystemEventOmit<ExtArgs> | null
  /**
   * Filter which SystemEvent to delete.
   */
  where: Prisma.SystemEventWhereUniqueInput
}

/**
 * SystemEvent deleteMany
 */
export type SystemEventDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which SystemEvents to delete
   */
  where?: Prisma.SystemEventWhereInput
  /**
   * Limit how many SystemEvents to delete.
   */
  limit?: number
}

/**
 * SystemEvent without action
 */
export type SystemEventDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the SystemEvent
   */
  select?: Prisma.SystemEventSelect<ExtArgs> | null
  /**
   * Omit specific fields from the SystemEvent
   */
  omit?: Prisma.SystemEventOmit<ExtArgs> | null
}
