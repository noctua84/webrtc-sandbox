
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `ChatMessageHistory` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model ChatMessageHistory
 * 
 */
export type ChatMessageHistoryModel = runtime.Types.Result.DefaultSelection<Prisma.$ChatMessageHistoryPayload>

export type AggregateChatMessageHistory = {
  _count: ChatMessageHistoryCountAggregateOutputType | null
  _min: ChatMessageHistoryMinAggregateOutputType | null
  _max: ChatMessageHistoryMaxAggregateOutputType | null
}

export type ChatMessageHistoryMinAggregateOutputType = {
  id: string | null
  messageId: string | null
  roomId: string | null
  senderId: string | null
  actionType: $Enums.MessageActionType | null
  actionTimestamp: Date | null
  actionBy: string | null
  previousContent: string | null
  newContent: string | null
  actionReason: string | null
  ipAddress: string | null
  contentHash: string | null
}

export type ChatMessageHistoryMaxAggregateOutputType = {
  id: string | null
  messageId: string | null
  roomId: string | null
  senderId: string | null
  actionType: $Enums.MessageActionType | null
  actionTimestamp: Date | null
  actionBy: string | null
  previousContent: string | null
  newContent: string | null
  actionReason: string | null
  ipAddress: string | null
  contentHash: string | null
}

export type ChatMessageHistoryCountAggregateOutputType = {
  id: number
  messageId: number
  roomId: number
  senderId: number
  actionType: number
  actionTimestamp: number
  actionBy: number
  previousContent: number
  newContent: number
  actionReason: number
  ipAddress: number
  contentHash: number
  _all: number
}


export type ChatMessageHistoryMinAggregateInputType = {
  id?: true
  messageId?: true
  roomId?: true
  senderId?: true
  actionType?: true
  actionTimestamp?: true
  actionBy?: true
  previousContent?: true
  newContent?: true
  actionReason?: true
  ipAddress?: true
  contentHash?: true
}

export type ChatMessageHistoryMaxAggregateInputType = {
  id?: true
  messageId?: true
  roomId?: true
  senderId?: true
  actionType?: true
  actionTimestamp?: true
  actionBy?: true
  previousContent?: true
  newContent?: true
  actionReason?: true
  ipAddress?: true
  contentHash?: true
}

export type ChatMessageHistoryCountAggregateInputType = {
  id?: true
  messageId?: true
  roomId?: true
  senderId?: true
  actionType?: true
  actionTimestamp?: true
  actionBy?: true
  previousContent?: true
  newContent?: true
  actionReason?: true
  ipAddress?: true
  contentHash?: true
  _all?: true
}

export type ChatMessageHistoryAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which ChatMessageHistory to aggregate.
   */
  where?: Prisma.ChatMessageHistoryWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of ChatMessageHistories to fetch.
   */
  orderBy?: Prisma.ChatMessageHistoryOrderByWithRelationInput | Prisma.ChatMessageHistoryOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.ChatMessageHistoryWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` ChatMessageHistories from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` ChatMessageHistories.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned ChatMessageHistories
  **/
  _count?: true | ChatMessageHistoryCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: ChatMessageHistoryMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: ChatMessageHistoryMaxAggregateInputType
}

export type GetChatMessageHistoryAggregateType<T extends ChatMessageHistoryAggregateArgs> = {
      [P in keyof T & keyof AggregateChatMessageHistory]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateChatMessageHistory[P]>
    : Prisma.GetScalarType<T[P], AggregateChatMessageHistory[P]>
}




export type ChatMessageHistoryGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.ChatMessageHistoryWhereInput
  orderBy?: Prisma.ChatMessageHistoryOrderByWithAggregationInput | Prisma.ChatMessageHistoryOrderByWithAggregationInput[]
  by: Prisma.ChatMessageHistoryScalarFieldEnum[] | Prisma.ChatMessageHistoryScalarFieldEnum
  having?: Prisma.ChatMessageHistoryScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: ChatMessageHistoryCountAggregateInputType | true
  _min?: ChatMessageHistoryMinAggregateInputType
  _max?: ChatMessageHistoryMaxAggregateInputType
}

export type ChatMessageHistoryGroupByOutputType = {
  id: string
  messageId: string
  roomId: string
  senderId: string
  actionType: $Enums.MessageActionType
  actionTimestamp: Date
  actionBy: string
  previousContent: string | null
  newContent: string | null
  actionReason: string | null
  ipAddress: string | null
  contentHash: string | null
  _count: ChatMessageHistoryCountAggregateOutputType | null
  _min: ChatMessageHistoryMinAggregateOutputType | null
  _max: ChatMessageHistoryMaxAggregateOutputType | null
}

type GetChatMessageHistoryGroupByPayload<T extends ChatMessageHistoryGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<ChatMessageHistoryGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof ChatMessageHistoryGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], ChatMessageHistoryGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], ChatMessageHistoryGroupByOutputType[P]>
      }
    >
  > 



export type ChatMessageHistoryWhereInput = {
  AND?: Prisma.ChatMessageHistoryWhereInput | Prisma.ChatMessageHistoryWhereInput[]
  OR?: Prisma.ChatMessageHistoryWhereInput[]
  NOT?: Prisma.ChatMessageHistoryWhereInput | Prisma.ChatMessageHistoryWhereInput[]
  id?: Prisma.StringFilter<"ChatMessageHistory"> | string
  messageId?: Prisma.StringFilter<"ChatMessageHistory"> | string
  roomId?: Prisma.StringFilter<"ChatMessageHistory"> | string
  senderId?: Prisma.StringFilter<"ChatMessageHistory"> | string
  actionType?: Prisma.EnumMessageActionTypeFilter<"ChatMessageHistory"> | $Enums.MessageActionType
  actionTimestamp?: Prisma.DateTimeFilter<"ChatMessageHistory"> | Date | string
  actionBy?: Prisma.StringFilter<"ChatMessageHistory"> | string
  previousContent?: Prisma.StringNullableFilter<"ChatMessageHistory"> | string | null
  newContent?: Prisma.StringNullableFilter<"ChatMessageHistory"> | string | null
  actionReason?: Prisma.StringNullableFilter<"ChatMessageHistory"> | string | null
  ipAddress?: Prisma.StringNullableFilter<"ChatMessageHistory"> | string | null
  contentHash?: Prisma.StringNullableFilter<"ChatMessageHistory"> | string | null
  message?: Prisma.XOR<Prisma.ChatMessageScalarRelationFilter, Prisma.ChatMessageWhereInput>
}

export type ChatMessageHistoryOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  messageId?: Prisma.SortOrder
  roomId?: Prisma.SortOrder
  senderId?: Prisma.SortOrder
  actionType?: Prisma.SortOrder
  actionTimestamp?: Prisma.SortOrder
  actionBy?: Prisma.SortOrder
  previousContent?: Prisma.SortOrderInput | Prisma.SortOrder
  newContent?: Prisma.SortOrderInput | Prisma.SortOrder
  actionReason?: Prisma.SortOrderInput | Prisma.SortOrder
  ipAddress?: Prisma.SortOrderInput | Prisma.SortOrder
  contentHash?: Prisma.SortOrderInput | Prisma.SortOrder
  message?: Prisma.ChatMessageOrderByWithRelationInput
}

export type ChatMessageHistoryWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  AND?: Prisma.ChatMessageHistoryWhereInput | Prisma.ChatMessageHistoryWhereInput[]
  OR?: Prisma.ChatMessageHistoryWhereInput[]
  NOT?: Prisma.ChatMessageHistoryWhereInput | Prisma.ChatMessageHistoryWhereInput[]
  messageId?: Prisma.StringFilter<"ChatMessageHistory"> | string
  roomId?: Prisma.StringFilter<"ChatMessageHistory"> | string
  senderId?: Prisma.StringFilter<"ChatMessageHistory"> | string
  actionType?: Prisma.EnumMessageActionTypeFilter<"ChatMessageHistory"> | $Enums.MessageActionType
  actionTimestamp?: Prisma.DateTimeFilter<"ChatMessageHistory"> | Date | string
  actionBy?: Prisma.StringFilter<"ChatMessageHistory"> | string
  previousContent?: Prisma.StringNullableFilter<"ChatMessageHistory"> | string | null
  newContent?: Prisma.StringNullableFilter<"ChatMessageHistory"> | string | null
  actionReason?: Prisma.StringNullableFilter<"ChatMessageHistory"> | string | null
  ipAddress?: Prisma.StringNullableFilter<"ChatMessageHistory"> | string | null
  contentHash?: Prisma.StringNullableFilter<"ChatMessageHistory"> | string | null
  message?: Prisma.XOR<Prisma.ChatMessageScalarRelationFilter, Prisma.ChatMessageWhereInput>
}, "id">

export type ChatMessageHistoryOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  messageId?: Prisma.SortOrder
  roomId?: Prisma.SortOrder
  senderId?: Prisma.SortOrder
  actionType?: Prisma.SortOrder
  actionTimestamp?: Prisma.SortOrder
  actionBy?: Prisma.SortOrder
  previousContent?: Prisma.SortOrderInput | Prisma.SortOrder
  newContent?: Prisma.SortOrderInput | Prisma.SortOrder
  actionReason?: Prisma.SortOrderInput | Prisma.SortOrder
  ipAddress?: Prisma.SortOrderInput | Prisma.SortOrder
  contentHash?: Prisma.SortOrderInput | Prisma.SortOrder
  _count?: Prisma.ChatMessageHistoryCountOrderByAggregateInput
  _max?: Prisma.ChatMessageHistoryMaxOrderByAggregateInput
  _min?: Prisma.ChatMessageHistoryMinOrderByAggregateInput
}

export type ChatMessageHistoryScalarWhereWithAggregatesInput = {
  AND?: Prisma.ChatMessageHistoryScalarWhereWithAggregatesInput | Prisma.ChatMessageHistoryScalarWhereWithAggregatesInput[]
  OR?: Prisma.ChatMessageHistoryScalarWhereWithAggregatesInput[]
  NOT?: Prisma.ChatMessageHistoryScalarWhereWithAggregatesInput | Prisma.ChatMessageHistoryScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"ChatMessageHistory"> | string
  messageId?: Prisma.StringWithAggregatesFilter<"ChatMessageHistory"> | string
  roomId?: Prisma.StringWithAggregatesFilter<"ChatMessageHistory"> | string
  senderId?: Prisma.StringWithAggregatesFilter<"ChatMessageHistory"> | string
  actionType?: Prisma.EnumMessageActionTypeWithAggregatesFilter<"ChatMessageHistory"> | $Enums.MessageActionType
  actionTimestamp?: Prisma.DateTimeWithAggregatesFilter<"ChatMessageHistory"> | Date | string
  actionBy?: Prisma.StringWithAggregatesFilter<"ChatMessageHistory"> | string
  previousContent?: Prisma.StringNullableWithAggregatesFilter<"ChatMessageHistory"> | string | null
  newContent?: Prisma.StringNullableWithAggregatesFilter<"ChatMessageHistory"> | string | null
  actionReason?: Prisma.StringNullableWithAggregatesFilter<"ChatMessageHistory"> | string | null
  ipAddress?: Prisma.StringNullableWithAggregatesFilter<"ChatMessageHistory"> | string | null
  contentHash?: Prisma.StringNullableWithAggregatesFilter<"ChatMessageHistory"> | string | null
}

export type ChatMessageHistoryCreateInput = {
  id?: string
  roomId: string
  senderId: string
  actionType: $Enums.MessageActionType
  actionTimestamp?: Date | string
  actionBy: string
  previousContent?: string | null
  newContent?: string | null
  actionReason?: string | null
  ipAddress?: string | null
  contentHash?: string | null
  message: Prisma.ChatMessageCreateNestedOneWithoutHistoryInput
}

export type ChatMessageHistoryUncheckedCreateInput = {
  id?: string
  messageId: string
  roomId: string
  senderId: string
  actionType: $Enums.MessageActionType
  actionTimestamp?: Date | string
  actionBy: string
  previousContent?: string | null
  newContent?: string | null
  actionReason?: string | null
  ipAddress?: string | null
  contentHash?: string | null
}

export type ChatMessageHistoryUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  roomId?: Prisma.StringFieldUpdateOperationsInput | string
  senderId?: Prisma.StringFieldUpdateOperationsInput | string
  actionType?: Prisma.EnumMessageActionTypeFieldUpdateOperationsInput | $Enums.MessageActionType
  actionTimestamp?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  actionBy?: Prisma.StringFieldUpdateOperationsInput | string
  previousContent?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  newContent?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  actionReason?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  ipAddress?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  contentHash?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  message?: Prisma.ChatMessageUpdateOneRequiredWithoutHistoryNestedInput
}

export type ChatMessageHistoryUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  messageId?: Prisma.StringFieldUpdateOperationsInput | string
  roomId?: Prisma.StringFieldUpdateOperationsInput | string
  senderId?: Prisma.StringFieldUpdateOperationsInput | string
  actionType?: Prisma.EnumMessageActionTypeFieldUpdateOperationsInput | $Enums.MessageActionType
  actionTimestamp?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  actionBy?: Prisma.StringFieldUpdateOperationsInput | string
  previousContent?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  newContent?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  actionReason?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  ipAddress?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  contentHash?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
}

export type ChatMessageHistoryCreateManyInput = {
  id?: string
  messageId: string
  roomId: string
  senderId: string
  actionType: $Enums.MessageActionType
  actionTimestamp?: Date | string
  actionBy: string
  previousContent?: string | null
  newContent?: string | null
  actionReason?: string | null
  ipAddress?: string | null
  contentHash?: string | null
}

export type ChatMessageHistoryUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  roomId?: Prisma.StringFieldUpdateOperationsInput | string
  senderId?: Prisma.StringFieldUpdateOperationsInput | string
  actionType?: Prisma.EnumMessageActionTypeFieldUpdateOperationsInput | $Enums.MessageActionType
  actionTimestamp?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  actionBy?: Prisma.StringFieldUpdateOperationsInput | string
  previousContent?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  newContent?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  actionReason?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  ipAddress?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  contentHash?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
}

export type ChatMessageHistoryUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  messageId?: Prisma.StringFieldUpdateOperationsInput | string
  roomId?: Prisma.StringFieldUpdateOperationsInput | string
  senderId?: Prisma.StringFieldUpdateOperationsInput | string
  actionType?: Prisma.EnumMessageActionTypeFieldUpdateOperationsInput | $Enums.MessageActionType
  actionTimestamp?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  actionBy?: Prisma.StringFieldUpdateOperationsInput | string
  previousContent?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  newContent?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  actionReason?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  ipAddress?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  contentHash?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
}

export type ChatMessageHistoryListRelationFilter = {
  every?: Prisma.ChatMessageHistoryWhereInput
  some?: Prisma.ChatMessageHistoryWhereInput
  none?: Prisma.ChatMessageHistoryWhereInput
}

export type ChatMessageHistoryOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type ChatMessageHistoryCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  messageId?: Prisma.SortOrder
  roomId?: Prisma.SortOrder
  senderId?: Prisma.SortOrder
  actionType?: Prisma.SortOrder
  actionTimestamp?: Prisma.SortOrder
  actionBy?: Prisma.SortOrder
  previousContent?: Prisma.SortOrder
  newContent?: Prisma.SortOrder
  actionReason?: Prisma.SortOrder
  ipAddress?: Prisma.SortOrder
  contentHash?: Prisma.SortOrder
}

export type ChatMessageHistoryMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  messageId?: Prisma.SortOrder
  roomId?: Prisma.SortOrder
  senderId?: Prisma.SortOrder
  actionType?: Prisma.SortOrder
  actionTimestamp?: Prisma.SortOrder
  actionBy?: Prisma.SortOrder
  previousContent?: Prisma.SortOrder
  newContent?: Prisma.SortOrder
  actionReason?: Prisma.SortOrder
  ipAddress?: Prisma.SortOrder
  contentHash?: Prisma.SortOrder
}

export type ChatMessageHistoryMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  messageId?: Prisma.SortOrder
  roomId?: Prisma.SortOrder
  senderId?: Prisma.SortOrder
  actionType?: Prisma.SortOrder
  actionTimestamp?: Prisma.SortOrder
  actionBy?: Prisma.SortOrder
  previousContent?: Prisma.SortOrder
  newContent?: Prisma.SortOrder
  actionReason?: Prisma.SortOrder
  ipAddress?: Prisma.SortOrder
  contentHash?: Prisma.SortOrder
}

export type ChatMessageHistoryCreateNestedManyWithoutMessageInput = {
  create?: Prisma.XOR<Prisma.ChatMessageHistoryCreateWithoutMessageInput, Prisma.ChatMessageHistoryUncheckedCreateWithoutMessageInput> | Prisma.ChatMessageHistoryCreateWithoutMessageInput[] | Prisma.ChatMessageHistoryUncheckedCreateWithoutMessageInput[]
  connectOrCreate?: Prisma.ChatMessageHistoryCreateOrConnectWithoutMessageInput | Prisma.ChatMessageHistoryCreateOrConnectWithoutMessageInput[]
  createMany?: Prisma.ChatMessageHistoryCreateManyMessageInputEnvelope
  connect?: Prisma.ChatMessageHistoryWhereUniqueInput | Prisma.ChatMessageHistoryWhereUniqueInput[]
}

export type ChatMessageHistoryUncheckedCreateNestedManyWithoutMessageInput = {
  create?: Prisma.XOR<Prisma.ChatMessageHistoryCreateWithoutMessageInput, Prisma.ChatMessageHistoryUncheckedCreateWithoutMessageInput> | Prisma.ChatMessageHistoryCreateWithoutMessageInput[] | Prisma.ChatMessageHistoryUncheckedCreateWithoutMessageInput[]
  connectOrCreate?: Prisma.ChatMessageHistoryCreateOrConnectWithoutMessageInput | Prisma.ChatMessageHistoryCreateOrConnectWithoutMessageInput[]
  createMany?: Prisma.ChatMessageHistoryCreateManyMessageInputEnvelope
  connect?: Prisma.ChatMessageHistoryWhereUniqueInput | Prisma.ChatMessageHistoryWhereUniqueInput[]
}

export type ChatMessageHistoryUpdateManyWithoutMessageNestedInput = {
  create?: Prisma.XOR<Prisma.ChatMessageHistoryCreateWithoutMessageInput, Prisma.ChatMessageHistoryUncheckedCreateWithoutMessageInput> | Prisma.ChatMessageHistoryCreateWithoutMessageInput[] | Prisma.ChatMessageHistoryUncheckedCreateWithoutMessageInput[]
  connectOrCreate?: Prisma.ChatMessageHistoryCreateOrConnectWithoutMessageInput | Prisma.ChatMessageHistoryCreateOrConnectWithoutMessageInput[]
  upsert?: Prisma.ChatMessageHistoryUpsertWithWhereUniqueWithoutMessageInput | Prisma.ChatMessageHistoryUpsertWithWhereUniqueWithoutMessageInput[]
  createMany?: Prisma.ChatMessageHistoryCreateManyMessageInputEnvelope
  set?: Prisma.ChatMessageHistoryWhereUniqueInput | Prisma.ChatMessageHistoryWhereUniqueInput[]
  disconnect?: Prisma.ChatMessageHistoryWhereUniqueInput | Prisma.ChatMessageHistoryWhereUniqueInput[]
  delete?: Prisma.ChatMessageHistoryWhereUniqueInput | Prisma.ChatMessageHistoryWhereUniqueInput[]
  connect?: Prisma.ChatMessageHistoryWhereUniqueInput | Prisma.ChatMessageHistoryWhereUniqueInput[]
  update?: Prisma.ChatMessageHistoryUpdateWithWhereUniqueWithoutMessageInput | Prisma.ChatMessageHistoryUpdateWithWhereUniqueWithoutMessageInput[]
  updateMany?: Prisma.ChatMessageHistoryUpdateManyWithWhereWithoutMessageInput | Prisma.ChatMessageHistoryUpdateManyWithWhereWithoutMessageInput[]
  deleteMany?: Prisma.ChatMessageHistoryScalarWhereInput | Prisma.ChatMessageHistoryScalarWhereInput[]
}

export type ChatMessageHistoryUncheckedUpdateManyWithoutMessageNestedInput = {
  create?: Prisma.XOR<Prisma.ChatMessageHistoryCreateWithoutMessageInput, Prisma.ChatMessageHistoryUncheckedCreateWithoutMessageInput> | Prisma.ChatMessageHistoryCreateWithoutMessageInput[] | Prisma.ChatMessageHistoryUncheckedCreateWithoutMessageInput[]
  connectOrCreate?: Prisma.ChatMessageHistoryCreateOrConnectWithoutMessageInput | Prisma.ChatMessageHistoryCreateOrConnectWithoutMessageInput[]
  upsert?: Prisma.ChatMessageHistoryUpsertWithWhereUniqueWithoutMessageInput | Prisma.ChatMessageHistoryUpsertWithWhereUniqueWithoutMessageInput[]
  createMany?: Prisma.ChatMessageHistoryCreateManyMessageInputEnvelope
  set?: Prisma.ChatMessageHistoryWhereUniqueInput | Prisma.ChatMessageHistoryWhereUniqueInput[]
  disconnect?: Prisma.ChatMessageHistoryWhereUniqueInput | Prisma.ChatMessageHistoryWhereUniqueInput[]
  delete?: Prisma.ChatMessageHistoryWhereUniqueInput | Prisma.ChatMessageHistoryWhereUniqueInput[]
  connect?: Prisma.ChatMessageHistoryWhereUniqueInput | Prisma.ChatMessageHistoryWhereUniqueInput[]
  update?: Prisma.ChatMessageHistoryUpdateWithWhereUniqueWithoutMessageInput | Prisma.ChatMessageHistoryUpdateWithWhereUniqueWithoutMessageInput[]
  updateMany?: Prisma.ChatMessageHistoryUpdateManyWithWhereWithoutMessageInput | Prisma.ChatMessageHistoryUpdateManyWithWhereWithoutMessageInput[]
  deleteMany?: Prisma.ChatMessageHistoryScalarWhereInput | Prisma.ChatMessageHistoryScalarWhereInput[]
}

export type EnumMessageActionTypeFieldUpdateOperationsInput = {
  set?: $Enums.MessageActionType
}

export type ChatMessageHistoryCreateWithoutMessageInput = {
  id?: string
  roomId: string
  senderId: string
  actionType: $Enums.MessageActionType
  actionTimestamp?: Date | string
  actionBy: string
  previousContent?: string | null
  newContent?: string | null
  actionReason?: string | null
  ipAddress?: string | null
  contentHash?: string | null
}

export type ChatMessageHistoryUncheckedCreateWithoutMessageInput = {
  id?: string
  roomId: string
  senderId: string
  actionType: $Enums.MessageActionType
  actionTimestamp?: Date | string
  actionBy: string
  previousContent?: string | null
  newContent?: string | null
  actionReason?: string | null
  ipAddress?: string | null
  contentHash?: string | null
}

export type ChatMessageHistoryCreateOrConnectWithoutMessageInput = {
  where: Prisma.ChatMessageHistoryWhereUniqueInput
  create: Prisma.XOR<Prisma.ChatMessageHistoryCreateWithoutMessageInput, Prisma.ChatMessageHistoryUncheckedCreateWithoutMessageInput>
}

export type ChatMessageHistoryCreateManyMessageInputEnvelope = {
  data: Prisma.ChatMessageHistoryCreateManyMessageInput | Prisma.ChatMessageHistoryCreateManyMessageInput[]
  skipDuplicates?: boolean
}

export type ChatMessageHistoryUpsertWithWhereUniqueWithoutMessageInput = {
  where: Prisma.ChatMessageHistoryWhereUniqueInput
  update: Prisma.XOR<Prisma.ChatMessageHistoryUpdateWithoutMessageInput, Prisma.ChatMessageHistoryUncheckedUpdateWithoutMessageInput>
  create: Prisma.XOR<Prisma.ChatMessageHistoryCreateWithoutMessageInput, Prisma.ChatMessageHistoryUncheckedCreateWithoutMessageInput>
}

export type ChatMessageHistoryUpdateWithWhereUniqueWithoutMessageInput = {
  where: Prisma.ChatMessageHistoryWhereUniqueInput
  data: Prisma.XOR<Prisma.ChatMessageHistoryUpdateWithoutMessageInput, Prisma.ChatMessageHistoryUncheckedUpdateWithoutMessageInput>
}

export type ChatMessageHistoryUpdateManyWithWhereWithoutMessageInput = {
  where: Prisma.ChatMessageHistoryScalarWhereInput
  data: Prisma.XOR<Prisma.ChatMessageHistoryUpdateManyMutationInput, Prisma.ChatMessageHistoryUncheckedUpdateManyWithoutMessageInput>
}

export type ChatMessageHistoryScalarWhereInput = {
  AND?: Prisma.ChatMessageHistoryScalarWhereInput | Prisma.ChatMessageHistoryScalarWhereInput[]
  OR?: Prisma.ChatMessageHistoryScalarWhereInput[]
  NOT?: Prisma.ChatMessageHistoryScalarWhereInput | Prisma.ChatMessageHistoryScalarWhereInput[]
  id?: Prisma.StringFilter<"ChatMessageHistory"> | string
  messageId?: Prisma.StringFilter<"ChatMessageHistory"> | string
  roomId?: Prisma.StringFilter<"ChatMessageHistory"> | string
  senderId?: Prisma.StringFilter<"ChatMessageHistory"> | string
  actionType?: Prisma.EnumMessageActionTypeFilter<"ChatMessageHistory"> | $Enums.MessageActionType
  actionTimestamp?: Prisma.DateTimeFilter<"ChatMessageHistory"> | Date | string
  actionBy?: Prisma.StringFilter<"ChatMessageHistory"> | string
  previousContent?: Prisma.StringNullableFilter<"ChatMessageHistory"> | string | null
  newContent?: Prisma.StringNullableFilter<"ChatMessageHistory"> | string | null
  actionReason?: Prisma.StringNullableFilter<"ChatMessageHistory"> | string | null
  ipAddress?: Prisma.StringNullableFilter<"ChatMessageHistory"> | string | null
  contentHash?: Prisma.StringNullableFilter<"ChatMessageHistory"> | string | null
}

export type ChatMessageHistoryCreateManyMessageInput = {
  id?: string
  roomId: string
  senderId: string
  actionType: $Enums.MessageActionType
  actionTimestamp?: Date | string
  actionBy: string
  previousContent?: string | null
  newContent?: string | null
  actionReason?: string | null
  ipAddress?: string | null
  contentHash?: string | null
}

export type ChatMessageHistoryUpdateWithoutMessageInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  roomId?: Prisma.StringFieldUpdateOperationsInput | string
  senderId?: Prisma.StringFieldUpdateOperationsInput | string
  actionType?: Prisma.EnumMessageActionTypeFieldUpdateOperationsInput | $Enums.MessageActionType
  actionTimestamp?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  actionBy?: Prisma.StringFieldUpdateOperationsInput | string
  previousContent?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  newContent?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  actionReason?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  ipAddress?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  contentHash?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
}

export type ChatMessageHistoryUncheckedUpdateWithoutMessageInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  roomId?: Prisma.StringFieldUpdateOperationsInput | string
  senderId?: Prisma.StringFieldUpdateOperationsInput | string
  actionType?: Prisma.EnumMessageActionTypeFieldUpdateOperationsInput | $Enums.MessageActionType
  actionTimestamp?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  actionBy?: Prisma.StringFieldUpdateOperationsInput | string
  previousContent?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  newContent?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  actionReason?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  ipAddress?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  contentHash?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
}

export type ChatMessageHistoryUncheckedUpdateManyWithoutMessageInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  roomId?: Prisma.StringFieldUpdateOperationsInput | string
  senderId?: Prisma.StringFieldUpdateOperationsInput | string
  actionType?: Prisma.EnumMessageActionTypeFieldUpdateOperationsInput | $Enums.MessageActionType
  actionTimestamp?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  actionBy?: Prisma.StringFieldUpdateOperationsInput | string
  previousContent?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  newContent?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  actionReason?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  ipAddress?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  contentHash?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
}



export type ChatMessageHistorySelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  messageId?: boolean
  roomId?: boolean
  senderId?: boolean
  actionType?: boolean
  actionTimestamp?: boolean
  actionBy?: boolean
  previousContent?: boolean
  newContent?: boolean
  actionReason?: boolean
  ipAddress?: boolean
  contentHash?: boolean
  message?: boolean | Prisma.ChatMessageDefaultArgs<ExtArgs>
}, ExtArgs["result"]["chatMessageHistory"]>

export type ChatMessageHistorySelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  messageId?: boolean
  roomId?: boolean
  senderId?: boolean
  actionType?: boolean
  actionTimestamp?: boolean
  actionBy?: boolean
  previousContent?: boolean
  newContent?: boolean
  actionReason?: boolean
  ipAddress?: boolean
  contentHash?: boolean
  message?: boolean | Prisma.ChatMessageDefaultArgs<ExtArgs>
}, ExtArgs["result"]["chatMessageHistory"]>

export type ChatMessageHistorySelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  messageId?: boolean
  roomId?: boolean
  senderId?: boolean
  actionType?: boolean
  actionTimestamp?: boolean
  actionBy?: boolean
  previousContent?: boolean
  newContent?: boolean
  actionReason?: boolean
  ipAddress?: boolean
  contentHash?: boolean
  message?: boolean | Prisma.ChatMessageDefaultArgs<ExtArgs>
}, ExtArgs["result"]["chatMessageHistory"]>

export type ChatMessageHistorySelectScalar = {
  id?: boolean
  messageId?: boolean
  roomId?: boolean
  senderId?: boolean
  actionType?: boolean
  actionTimestamp?: boolean
  actionBy?: boolean
  previousContent?: boolean
  newContent?: boolean
  actionReason?: boolean
  ipAddress?: boolean
  contentHash?: boolean
}

export type ChatMessageHistoryOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "messageId" | "roomId" | "senderId" | "actionType" | "actionTimestamp" | "actionBy" | "previousContent" | "newContent" | "actionReason" | "ipAddress" | "contentHash", ExtArgs["result"]["chatMessageHistory"]>
export type ChatMessageHistoryInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  message?: boolean | Prisma.ChatMessageDefaultArgs<ExtArgs>
}
export type ChatMessageHistoryIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  message?: boolean | Prisma.ChatMessageDefaultArgs<ExtArgs>
}
export type ChatMessageHistoryIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  message?: boolean | Prisma.ChatMessageDefaultArgs<ExtArgs>
}

export type $ChatMessageHistoryPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "ChatMessageHistory"
  objects: {
    message: Prisma.$ChatMessagePayload<ExtArgs>
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    messageId: string
    roomId: string
    senderId: string
    actionType: $Enums.MessageActionType
    actionTimestamp: Date
    actionBy: string
    previousContent: string | null
    newContent: string | null
    actionReason: string | null
    ipAddress: string | null
    contentHash: string | null
  }, ExtArgs["result"]["chatMessageHistory"]>
  composites: {}
}

export type ChatMessageHistoryGetPayload<S extends boolean | null | undefined | ChatMessageHistoryDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$ChatMessageHistoryPayload, S>

export type ChatMessageHistoryCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<ChatMessageHistoryFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: ChatMessageHistoryCountAggregateInputType | true
  }

export interface ChatMessageHistoryDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ChatMessageHistory'], meta: { name: 'ChatMessageHistory' } }
  /**
   * Find zero or one ChatMessageHistory that matches the filter.
   * @param {ChatMessageHistoryFindUniqueArgs} args - Arguments to find a ChatMessageHistory
   * @example
   * // Get one ChatMessageHistory
   * const chatMessageHistory = await prisma.chatMessageHistory.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends ChatMessageHistoryFindUniqueArgs>(args: Prisma.SelectSubset<T, ChatMessageHistoryFindUniqueArgs<ExtArgs>>): Prisma.Prisma__ChatMessageHistoryClient<runtime.Types.Result.GetResult<Prisma.$ChatMessageHistoryPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one ChatMessageHistory that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {ChatMessageHistoryFindUniqueOrThrowArgs} args - Arguments to find a ChatMessageHistory
   * @example
   * // Get one ChatMessageHistory
   * const chatMessageHistory = await prisma.chatMessageHistory.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends ChatMessageHistoryFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, ChatMessageHistoryFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__ChatMessageHistoryClient<runtime.Types.Result.GetResult<Prisma.$ChatMessageHistoryPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first ChatMessageHistory that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ChatMessageHistoryFindFirstArgs} args - Arguments to find a ChatMessageHistory
   * @example
   * // Get one ChatMessageHistory
   * const chatMessageHistory = await prisma.chatMessageHistory.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends ChatMessageHistoryFindFirstArgs>(args?: Prisma.SelectSubset<T, ChatMessageHistoryFindFirstArgs<ExtArgs>>): Prisma.Prisma__ChatMessageHistoryClient<runtime.Types.Result.GetResult<Prisma.$ChatMessageHistoryPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first ChatMessageHistory that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ChatMessageHistoryFindFirstOrThrowArgs} args - Arguments to find a ChatMessageHistory
   * @example
   * // Get one ChatMessageHistory
   * const chatMessageHistory = await prisma.chatMessageHistory.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends ChatMessageHistoryFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, ChatMessageHistoryFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__ChatMessageHistoryClient<runtime.Types.Result.GetResult<Prisma.$ChatMessageHistoryPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more ChatMessageHistories that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ChatMessageHistoryFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all ChatMessageHistories
   * const chatMessageHistories = await prisma.chatMessageHistory.findMany()
   * 
   * // Get first 10 ChatMessageHistories
   * const chatMessageHistories = await prisma.chatMessageHistory.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const chatMessageHistoryWithIdOnly = await prisma.chatMessageHistory.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends ChatMessageHistoryFindManyArgs>(args?: Prisma.SelectSubset<T, ChatMessageHistoryFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ChatMessageHistoryPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a ChatMessageHistory.
   * @param {ChatMessageHistoryCreateArgs} args - Arguments to create a ChatMessageHistory.
   * @example
   * // Create one ChatMessageHistory
   * const ChatMessageHistory = await prisma.chatMessageHistory.create({
   *   data: {
   *     // ... data to create a ChatMessageHistory
   *   }
   * })
   * 
   */
  create<T extends ChatMessageHistoryCreateArgs>(args: Prisma.SelectSubset<T, ChatMessageHistoryCreateArgs<ExtArgs>>): Prisma.Prisma__ChatMessageHistoryClient<runtime.Types.Result.GetResult<Prisma.$ChatMessageHistoryPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many ChatMessageHistories.
   * @param {ChatMessageHistoryCreateManyArgs} args - Arguments to create many ChatMessageHistories.
   * @example
   * // Create many ChatMessageHistories
   * const chatMessageHistory = await prisma.chatMessageHistory.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends ChatMessageHistoryCreateManyArgs>(args?: Prisma.SelectSubset<T, ChatMessageHistoryCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many ChatMessageHistories and returns the data saved in the database.
   * @param {ChatMessageHistoryCreateManyAndReturnArgs} args - Arguments to create many ChatMessageHistories.
   * @example
   * // Create many ChatMessageHistories
   * const chatMessageHistory = await prisma.chatMessageHistory.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many ChatMessageHistories and only return the `id`
   * const chatMessageHistoryWithIdOnly = await prisma.chatMessageHistory.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends ChatMessageHistoryCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, ChatMessageHistoryCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ChatMessageHistoryPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a ChatMessageHistory.
   * @param {ChatMessageHistoryDeleteArgs} args - Arguments to delete one ChatMessageHistory.
   * @example
   * // Delete one ChatMessageHistory
   * const ChatMessageHistory = await prisma.chatMessageHistory.delete({
   *   where: {
   *     // ... filter to delete one ChatMessageHistory
   *   }
   * })
   * 
   */
  delete<T extends ChatMessageHistoryDeleteArgs>(args: Prisma.SelectSubset<T, ChatMessageHistoryDeleteArgs<ExtArgs>>): Prisma.Prisma__ChatMessageHistoryClient<runtime.Types.Result.GetResult<Prisma.$ChatMessageHistoryPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one ChatMessageHistory.
   * @param {ChatMessageHistoryUpdateArgs} args - Arguments to update one ChatMessageHistory.
   * @example
   * // Update one ChatMessageHistory
   * const chatMessageHistory = await prisma.chatMessageHistory.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends ChatMessageHistoryUpdateArgs>(args: Prisma.SelectSubset<T, ChatMessageHistoryUpdateArgs<ExtArgs>>): Prisma.Prisma__ChatMessageHistoryClient<runtime.Types.Result.GetResult<Prisma.$ChatMessageHistoryPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more ChatMessageHistories.
   * @param {ChatMessageHistoryDeleteManyArgs} args - Arguments to filter ChatMessageHistories to delete.
   * @example
   * // Delete a few ChatMessageHistories
   * const { count } = await prisma.chatMessageHistory.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends ChatMessageHistoryDeleteManyArgs>(args?: Prisma.SelectSubset<T, ChatMessageHistoryDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more ChatMessageHistories.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ChatMessageHistoryUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many ChatMessageHistories
   * const chatMessageHistory = await prisma.chatMessageHistory.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends ChatMessageHistoryUpdateManyArgs>(args: Prisma.SelectSubset<T, ChatMessageHistoryUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more ChatMessageHistories and returns the data updated in the database.
   * @param {ChatMessageHistoryUpdateManyAndReturnArgs} args - Arguments to update many ChatMessageHistories.
   * @example
   * // Update many ChatMessageHistories
   * const chatMessageHistory = await prisma.chatMessageHistory.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more ChatMessageHistories and only return the `id`
   * const chatMessageHistoryWithIdOnly = await prisma.chatMessageHistory.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends ChatMessageHistoryUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, ChatMessageHistoryUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ChatMessageHistoryPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one ChatMessageHistory.
   * @param {ChatMessageHistoryUpsertArgs} args - Arguments to update or create a ChatMessageHistory.
   * @example
   * // Update or create a ChatMessageHistory
   * const chatMessageHistory = await prisma.chatMessageHistory.upsert({
   *   create: {
   *     // ... data to create a ChatMessageHistory
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the ChatMessageHistory we want to update
   *   }
   * })
   */
  upsert<T extends ChatMessageHistoryUpsertArgs>(args: Prisma.SelectSubset<T, ChatMessageHistoryUpsertArgs<ExtArgs>>): Prisma.Prisma__ChatMessageHistoryClient<runtime.Types.Result.GetResult<Prisma.$ChatMessageHistoryPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of ChatMessageHistories.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ChatMessageHistoryCountArgs} args - Arguments to filter ChatMessageHistories to count.
   * @example
   * // Count the number of ChatMessageHistories
   * const count = await prisma.chatMessageHistory.count({
   *   where: {
   *     // ... the filter for the ChatMessageHistories we want to count
   *   }
   * })
  **/
  count<T extends ChatMessageHistoryCountArgs>(
    args?: Prisma.Subset<T, ChatMessageHistoryCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], ChatMessageHistoryCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a ChatMessageHistory.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ChatMessageHistoryAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends ChatMessageHistoryAggregateArgs>(args: Prisma.Subset<T, ChatMessageHistoryAggregateArgs>): Prisma.PrismaPromise<GetChatMessageHistoryAggregateType<T>>

  /**
   * Group by ChatMessageHistory.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ChatMessageHistoryGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends ChatMessageHistoryGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: ChatMessageHistoryGroupByArgs['orderBy'] }
      : { orderBy?: ChatMessageHistoryGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, ChatMessageHistoryGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetChatMessageHistoryGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the ChatMessageHistory model
 */
readonly fields: ChatMessageHistoryFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for ChatMessageHistory.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__ChatMessageHistoryClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  message<T extends Prisma.ChatMessageDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.ChatMessageDefaultArgs<ExtArgs>>): Prisma.Prisma__ChatMessageClient<runtime.Types.Result.GetResult<Prisma.$ChatMessagePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the ChatMessageHistory model
 */
export interface ChatMessageHistoryFieldRefs {
  readonly id: Prisma.FieldRef<"ChatMessageHistory", 'String'>
  readonly messageId: Prisma.FieldRef<"ChatMessageHistory", 'String'>
  readonly roomId: Prisma.FieldRef<"ChatMessageHistory", 'String'>
  readonly senderId: Prisma.FieldRef<"ChatMessageHistory", 'String'>
  readonly actionType: Prisma.FieldRef<"ChatMessageHistory", 'MessageActionType'>
  readonly actionTimestamp: Prisma.FieldRef<"ChatMessageHistory", 'DateTime'>
  readonly actionBy: Prisma.FieldRef<"ChatMessageHistory", 'String'>
  readonly previousContent: Prisma.FieldRef<"ChatMessageHistory", 'String'>
  readonly newContent: Prisma.FieldRef<"ChatMessageHistory", 'String'>
  readonly actionReason: Prisma.FieldRef<"ChatMessageHistory", 'String'>
  readonly ipAddress: Prisma.FieldRef<"ChatMessageHistory", 'String'>
  readonly contentHash: Prisma.FieldRef<"ChatMessageHistory", 'String'>
}
    

// Custom InputTypes
/**
 * ChatMessageHistory findUnique
 */
export type ChatMessageHistoryFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ChatMessageHistory
   */
  select?: Prisma.ChatMessageHistorySelect<ExtArgs> | null
  /**
   * Omit specific fields from the ChatMessageHistory
   */
  omit?: Prisma.ChatMessageHistoryOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ChatMessageHistoryInclude<ExtArgs> | null
  /**
   * Filter, which ChatMessageHistory to fetch.
   */
  where: Prisma.ChatMessageHistoryWhereUniqueInput
}

/**
 * ChatMessageHistory findUniqueOrThrow
 */
export type ChatMessageHistoryFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ChatMessageHistory
   */
  select?: Prisma.ChatMessageHistorySelect<ExtArgs> | null
  /**
   * Omit specific fields from the ChatMessageHistory
   */
  omit?: Prisma.ChatMessageHistoryOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ChatMessageHistoryInclude<ExtArgs> | null
  /**
   * Filter, which ChatMessageHistory to fetch.
   */
  where: Prisma.ChatMessageHistoryWhereUniqueInput
}

/**
 * ChatMessageHistory findFirst
 */
export type ChatMessageHistoryFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ChatMessageHistory
   */
  select?: Prisma.ChatMessageHistorySelect<ExtArgs> | null
  /**
   * Omit specific fields from the ChatMessageHistory
   */
  omit?: Prisma.ChatMessageHistoryOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ChatMessageHistoryInclude<ExtArgs> | null
  /**
   * Filter, which ChatMessageHistory to fetch.
   */
  where?: Prisma.ChatMessageHistoryWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of ChatMessageHistories to fetch.
   */
  orderBy?: Prisma.ChatMessageHistoryOrderByWithRelationInput | Prisma.ChatMessageHistoryOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for ChatMessageHistories.
   */
  cursor?: Prisma.ChatMessageHistoryWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` ChatMessageHistories from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` ChatMessageHistories.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of ChatMessageHistories.
   */
  distinct?: Prisma.ChatMessageHistoryScalarFieldEnum | Prisma.ChatMessageHistoryScalarFieldEnum[]
}

/**
 * ChatMessageHistory findFirstOrThrow
 */
export type ChatMessageHistoryFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ChatMessageHistory
   */
  select?: Prisma.ChatMessageHistorySelect<ExtArgs> | null
  /**
   * Omit specific fields from the ChatMessageHistory
   */
  omit?: Prisma.ChatMessageHistoryOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ChatMessageHistoryInclude<ExtArgs> | null
  /**
   * Filter, which ChatMessageHistory to fetch.
   */
  where?: Prisma.ChatMessageHistoryWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of ChatMessageHistories to fetch.
   */
  orderBy?: Prisma.ChatMessageHistoryOrderByWithRelationInput | Prisma.ChatMessageHistoryOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for ChatMessageHistories.
   */
  cursor?: Prisma.ChatMessageHistoryWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` ChatMessageHistories from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` ChatMessageHistories.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of ChatMessageHistories.
   */
  distinct?: Prisma.ChatMessageHistoryScalarFieldEnum | Prisma.ChatMessageHistoryScalarFieldEnum[]
}

/**
 * ChatMessageHistory findMany
 */
export type ChatMessageHistoryFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ChatMessageHistory
   */
  select?: Prisma.ChatMessageHistorySelect<ExtArgs> | null
  /**
   * Omit specific fields from the ChatMessageHistory
   */
  omit?: Prisma.ChatMessageHistoryOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ChatMessageHistoryInclude<ExtArgs> | null
  /**
   * Filter, which ChatMessageHistories to fetch.
   */
  where?: Prisma.ChatMessageHistoryWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of ChatMessageHistories to fetch.
   */
  orderBy?: Prisma.ChatMessageHistoryOrderByWithRelationInput | Prisma.ChatMessageHistoryOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing ChatMessageHistories.
   */
  cursor?: Prisma.ChatMessageHistoryWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` ChatMessageHistories from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` ChatMessageHistories.
   */
  skip?: number
  distinct?: Prisma.ChatMessageHistoryScalarFieldEnum | Prisma.ChatMessageHistoryScalarFieldEnum[]
}

/**
 * ChatMessageHistory create
 */
export type ChatMessageHistoryCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ChatMessageHistory
   */
  select?: Prisma.ChatMessageHistorySelect<ExtArgs> | null
  /**
   * Omit specific fields from the ChatMessageHistory
   */
  omit?: Prisma.ChatMessageHistoryOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ChatMessageHistoryInclude<ExtArgs> | null
  /**
   * The data needed to create a ChatMessageHistory.
   */
  data: Prisma.XOR<Prisma.ChatMessageHistoryCreateInput, Prisma.ChatMessageHistoryUncheckedCreateInput>
}

/**
 * ChatMessageHistory createMany
 */
export type ChatMessageHistoryCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many ChatMessageHistories.
   */
  data: Prisma.ChatMessageHistoryCreateManyInput | Prisma.ChatMessageHistoryCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * ChatMessageHistory createManyAndReturn
 */
export type ChatMessageHistoryCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ChatMessageHistory
   */
  select?: Prisma.ChatMessageHistorySelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the ChatMessageHistory
   */
  omit?: Prisma.ChatMessageHistoryOmit<ExtArgs> | null
  /**
   * The data used to create many ChatMessageHistories.
   */
  data: Prisma.ChatMessageHistoryCreateManyInput | Prisma.ChatMessageHistoryCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ChatMessageHistoryIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * ChatMessageHistory update
 */
export type ChatMessageHistoryUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ChatMessageHistory
   */
  select?: Prisma.ChatMessageHistorySelect<ExtArgs> | null
  /**
   * Omit specific fields from the ChatMessageHistory
   */
  omit?: Prisma.ChatMessageHistoryOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ChatMessageHistoryInclude<ExtArgs> | null
  /**
   * The data needed to update a ChatMessageHistory.
   */
  data: Prisma.XOR<Prisma.ChatMessageHistoryUpdateInput, Prisma.ChatMessageHistoryUncheckedUpdateInput>
  /**
   * Choose, which ChatMessageHistory to update.
   */
  where: Prisma.ChatMessageHistoryWhereUniqueInput
}

/**
 * ChatMessageHistory updateMany
 */
export type ChatMessageHistoryUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update ChatMessageHistories.
   */
  data: Prisma.XOR<Prisma.ChatMessageHistoryUpdateManyMutationInput, Prisma.ChatMessageHistoryUncheckedUpdateManyInput>
  /**
   * Filter which ChatMessageHistories to update
   */
  where?: Prisma.ChatMessageHistoryWhereInput
  /**
   * Limit how many ChatMessageHistories to update.
   */
  limit?: number
}

/**
 * ChatMessageHistory updateManyAndReturn
 */
export type ChatMessageHistoryUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ChatMessageHistory
   */
  select?: Prisma.ChatMessageHistorySelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the ChatMessageHistory
   */
  omit?: Prisma.ChatMessageHistoryOmit<ExtArgs> | null
  /**
   * The data used to update ChatMessageHistories.
   */
  data: Prisma.XOR<Prisma.ChatMessageHistoryUpdateManyMutationInput, Prisma.ChatMessageHistoryUncheckedUpdateManyInput>
  /**
   * Filter which ChatMessageHistories to update
   */
  where?: Prisma.ChatMessageHistoryWhereInput
  /**
   * Limit how many ChatMessageHistories to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ChatMessageHistoryIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * ChatMessageHistory upsert
 */
export type ChatMessageHistoryUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ChatMessageHistory
   */
  select?: Prisma.ChatMessageHistorySelect<ExtArgs> | null
  /**
   * Omit specific fields from the ChatMessageHistory
   */
  omit?: Prisma.ChatMessageHistoryOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ChatMessageHistoryInclude<ExtArgs> | null
  /**
   * The filter to search for the ChatMessageHistory to update in case it exists.
   */
  where: Prisma.ChatMessageHistoryWhereUniqueInput
  /**
   * In case the ChatMessageHistory found by the `where` argument doesn't exist, create a new ChatMessageHistory with this data.
   */
  create: Prisma.XOR<Prisma.ChatMessageHistoryCreateInput, Prisma.ChatMessageHistoryUncheckedCreateInput>
  /**
   * In case the ChatMessageHistory was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.ChatMessageHistoryUpdateInput, Prisma.ChatMessageHistoryUncheckedUpdateInput>
}

/**
 * ChatMessageHistory delete
 */
export type ChatMessageHistoryDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ChatMessageHistory
   */
  select?: Prisma.ChatMessageHistorySelect<ExtArgs> | null
  /**
   * Omit specific fields from the ChatMessageHistory
   */
  omit?: Prisma.ChatMessageHistoryOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ChatMessageHistoryInclude<ExtArgs> | null
  /**
   * Filter which ChatMessageHistory to delete.
   */
  where: Prisma.ChatMessageHistoryWhereUniqueInput
}

/**
 * ChatMessageHistory deleteMany
 */
export type ChatMessageHistoryDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which ChatMessageHistories to delete
   */
  where?: Prisma.ChatMessageHistoryWhereInput
  /**
   * Limit how many ChatMessageHistories to delete.
   */
  limit?: number
}

/**
 * ChatMessageHistory without action
 */
export type ChatMessageHistoryDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ChatMessageHistory
   */
  select?: Prisma.ChatMessageHistorySelect<ExtArgs> | null
  /**
   * Omit specific fields from the ChatMessageHistory
   */
  omit?: Prisma.ChatMessageHistoryOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ChatMessageHistoryInclude<ExtArgs> | null
}
