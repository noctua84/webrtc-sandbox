
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `MessageReaction` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model MessageReaction
 * 
 */
export type MessageReactionModel = runtime.Types.Result.DefaultSelection<Prisma.$MessageReactionPayload>

export type AggregateMessageReaction = {
  _count: MessageReactionCountAggregateOutputType | null
  _min: MessageReactionMinAggregateOutputType | null
  _max: MessageReactionMaxAggregateOutputType | null
}

export type MessageReactionMinAggregateOutputType = {
  id: string | null
  messageId: string | null
  participantId: string | null
  emoji: string | null
  createdAt: Date | null
}

export type MessageReactionMaxAggregateOutputType = {
  id: string | null
  messageId: string | null
  participantId: string | null
  emoji: string | null
  createdAt: Date | null
}

export type MessageReactionCountAggregateOutputType = {
  id: number
  messageId: number
  participantId: number
  emoji: number
  createdAt: number
  _all: number
}


export type MessageReactionMinAggregateInputType = {
  id?: true
  messageId?: true
  participantId?: true
  emoji?: true
  createdAt?: true
}

export type MessageReactionMaxAggregateInputType = {
  id?: true
  messageId?: true
  participantId?: true
  emoji?: true
  createdAt?: true
}

export type MessageReactionCountAggregateInputType = {
  id?: true
  messageId?: true
  participantId?: true
  emoji?: true
  createdAt?: true
  _all?: true
}

export type MessageReactionAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which MessageReaction to aggregate.
   */
  where?: Prisma.MessageReactionWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of MessageReactions to fetch.
   */
  orderBy?: Prisma.MessageReactionOrderByWithRelationInput | Prisma.MessageReactionOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.MessageReactionWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` MessageReactions from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` MessageReactions.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned MessageReactions
  **/
  _count?: true | MessageReactionCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: MessageReactionMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: MessageReactionMaxAggregateInputType
}

export type GetMessageReactionAggregateType<T extends MessageReactionAggregateArgs> = {
      [P in keyof T & keyof AggregateMessageReaction]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateMessageReaction[P]>
    : Prisma.GetScalarType<T[P], AggregateMessageReaction[P]>
}




export type MessageReactionGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.MessageReactionWhereInput
  orderBy?: Prisma.MessageReactionOrderByWithAggregationInput | Prisma.MessageReactionOrderByWithAggregationInput[]
  by: Prisma.MessageReactionScalarFieldEnum[] | Prisma.MessageReactionScalarFieldEnum
  having?: Prisma.MessageReactionScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: MessageReactionCountAggregateInputType | true
  _min?: MessageReactionMinAggregateInputType
  _max?: MessageReactionMaxAggregateInputType
}

export type MessageReactionGroupByOutputType = {
  id: string
  messageId: string
  participantId: string
  emoji: string
  createdAt: Date
  _count: MessageReactionCountAggregateOutputType | null
  _min: MessageReactionMinAggregateOutputType | null
  _max: MessageReactionMaxAggregateOutputType | null
}

type GetMessageReactionGroupByPayload<T extends MessageReactionGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<MessageReactionGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof MessageReactionGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], MessageReactionGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], MessageReactionGroupByOutputType[P]>
      }
    >
  > 



export type MessageReactionWhereInput = {
  AND?: Prisma.MessageReactionWhereInput | Prisma.MessageReactionWhereInput[]
  OR?: Prisma.MessageReactionWhereInput[]
  NOT?: Prisma.MessageReactionWhereInput | Prisma.MessageReactionWhereInput[]
  id?: Prisma.StringFilter<"MessageReaction"> | string
  messageId?: Prisma.StringFilter<"MessageReaction"> | string
  participantId?: Prisma.StringFilter<"MessageReaction"> | string
  emoji?: Prisma.StringFilter<"MessageReaction"> | string
  createdAt?: Prisma.DateTimeFilter<"MessageReaction"> | Date | string
  message?: Prisma.XOR<Prisma.ChatMessageScalarRelationFilter, Prisma.ChatMessageWhereInput>
  participant?: Prisma.XOR<Prisma.ParticipantScalarRelationFilter, Prisma.ParticipantWhereInput>
}

export type MessageReactionOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  messageId?: Prisma.SortOrder
  participantId?: Prisma.SortOrder
  emoji?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  message?: Prisma.ChatMessageOrderByWithRelationInput
  participant?: Prisma.ParticipantOrderByWithRelationInput
}

export type MessageReactionWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  messageId_participantId_emoji?: Prisma.MessageReactionMessageIdParticipantIdEmojiCompoundUniqueInput
  AND?: Prisma.MessageReactionWhereInput | Prisma.MessageReactionWhereInput[]
  OR?: Prisma.MessageReactionWhereInput[]
  NOT?: Prisma.MessageReactionWhereInput | Prisma.MessageReactionWhereInput[]
  messageId?: Prisma.StringFilter<"MessageReaction"> | string
  participantId?: Prisma.StringFilter<"MessageReaction"> | string
  emoji?: Prisma.StringFilter<"MessageReaction"> | string
  createdAt?: Prisma.DateTimeFilter<"MessageReaction"> | Date | string
  message?: Prisma.XOR<Prisma.ChatMessageScalarRelationFilter, Prisma.ChatMessageWhereInput>
  participant?: Prisma.XOR<Prisma.ParticipantScalarRelationFilter, Prisma.ParticipantWhereInput>
}, "id" | "messageId_participantId_emoji">

export type MessageReactionOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  messageId?: Prisma.SortOrder
  participantId?: Prisma.SortOrder
  emoji?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  _count?: Prisma.MessageReactionCountOrderByAggregateInput
  _max?: Prisma.MessageReactionMaxOrderByAggregateInput
  _min?: Prisma.MessageReactionMinOrderByAggregateInput
}

export type MessageReactionScalarWhereWithAggregatesInput = {
  AND?: Prisma.MessageReactionScalarWhereWithAggregatesInput | Prisma.MessageReactionScalarWhereWithAggregatesInput[]
  OR?: Prisma.MessageReactionScalarWhereWithAggregatesInput[]
  NOT?: Prisma.MessageReactionScalarWhereWithAggregatesInput | Prisma.MessageReactionScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"MessageReaction"> | string
  messageId?: Prisma.StringWithAggregatesFilter<"MessageReaction"> | string
  participantId?: Prisma.StringWithAggregatesFilter<"MessageReaction"> | string
  emoji?: Prisma.StringWithAggregatesFilter<"MessageReaction"> | string
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"MessageReaction"> | Date | string
}

export type MessageReactionCreateInput = {
  id?: string
  emoji: string
  createdAt?: Date | string
  message: Prisma.ChatMessageCreateNestedOneWithoutReactionsInput
  participant: Prisma.ParticipantCreateNestedOneWithoutReactionsInput
}

export type MessageReactionUncheckedCreateInput = {
  id?: string
  messageId: string
  participantId: string
  emoji: string
  createdAt?: Date | string
}

export type MessageReactionUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  emoji?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  message?: Prisma.ChatMessageUpdateOneRequiredWithoutReactionsNestedInput
  participant?: Prisma.ParticipantUpdateOneRequiredWithoutReactionsNestedInput
}

export type MessageReactionUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  messageId?: Prisma.StringFieldUpdateOperationsInput | string
  participantId?: Prisma.StringFieldUpdateOperationsInput | string
  emoji?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type MessageReactionCreateManyInput = {
  id?: string
  messageId: string
  participantId: string
  emoji: string
  createdAt?: Date | string
}

export type MessageReactionUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  emoji?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type MessageReactionUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  messageId?: Prisma.StringFieldUpdateOperationsInput | string
  participantId?: Prisma.StringFieldUpdateOperationsInput | string
  emoji?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type MessageReactionListRelationFilter = {
  every?: Prisma.MessageReactionWhereInput
  some?: Prisma.MessageReactionWhereInput
  none?: Prisma.MessageReactionWhereInput
}

export type MessageReactionOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type MessageReactionMessageIdParticipantIdEmojiCompoundUniqueInput = {
  messageId: string
  participantId: string
  emoji: string
}

export type MessageReactionCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  messageId?: Prisma.SortOrder
  participantId?: Prisma.SortOrder
  emoji?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
}

export type MessageReactionMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  messageId?: Prisma.SortOrder
  participantId?: Prisma.SortOrder
  emoji?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
}

export type MessageReactionMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  messageId?: Prisma.SortOrder
  participantId?: Prisma.SortOrder
  emoji?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
}

export type MessageReactionCreateNestedManyWithoutParticipantInput = {
  create?: Prisma.XOR<Prisma.MessageReactionCreateWithoutParticipantInput, Prisma.MessageReactionUncheckedCreateWithoutParticipantInput> | Prisma.MessageReactionCreateWithoutParticipantInput[] | Prisma.MessageReactionUncheckedCreateWithoutParticipantInput[]
  connectOrCreate?: Prisma.MessageReactionCreateOrConnectWithoutParticipantInput | Prisma.MessageReactionCreateOrConnectWithoutParticipantInput[]
  createMany?: Prisma.MessageReactionCreateManyParticipantInputEnvelope
  connect?: Prisma.MessageReactionWhereUniqueInput | Prisma.MessageReactionWhereUniqueInput[]
}

export type MessageReactionUncheckedCreateNestedManyWithoutParticipantInput = {
  create?: Prisma.XOR<Prisma.MessageReactionCreateWithoutParticipantInput, Prisma.MessageReactionUncheckedCreateWithoutParticipantInput> | Prisma.MessageReactionCreateWithoutParticipantInput[] | Prisma.MessageReactionUncheckedCreateWithoutParticipantInput[]
  connectOrCreate?: Prisma.MessageReactionCreateOrConnectWithoutParticipantInput | Prisma.MessageReactionCreateOrConnectWithoutParticipantInput[]
  createMany?: Prisma.MessageReactionCreateManyParticipantInputEnvelope
  connect?: Prisma.MessageReactionWhereUniqueInput | Prisma.MessageReactionWhereUniqueInput[]
}

export type MessageReactionUpdateManyWithoutParticipantNestedInput = {
  create?: Prisma.XOR<Prisma.MessageReactionCreateWithoutParticipantInput, Prisma.MessageReactionUncheckedCreateWithoutParticipantInput> | Prisma.MessageReactionCreateWithoutParticipantInput[] | Prisma.MessageReactionUncheckedCreateWithoutParticipantInput[]
  connectOrCreate?: Prisma.MessageReactionCreateOrConnectWithoutParticipantInput | Prisma.MessageReactionCreateOrConnectWithoutParticipantInput[]
  upsert?: Prisma.MessageReactionUpsertWithWhereUniqueWithoutParticipantInput | Prisma.MessageReactionUpsertWithWhereUniqueWithoutParticipantInput[]
  createMany?: Prisma.MessageReactionCreateManyParticipantInputEnvelope
  set?: Prisma.MessageReactionWhereUniqueInput | Prisma.MessageReactionWhereUniqueInput[]
  disconnect?: Prisma.MessageReactionWhereUniqueInput | Prisma.MessageReactionWhereUniqueInput[]
  delete?: Prisma.MessageReactionWhereUniqueInput | Prisma.MessageReactionWhereUniqueInput[]
  connect?: Prisma.MessageReactionWhereUniqueInput | Prisma.MessageReactionWhereUniqueInput[]
  update?: Prisma.MessageReactionUpdateWithWhereUniqueWithoutParticipantInput | Prisma.MessageReactionUpdateWithWhereUniqueWithoutParticipantInput[]
  updateMany?: Prisma.MessageReactionUpdateManyWithWhereWithoutParticipantInput | Prisma.MessageReactionUpdateManyWithWhereWithoutParticipantInput[]
  deleteMany?: Prisma.MessageReactionScalarWhereInput | Prisma.MessageReactionScalarWhereInput[]
}

export type MessageReactionUncheckedUpdateManyWithoutParticipantNestedInput = {
  create?: Prisma.XOR<Prisma.MessageReactionCreateWithoutParticipantInput, Prisma.MessageReactionUncheckedCreateWithoutParticipantInput> | Prisma.MessageReactionCreateWithoutParticipantInput[] | Prisma.MessageReactionUncheckedCreateWithoutParticipantInput[]
  connectOrCreate?: Prisma.MessageReactionCreateOrConnectWithoutParticipantInput | Prisma.MessageReactionCreateOrConnectWithoutParticipantInput[]
  upsert?: Prisma.MessageReactionUpsertWithWhereUniqueWithoutParticipantInput | Prisma.MessageReactionUpsertWithWhereUniqueWithoutParticipantInput[]
  createMany?: Prisma.MessageReactionCreateManyParticipantInputEnvelope
  set?: Prisma.MessageReactionWhereUniqueInput | Prisma.MessageReactionWhereUniqueInput[]
  disconnect?: Prisma.MessageReactionWhereUniqueInput | Prisma.MessageReactionWhereUniqueInput[]
  delete?: Prisma.MessageReactionWhereUniqueInput | Prisma.MessageReactionWhereUniqueInput[]
  connect?: Prisma.MessageReactionWhereUniqueInput | Prisma.MessageReactionWhereUniqueInput[]
  update?: Prisma.MessageReactionUpdateWithWhereUniqueWithoutParticipantInput | Prisma.MessageReactionUpdateWithWhereUniqueWithoutParticipantInput[]
  updateMany?: Prisma.MessageReactionUpdateManyWithWhereWithoutParticipantInput | Prisma.MessageReactionUpdateManyWithWhereWithoutParticipantInput[]
  deleteMany?: Prisma.MessageReactionScalarWhereInput | Prisma.MessageReactionScalarWhereInput[]
}

export type MessageReactionCreateNestedManyWithoutMessageInput = {
  create?: Prisma.XOR<Prisma.MessageReactionCreateWithoutMessageInput, Prisma.MessageReactionUncheckedCreateWithoutMessageInput> | Prisma.MessageReactionCreateWithoutMessageInput[] | Prisma.MessageReactionUncheckedCreateWithoutMessageInput[]
  connectOrCreate?: Prisma.MessageReactionCreateOrConnectWithoutMessageInput | Prisma.MessageReactionCreateOrConnectWithoutMessageInput[]
  createMany?: Prisma.MessageReactionCreateManyMessageInputEnvelope
  connect?: Prisma.MessageReactionWhereUniqueInput | Prisma.MessageReactionWhereUniqueInput[]
}

export type MessageReactionUncheckedCreateNestedManyWithoutMessageInput = {
  create?: Prisma.XOR<Prisma.MessageReactionCreateWithoutMessageInput, Prisma.MessageReactionUncheckedCreateWithoutMessageInput> | Prisma.MessageReactionCreateWithoutMessageInput[] | Prisma.MessageReactionUncheckedCreateWithoutMessageInput[]
  connectOrCreate?: Prisma.MessageReactionCreateOrConnectWithoutMessageInput | Prisma.MessageReactionCreateOrConnectWithoutMessageInput[]
  createMany?: Prisma.MessageReactionCreateManyMessageInputEnvelope
  connect?: Prisma.MessageReactionWhereUniqueInput | Prisma.MessageReactionWhereUniqueInput[]
}

export type MessageReactionUpdateManyWithoutMessageNestedInput = {
  create?: Prisma.XOR<Prisma.MessageReactionCreateWithoutMessageInput, Prisma.MessageReactionUncheckedCreateWithoutMessageInput> | Prisma.MessageReactionCreateWithoutMessageInput[] | Prisma.MessageReactionUncheckedCreateWithoutMessageInput[]
  connectOrCreate?: Prisma.MessageReactionCreateOrConnectWithoutMessageInput | Prisma.MessageReactionCreateOrConnectWithoutMessageInput[]
  upsert?: Prisma.MessageReactionUpsertWithWhereUniqueWithoutMessageInput | Prisma.MessageReactionUpsertWithWhereUniqueWithoutMessageInput[]
  createMany?: Prisma.MessageReactionCreateManyMessageInputEnvelope
  set?: Prisma.MessageReactionWhereUniqueInput | Prisma.MessageReactionWhereUniqueInput[]
  disconnect?: Prisma.MessageReactionWhereUniqueInput | Prisma.MessageReactionWhereUniqueInput[]
  delete?: Prisma.MessageReactionWhereUniqueInput | Prisma.MessageReactionWhereUniqueInput[]
  connect?: Prisma.MessageReactionWhereUniqueInput | Prisma.MessageReactionWhereUniqueInput[]
  update?: Prisma.MessageReactionUpdateWithWhereUniqueWithoutMessageInput | Prisma.MessageReactionUpdateWithWhereUniqueWithoutMessageInput[]
  updateMany?: Prisma.MessageReactionUpdateManyWithWhereWithoutMessageInput | Prisma.MessageReactionUpdateManyWithWhereWithoutMessageInput[]
  deleteMany?: Prisma.MessageReactionScalarWhereInput | Prisma.MessageReactionScalarWhereInput[]
}

export type MessageReactionUncheckedUpdateManyWithoutMessageNestedInput = {
  create?: Prisma.XOR<Prisma.MessageReactionCreateWithoutMessageInput, Prisma.MessageReactionUncheckedCreateWithoutMessageInput> | Prisma.MessageReactionCreateWithoutMessageInput[] | Prisma.MessageReactionUncheckedCreateWithoutMessageInput[]
  connectOrCreate?: Prisma.MessageReactionCreateOrConnectWithoutMessageInput | Prisma.MessageReactionCreateOrConnectWithoutMessageInput[]
  upsert?: Prisma.MessageReactionUpsertWithWhereUniqueWithoutMessageInput | Prisma.MessageReactionUpsertWithWhereUniqueWithoutMessageInput[]
  createMany?: Prisma.MessageReactionCreateManyMessageInputEnvelope
  set?: Prisma.MessageReactionWhereUniqueInput | Prisma.MessageReactionWhereUniqueInput[]
  disconnect?: Prisma.MessageReactionWhereUniqueInput | Prisma.MessageReactionWhereUniqueInput[]
  delete?: Prisma.MessageReactionWhereUniqueInput | Prisma.MessageReactionWhereUniqueInput[]
  connect?: Prisma.MessageReactionWhereUniqueInput | Prisma.MessageReactionWhereUniqueInput[]
  update?: Prisma.MessageReactionUpdateWithWhereUniqueWithoutMessageInput | Prisma.MessageReactionUpdateWithWhereUniqueWithoutMessageInput[]
  updateMany?: Prisma.MessageReactionUpdateManyWithWhereWithoutMessageInput | Prisma.MessageReactionUpdateManyWithWhereWithoutMessageInput[]
  deleteMany?: Prisma.MessageReactionScalarWhereInput | Prisma.MessageReactionScalarWhereInput[]
}

export type MessageReactionCreateWithoutParticipantInput = {
  id?: string
  emoji: string
  createdAt?: Date | string
  message: Prisma.ChatMessageCreateNestedOneWithoutReactionsInput
}

export type MessageReactionUncheckedCreateWithoutParticipantInput = {
  id?: string
  messageId: string
  emoji: string
  createdAt?: Date | string
}

export type MessageReactionCreateOrConnectWithoutParticipantInput = {
  where: Prisma.MessageReactionWhereUniqueInput
  create: Prisma.XOR<Prisma.MessageReactionCreateWithoutParticipantInput, Prisma.MessageReactionUncheckedCreateWithoutParticipantInput>
}

export type MessageReactionCreateManyParticipantInputEnvelope = {
  data: Prisma.MessageReactionCreateManyParticipantInput | Prisma.MessageReactionCreateManyParticipantInput[]
  skipDuplicates?: boolean
}

export type MessageReactionUpsertWithWhereUniqueWithoutParticipantInput = {
  where: Prisma.MessageReactionWhereUniqueInput
  update: Prisma.XOR<Prisma.MessageReactionUpdateWithoutParticipantInput, Prisma.MessageReactionUncheckedUpdateWithoutParticipantInput>
  create: Prisma.XOR<Prisma.MessageReactionCreateWithoutParticipantInput, Prisma.MessageReactionUncheckedCreateWithoutParticipantInput>
}

export type MessageReactionUpdateWithWhereUniqueWithoutParticipantInput = {
  where: Prisma.MessageReactionWhereUniqueInput
  data: Prisma.XOR<Prisma.MessageReactionUpdateWithoutParticipantInput, Prisma.MessageReactionUncheckedUpdateWithoutParticipantInput>
}

export type MessageReactionUpdateManyWithWhereWithoutParticipantInput = {
  where: Prisma.MessageReactionScalarWhereInput
  data: Prisma.XOR<Prisma.MessageReactionUpdateManyMutationInput, Prisma.MessageReactionUncheckedUpdateManyWithoutParticipantInput>
}

export type MessageReactionScalarWhereInput = {
  AND?: Prisma.MessageReactionScalarWhereInput | Prisma.MessageReactionScalarWhereInput[]
  OR?: Prisma.MessageReactionScalarWhereInput[]
  NOT?: Prisma.MessageReactionScalarWhereInput | Prisma.MessageReactionScalarWhereInput[]
  id?: Prisma.StringFilter<"MessageReaction"> | string
  messageId?: Prisma.StringFilter<"MessageReaction"> | string
  participantId?: Prisma.StringFilter<"MessageReaction"> | string
  emoji?: Prisma.StringFilter<"MessageReaction"> | string
  createdAt?: Prisma.DateTimeFilter<"MessageReaction"> | Date | string
}

export type MessageReactionCreateWithoutMessageInput = {
  id?: string
  emoji: string
  createdAt?: Date | string
  participant: Prisma.ParticipantCreateNestedOneWithoutReactionsInput
}

export type MessageReactionUncheckedCreateWithoutMessageInput = {
  id?: string
  participantId: string
  emoji: string
  createdAt?: Date | string
}

export type MessageReactionCreateOrConnectWithoutMessageInput = {
  where: Prisma.MessageReactionWhereUniqueInput
  create: Prisma.XOR<Prisma.MessageReactionCreateWithoutMessageInput, Prisma.MessageReactionUncheckedCreateWithoutMessageInput>
}

export type MessageReactionCreateManyMessageInputEnvelope = {
  data: Prisma.MessageReactionCreateManyMessageInput | Prisma.MessageReactionCreateManyMessageInput[]
  skipDuplicates?: boolean
}

export type MessageReactionUpsertWithWhereUniqueWithoutMessageInput = {
  where: Prisma.MessageReactionWhereUniqueInput
  update: Prisma.XOR<Prisma.MessageReactionUpdateWithoutMessageInput, Prisma.MessageReactionUncheckedUpdateWithoutMessageInput>
  create: Prisma.XOR<Prisma.MessageReactionCreateWithoutMessageInput, Prisma.MessageReactionUncheckedCreateWithoutMessageInput>
}

export type MessageReactionUpdateWithWhereUniqueWithoutMessageInput = {
  where: Prisma.MessageReactionWhereUniqueInput
  data: Prisma.XOR<Prisma.MessageReactionUpdateWithoutMessageInput, Prisma.MessageReactionUncheckedUpdateWithoutMessageInput>
}

export type MessageReactionUpdateManyWithWhereWithoutMessageInput = {
  where: Prisma.MessageReactionScalarWhereInput
  data: Prisma.XOR<Prisma.MessageReactionUpdateManyMutationInput, Prisma.MessageReactionUncheckedUpdateManyWithoutMessageInput>
}

export type MessageReactionCreateManyParticipantInput = {
  id?: string
  messageId: string
  emoji: string
  createdAt?: Date | string
}

export type MessageReactionUpdateWithoutParticipantInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  emoji?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  message?: Prisma.ChatMessageUpdateOneRequiredWithoutReactionsNestedInput
}

export type MessageReactionUncheckedUpdateWithoutParticipantInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  messageId?: Prisma.StringFieldUpdateOperationsInput | string
  emoji?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type MessageReactionUncheckedUpdateManyWithoutParticipantInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  messageId?: Prisma.StringFieldUpdateOperationsInput | string
  emoji?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type MessageReactionCreateManyMessageInput = {
  id?: string
  participantId: string
  emoji: string
  createdAt?: Date | string
}

export type MessageReactionUpdateWithoutMessageInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  emoji?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  participant?: Prisma.ParticipantUpdateOneRequiredWithoutReactionsNestedInput
}

export type MessageReactionUncheckedUpdateWithoutMessageInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  participantId?: Prisma.StringFieldUpdateOperationsInput | string
  emoji?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type MessageReactionUncheckedUpdateManyWithoutMessageInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  participantId?: Prisma.StringFieldUpdateOperationsInput | string
  emoji?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}



export type MessageReactionSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  messageId?: boolean
  participantId?: boolean
  emoji?: boolean
  createdAt?: boolean
  message?: boolean | Prisma.ChatMessageDefaultArgs<ExtArgs>
  participant?: boolean | Prisma.ParticipantDefaultArgs<ExtArgs>
}, ExtArgs["result"]["messageReaction"]>

export type MessageReactionSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  messageId?: boolean
  participantId?: boolean
  emoji?: boolean
  createdAt?: boolean
  message?: boolean | Prisma.ChatMessageDefaultArgs<ExtArgs>
  participant?: boolean | Prisma.ParticipantDefaultArgs<ExtArgs>
}, ExtArgs["result"]["messageReaction"]>

export type MessageReactionSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  messageId?: boolean
  participantId?: boolean
  emoji?: boolean
  createdAt?: boolean
  message?: boolean | Prisma.ChatMessageDefaultArgs<ExtArgs>
  participant?: boolean | Prisma.ParticipantDefaultArgs<ExtArgs>
}, ExtArgs["result"]["messageReaction"]>

export type MessageReactionSelectScalar = {
  id?: boolean
  messageId?: boolean
  participantId?: boolean
  emoji?: boolean
  createdAt?: boolean
}

export type MessageReactionOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "messageId" | "participantId" | "emoji" | "createdAt", ExtArgs["result"]["messageReaction"]>
export type MessageReactionInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  message?: boolean | Prisma.ChatMessageDefaultArgs<ExtArgs>
  participant?: boolean | Prisma.ParticipantDefaultArgs<ExtArgs>
}
export type MessageReactionIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  message?: boolean | Prisma.ChatMessageDefaultArgs<ExtArgs>
  participant?: boolean | Prisma.ParticipantDefaultArgs<ExtArgs>
}
export type MessageReactionIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  message?: boolean | Prisma.ChatMessageDefaultArgs<ExtArgs>
  participant?: boolean | Prisma.ParticipantDefaultArgs<ExtArgs>
}

export type $MessageReactionPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "MessageReaction"
  objects: {
    message: Prisma.$ChatMessagePayload<ExtArgs>
    participant: Prisma.$ParticipantPayload<ExtArgs>
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    messageId: string
    participantId: string
    emoji: string
    createdAt: Date
  }, ExtArgs["result"]["messageReaction"]>
  composites: {}
}

export type MessageReactionGetPayload<S extends boolean | null | undefined | MessageReactionDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$MessageReactionPayload, S>

export type MessageReactionCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<MessageReactionFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: MessageReactionCountAggregateInputType | true
  }

export interface MessageReactionDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['MessageReaction'], meta: { name: 'MessageReaction' } }
  /**
   * Find zero or one MessageReaction that matches the filter.
   * @param {MessageReactionFindUniqueArgs} args - Arguments to find a MessageReaction
   * @example
   * // Get one MessageReaction
   * const messageReaction = await prisma.messageReaction.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends MessageReactionFindUniqueArgs>(args: Prisma.SelectSubset<T, MessageReactionFindUniqueArgs<ExtArgs>>): Prisma.Prisma__MessageReactionClient<runtime.Types.Result.GetResult<Prisma.$MessageReactionPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one MessageReaction that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {MessageReactionFindUniqueOrThrowArgs} args - Arguments to find a MessageReaction
   * @example
   * // Get one MessageReaction
   * const messageReaction = await prisma.messageReaction.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends MessageReactionFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, MessageReactionFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__MessageReactionClient<runtime.Types.Result.GetResult<Prisma.$MessageReactionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first MessageReaction that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {MessageReactionFindFirstArgs} args - Arguments to find a MessageReaction
   * @example
   * // Get one MessageReaction
   * const messageReaction = await prisma.messageReaction.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends MessageReactionFindFirstArgs>(args?: Prisma.SelectSubset<T, MessageReactionFindFirstArgs<ExtArgs>>): Prisma.Prisma__MessageReactionClient<runtime.Types.Result.GetResult<Prisma.$MessageReactionPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first MessageReaction that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {MessageReactionFindFirstOrThrowArgs} args - Arguments to find a MessageReaction
   * @example
   * // Get one MessageReaction
   * const messageReaction = await prisma.messageReaction.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends MessageReactionFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, MessageReactionFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__MessageReactionClient<runtime.Types.Result.GetResult<Prisma.$MessageReactionPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more MessageReactions that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {MessageReactionFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all MessageReactions
   * const messageReactions = await prisma.messageReaction.findMany()
   * 
   * // Get first 10 MessageReactions
   * const messageReactions = await prisma.messageReaction.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const messageReactionWithIdOnly = await prisma.messageReaction.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends MessageReactionFindManyArgs>(args?: Prisma.SelectSubset<T, MessageReactionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$MessageReactionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a MessageReaction.
   * @param {MessageReactionCreateArgs} args - Arguments to create a MessageReaction.
   * @example
   * // Create one MessageReaction
   * const MessageReaction = await prisma.messageReaction.create({
   *   data: {
   *     // ... data to create a MessageReaction
   *   }
   * })
   * 
   */
  create<T extends MessageReactionCreateArgs>(args: Prisma.SelectSubset<T, MessageReactionCreateArgs<ExtArgs>>): Prisma.Prisma__MessageReactionClient<runtime.Types.Result.GetResult<Prisma.$MessageReactionPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many MessageReactions.
   * @param {MessageReactionCreateManyArgs} args - Arguments to create many MessageReactions.
   * @example
   * // Create many MessageReactions
   * const messageReaction = await prisma.messageReaction.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends MessageReactionCreateManyArgs>(args?: Prisma.SelectSubset<T, MessageReactionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many MessageReactions and returns the data saved in the database.
   * @param {MessageReactionCreateManyAndReturnArgs} args - Arguments to create many MessageReactions.
   * @example
   * // Create many MessageReactions
   * const messageReaction = await prisma.messageReaction.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many MessageReactions and only return the `id`
   * const messageReactionWithIdOnly = await prisma.messageReaction.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends MessageReactionCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, MessageReactionCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$MessageReactionPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a MessageReaction.
   * @param {MessageReactionDeleteArgs} args - Arguments to delete one MessageReaction.
   * @example
   * // Delete one MessageReaction
   * const MessageReaction = await prisma.messageReaction.delete({
   *   where: {
   *     // ... filter to delete one MessageReaction
   *   }
   * })
   * 
   */
  delete<T extends MessageReactionDeleteArgs>(args: Prisma.SelectSubset<T, MessageReactionDeleteArgs<ExtArgs>>): Prisma.Prisma__MessageReactionClient<runtime.Types.Result.GetResult<Prisma.$MessageReactionPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one MessageReaction.
   * @param {MessageReactionUpdateArgs} args - Arguments to update one MessageReaction.
   * @example
   * // Update one MessageReaction
   * const messageReaction = await prisma.messageReaction.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends MessageReactionUpdateArgs>(args: Prisma.SelectSubset<T, MessageReactionUpdateArgs<ExtArgs>>): Prisma.Prisma__MessageReactionClient<runtime.Types.Result.GetResult<Prisma.$MessageReactionPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more MessageReactions.
   * @param {MessageReactionDeleteManyArgs} args - Arguments to filter MessageReactions to delete.
   * @example
   * // Delete a few MessageReactions
   * const { count } = await prisma.messageReaction.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends MessageReactionDeleteManyArgs>(args?: Prisma.SelectSubset<T, MessageReactionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more MessageReactions.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {MessageReactionUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many MessageReactions
   * const messageReaction = await prisma.messageReaction.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends MessageReactionUpdateManyArgs>(args: Prisma.SelectSubset<T, MessageReactionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more MessageReactions and returns the data updated in the database.
   * @param {MessageReactionUpdateManyAndReturnArgs} args - Arguments to update many MessageReactions.
   * @example
   * // Update many MessageReactions
   * const messageReaction = await prisma.messageReaction.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more MessageReactions and only return the `id`
   * const messageReactionWithIdOnly = await prisma.messageReaction.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends MessageReactionUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, MessageReactionUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$MessageReactionPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one MessageReaction.
   * @param {MessageReactionUpsertArgs} args - Arguments to update or create a MessageReaction.
   * @example
   * // Update or create a MessageReaction
   * const messageReaction = await prisma.messageReaction.upsert({
   *   create: {
   *     // ... data to create a MessageReaction
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the MessageReaction we want to update
   *   }
   * })
   */
  upsert<T extends MessageReactionUpsertArgs>(args: Prisma.SelectSubset<T, MessageReactionUpsertArgs<ExtArgs>>): Prisma.Prisma__MessageReactionClient<runtime.Types.Result.GetResult<Prisma.$MessageReactionPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of MessageReactions.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {MessageReactionCountArgs} args - Arguments to filter MessageReactions to count.
   * @example
   * // Count the number of MessageReactions
   * const count = await prisma.messageReaction.count({
   *   where: {
   *     // ... the filter for the MessageReactions we want to count
   *   }
   * })
  **/
  count<T extends MessageReactionCountArgs>(
    args?: Prisma.Subset<T, MessageReactionCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], MessageReactionCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a MessageReaction.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {MessageReactionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends MessageReactionAggregateArgs>(args: Prisma.Subset<T, MessageReactionAggregateArgs>): Prisma.PrismaPromise<GetMessageReactionAggregateType<T>>

  /**
   * Group by MessageReaction.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {MessageReactionGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends MessageReactionGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: MessageReactionGroupByArgs['orderBy'] }
      : { orderBy?: MessageReactionGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, MessageReactionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMessageReactionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the MessageReaction model
 */
readonly fields: MessageReactionFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for MessageReaction.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__MessageReactionClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  message<T extends Prisma.ChatMessageDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.ChatMessageDefaultArgs<ExtArgs>>): Prisma.Prisma__ChatMessageClient<runtime.Types.Result.GetResult<Prisma.$ChatMessagePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  participant<T extends Prisma.ParticipantDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.ParticipantDefaultArgs<ExtArgs>>): Prisma.Prisma__ParticipantClient<runtime.Types.Result.GetResult<Prisma.$ParticipantPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the MessageReaction model
 */
export interface MessageReactionFieldRefs {
  readonly id: Prisma.FieldRef<"MessageReaction", 'String'>
  readonly messageId: Prisma.FieldRef<"MessageReaction", 'String'>
  readonly participantId: Prisma.FieldRef<"MessageReaction", 'String'>
  readonly emoji: Prisma.FieldRef<"MessageReaction", 'String'>
  readonly createdAt: Prisma.FieldRef<"MessageReaction", 'DateTime'>
}
    

// Custom InputTypes
/**
 * MessageReaction findUnique
 */
export type MessageReactionFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MessageReaction
   */
  select?: Prisma.MessageReactionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the MessageReaction
   */
  omit?: Prisma.MessageReactionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MessageReactionInclude<ExtArgs> | null
  /**
   * Filter, which MessageReaction to fetch.
   */
  where: Prisma.MessageReactionWhereUniqueInput
}

/**
 * MessageReaction findUniqueOrThrow
 */
export type MessageReactionFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MessageReaction
   */
  select?: Prisma.MessageReactionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the MessageReaction
   */
  omit?: Prisma.MessageReactionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MessageReactionInclude<ExtArgs> | null
  /**
   * Filter, which MessageReaction to fetch.
   */
  where: Prisma.MessageReactionWhereUniqueInput
}

/**
 * MessageReaction findFirst
 */
export type MessageReactionFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MessageReaction
   */
  select?: Prisma.MessageReactionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the MessageReaction
   */
  omit?: Prisma.MessageReactionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MessageReactionInclude<ExtArgs> | null
  /**
   * Filter, which MessageReaction to fetch.
   */
  where?: Prisma.MessageReactionWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of MessageReactions to fetch.
   */
  orderBy?: Prisma.MessageReactionOrderByWithRelationInput | Prisma.MessageReactionOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for MessageReactions.
   */
  cursor?: Prisma.MessageReactionWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` MessageReactions from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` MessageReactions.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of MessageReactions.
   */
  distinct?: Prisma.MessageReactionScalarFieldEnum | Prisma.MessageReactionScalarFieldEnum[]
}

/**
 * MessageReaction findFirstOrThrow
 */
export type MessageReactionFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MessageReaction
   */
  select?: Prisma.MessageReactionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the MessageReaction
   */
  omit?: Prisma.MessageReactionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MessageReactionInclude<ExtArgs> | null
  /**
   * Filter, which MessageReaction to fetch.
   */
  where?: Prisma.MessageReactionWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of MessageReactions to fetch.
   */
  orderBy?: Prisma.MessageReactionOrderByWithRelationInput | Prisma.MessageReactionOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for MessageReactions.
   */
  cursor?: Prisma.MessageReactionWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` MessageReactions from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` MessageReactions.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of MessageReactions.
   */
  distinct?: Prisma.MessageReactionScalarFieldEnum | Prisma.MessageReactionScalarFieldEnum[]
}

/**
 * MessageReaction findMany
 */
export type MessageReactionFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MessageReaction
   */
  select?: Prisma.MessageReactionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the MessageReaction
   */
  omit?: Prisma.MessageReactionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MessageReactionInclude<ExtArgs> | null
  /**
   * Filter, which MessageReactions to fetch.
   */
  where?: Prisma.MessageReactionWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of MessageReactions to fetch.
   */
  orderBy?: Prisma.MessageReactionOrderByWithRelationInput | Prisma.MessageReactionOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing MessageReactions.
   */
  cursor?: Prisma.MessageReactionWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` MessageReactions from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` MessageReactions.
   */
  skip?: number
  distinct?: Prisma.MessageReactionScalarFieldEnum | Prisma.MessageReactionScalarFieldEnum[]
}

/**
 * MessageReaction create
 */
export type MessageReactionCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MessageReaction
   */
  select?: Prisma.MessageReactionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the MessageReaction
   */
  omit?: Prisma.MessageReactionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MessageReactionInclude<ExtArgs> | null
  /**
   * The data needed to create a MessageReaction.
   */
  data: Prisma.XOR<Prisma.MessageReactionCreateInput, Prisma.MessageReactionUncheckedCreateInput>
}

/**
 * MessageReaction createMany
 */
export type MessageReactionCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many MessageReactions.
   */
  data: Prisma.MessageReactionCreateManyInput | Prisma.MessageReactionCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * MessageReaction createManyAndReturn
 */
export type MessageReactionCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MessageReaction
   */
  select?: Prisma.MessageReactionSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the MessageReaction
   */
  omit?: Prisma.MessageReactionOmit<ExtArgs> | null
  /**
   * The data used to create many MessageReactions.
   */
  data: Prisma.MessageReactionCreateManyInput | Prisma.MessageReactionCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MessageReactionIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * MessageReaction update
 */
export type MessageReactionUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MessageReaction
   */
  select?: Prisma.MessageReactionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the MessageReaction
   */
  omit?: Prisma.MessageReactionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MessageReactionInclude<ExtArgs> | null
  /**
   * The data needed to update a MessageReaction.
   */
  data: Prisma.XOR<Prisma.MessageReactionUpdateInput, Prisma.MessageReactionUncheckedUpdateInput>
  /**
   * Choose, which MessageReaction to update.
   */
  where: Prisma.MessageReactionWhereUniqueInput
}

/**
 * MessageReaction updateMany
 */
export type MessageReactionUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update MessageReactions.
   */
  data: Prisma.XOR<Prisma.MessageReactionUpdateManyMutationInput, Prisma.MessageReactionUncheckedUpdateManyInput>
  /**
   * Filter which MessageReactions to update
   */
  where?: Prisma.MessageReactionWhereInput
  /**
   * Limit how many MessageReactions to update.
   */
  limit?: number
}

/**
 * MessageReaction updateManyAndReturn
 */
export type MessageReactionUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MessageReaction
   */
  select?: Prisma.MessageReactionSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the MessageReaction
   */
  omit?: Prisma.MessageReactionOmit<ExtArgs> | null
  /**
   * The data used to update MessageReactions.
   */
  data: Prisma.XOR<Prisma.MessageReactionUpdateManyMutationInput, Prisma.MessageReactionUncheckedUpdateManyInput>
  /**
   * Filter which MessageReactions to update
   */
  where?: Prisma.MessageReactionWhereInput
  /**
   * Limit how many MessageReactions to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MessageReactionIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * MessageReaction upsert
 */
export type MessageReactionUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MessageReaction
   */
  select?: Prisma.MessageReactionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the MessageReaction
   */
  omit?: Prisma.MessageReactionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MessageReactionInclude<ExtArgs> | null
  /**
   * The filter to search for the MessageReaction to update in case it exists.
   */
  where: Prisma.MessageReactionWhereUniqueInput
  /**
   * In case the MessageReaction found by the `where` argument doesn't exist, create a new MessageReaction with this data.
   */
  create: Prisma.XOR<Prisma.MessageReactionCreateInput, Prisma.MessageReactionUncheckedCreateInput>
  /**
   * In case the MessageReaction was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.MessageReactionUpdateInput, Prisma.MessageReactionUncheckedUpdateInput>
}

/**
 * MessageReaction delete
 */
export type MessageReactionDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MessageReaction
   */
  select?: Prisma.MessageReactionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the MessageReaction
   */
  omit?: Prisma.MessageReactionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MessageReactionInclude<ExtArgs> | null
  /**
   * Filter which MessageReaction to delete.
   */
  where: Prisma.MessageReactionWhereUniqueInput
}

/**
 * MessageReaction deleteMany
 */
export type MessageReactionDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which MessageReactions to delete
   */
  where?: Prisma.MessageReactionWhereInput
  /**
   * Limit how many MessageReactions to delete.
   */
  limit?: number
}

/**
 * MessageReaction without action
 */
export type MessageReactionDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MessageReaction
   */
  select?: Prisma.MessageReactionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the MessageReaction
   */
  omit?: Prisma.MessageReactionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MessageReactionInclude<ExtArgs> | null
}
